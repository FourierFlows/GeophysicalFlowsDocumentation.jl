var documenterSearchIndex = {"docs":
[{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/twodnavierstokes_decaying.jl\"","category":"page"},{"location":"literated/twodnavierstokes_decaying/#D-decaying-turbulence","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"","category":"section"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"This example can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"A simulation of decaying two-dimensional turbulence.","category":"page"},{"location":"literated/twodnavierstokes_decaying/#Install-dependencies","page":"2D decaying turbulence","title":"Install dependencies","text":"","category":"section"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"using Pkg\npkg\"add GeophysicalFlows, Printf, Random, Plots\"","category":"page"},{"location":"literated/twodnavierstokes_decaying/#Let's-begin","page":"2D decaying turbulence","title":"Let's begin","text":"","category":"section"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Let's load GeophysicalFlows.jl and some other needed packages.","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"using GeophysicalFlows, Printf, Random, Plots\n\nusing Random: seed!\nusing GeophysicalFlows: peakedisotropicspectrum","category":"page"},{"location":"literated/twodnavierstokes_decaying/#Choosing-a-device:-CPU-or-GPU","page":"2D decaying turbulence","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_decaying/#Numerical,-domain,-and-simulation-parameters","page":"2D decaying turbulence","title":"Numerical, domain, and simulation parameters","text":"","category":"section"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"First, we pick some numerical and physical parameters for our model.","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"n, L  = 128, 2π             # grid resolution and domain length\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Then we pick the time-stepper parameters","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"    dt = 1e-2  # timestep\nnsteps = 4000  # total number of steps\n nsubs = 20    # number of steps between each plot\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_decaying/#Problem-setup","page":"2D decaying turbulence","title":"Problem setup","text":"","category":"section"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"We initialize a Problem by providing a set of keyword arguments. The stepper keyword defines the time-stepper to be used.","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"prob = TwoDNavierStokes.Problem(dev; nx=n, Lx=L, ny=n, Ly=L, dt=dt, stepper=\"FilteredRK4\")\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Next we define some shortcuts for convenience.","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"sol, clock, vars, grid = prob.sol, prob.clock, prob.vars, prob.grid\nx, y = grid.x, grid.y\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_decaying/#Setting-initial-conditions","page":"2D decaying turbulence","title":"Setting initial conditions","text":"","category":"section"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Our initial condition tries to reproduce the initial condition used by McWilliams (JFM, 1984).","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"seed!(1234)\nk₀, E₀ = 6, 0.5\nζ₀ = peakedisotropicspectrum(grid, k₀, E₀, mask=prob.timestepper.filter)\nTwoDNavierStokes.set_ζ!(prob, ζ₀)\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Let's plot the initial vorticity field. Note that when plotting, we decorate the variable to be plotted with Array() to make sure it is brought back on the CPU when vars live on the GPU.","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"heatmap(x, y, Array(vars.ζ'),\n    aspectratio = 1,\n              c = :balance,\n           clim = (-40, 40),\n          xlims = (-L/2, L/2),\n          ylims = (-L/2, L/2),\n         xticks = -3:3,\n         yticks = -3:3,\n         xlabel = \"x\",\n         ylabel = \"y\",\n          title = \"initial vorticity\",\n     framestyle = :box)","category":"page"},{"location":"literated/twodnavierstokes_decaying/#Diagnostics","page":"2D decaying turbulence","title":"Diagnostics","text":"","category":"section"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Create Diagnostics – energy and enstrophy functions are imported at the top.","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"E = Diagnostic(TwoDNavierStokes.energy, prob; nsteps=nsteps)\nZ = Diagnostic(TwoDNavierStokes.enstrophy, prob; nsteps=nsteps)\ndiags = [E, Z] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_decaying/#Output","page":"2D decaying turbulence","title":"Output","text":"","category":"section"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"filepath = \".\"\nplotpath = \"./plots_decayingTwoDNavierStokes\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"decayingTwoDNavierStokes.jld2\")\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Do some basic file management","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"And then create Output","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"get_sol(prob) = prob.sol # extracts the Fourier-transformed solution\nget_u(prob) = irfft(im * grid.l .* grid.invKrsq .* sol, grid.nx)\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nsaveproblem(out)\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_decaying/#Visualizing-the-simulation","page":"2D decaying turbulence","title":"Visualizing the simulation","text":"","category":"section"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"We initialize a plot with the vorticity field and the time-series of energy and enstrophy diagnostics.","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"p1 = heatmap(x, y, Array(vars.ζ'),\n         aspectratio = 1,\n                   c = :balance,\n                clim = (-40, 40),\n               xlims = (-L/2, L/2),\n               ylims = (-L/2, L/2),\n              xticks = -3:3,\n              yticks = -3:3,\n              xlabel = \"x\",\n              ylabel = \"y\",\n               title = \"vorticity, t=\" * @sprintf(\"%.2f\", clock.t),\n          framestyle = :box)\n\np2 = plot(2, # this means \"a plot with two series\"\n               label = [\"energy E(t)/E(0)\" \"enstrophy Z(t)/Z(0)\"],\n              legend = :right,\n           linewidth = 2,\n               alpha = 0.7,\n              xlabel = \"t\",\n               xlims = (0, 41),\n               ylims = (0, 1.1))\n\nl = @layout Plots.grid(1, 2)\np = plot(p1, p2, layout = l, size = (800, 360))","category":"page"},{"location":"literated/twodnavierstokes_decaying/#Time-stepping-the-Problem-forward","page":"2D decaying turbulence","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"We time-step the Problem forward in time.","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"startwalltime = time()\n\nanim = @animate for j = 0:Int(nsteps/nsubs)\n  if j % (1000 / nsubs) == 0\n    cfl = clock.dt * maximum([maximum(vars.u) / grid.dx, maximum(vars.v) / grid.dy])\n\n    log = @sprintf(\"step: %04d, t: %d, cfl: %.2f, ΔE: %.4f, ΔZ: %.4f, walltime: %.2f min\",\n        clock.step, clock.t, cfl, E.data[E.i]/E.data[1], Z.data[Z.i]/Z.data[1], (time()-startwalltime)/60)\n\n    println(log)\n  end\n\n  p[1][1][:z] = Array(vars.ζ)\n  p[1][:title] = \"vorticity, t=\" * @sprintf(\"%.2f\", clock.t)\n  push!(p[2][1], E.t[E.i], E.data[E.i]/E.data[1])\n  push!(p[2][2], Z.t[Z.i], Z.data[Z.i]/Z.data[1])\n\n  stepforward!(prob, diags, nsubs)\n  TwoDNavierStokes.updatevars!(prob)\nend\n\nmp4(anim, \"twodturb.mp4\", fps=18)","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Last we can save the output by calling","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"saveoutput(out)`","category":"page"},{"location":"literated/twodnavierstokes_decaying/#Radial-energy-spectrum","page":"2D decaying turbulence","title":"Radial energy spectrum","text":"","category":"section"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"After the simulation is done we plot the instantaneous radial energy spectrum to illustrate how FourierFlows.radialspectrum can be used,","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"E  = @. 0.5 * (vars.u^2 + vars.v^2) # energy density\nEh = rfft(E)                  # Fourier transform of energy density\nkr, Ehr = FourierFlows.radialspectrum(Eh, grid, refinement=1) # compute radial specturm of `Eh`\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"and we plot it.","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"plot(kr, abs.(Ehr),\n    linewidth = 2,\n        alpha = 0.7,\n       xlabel = \"kᵣ\", ylabel = \"∫ |Ê| kᵣ dk_θ\",\n        xlims = (5e-1, grid.nx),\n       xscale = :log10, yscale = :log10,\n        title = \"Radial energy spectrum\",\n       legend = false)","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"","category":"page"},{"location":"literated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"modules/multilayerqg/#MultiLayerQG","page":"MultiLayerQG","title":"MultiLayerQG","text":"","category":"section"},{"location":"modules/multilayerqg/#Basic-Equations","page":"MultiLayerQG","title":"Basic Equations","text":"","category":"section"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"This module solves the layered quasi-geostrophic equations on a beta plane of variable fluid  depth H - h(x y). The flow in each layer is obtained through a streamfunction psi_j as  (u_j v_j) = (-partial_y psi_j partial_x psi_j), j = 1 dots n, where n  is the number of fluid layers.","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"The QGPV in each layer is","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"mathrmQGPV_j = q_j + underbracef_0 + beta y_textrmplanetary PV + delta_j n underbracefracf_0 hH_n_textrmtopographic PV quad j = 1 dots n ","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"where q_j incorporates the relative vorticity in each layer nabla^2 psi_j and the  vortex stretching terms:","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"q_1 = nabla^2 psi_1 + F_32 1 (psi_2 - psi_1) \nq_j = nabla^2 psi_j + F_j-12 j (psi_j-1 - psi_j) + F_j+12 j (psi_j+1 - psi_j)  quad j = 2 dots n-1 \nq_n = nabla^2 psi_n + F_n-12 n (psi_n-1 - psi_n) ","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"with","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"F_j+12 k = fracf_0^2g_j+12 H_k quad textand quad\ng_j+12 = g fracrho_j+1 - rho_jrho_j+1 ","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"In view of the relationships above, when we convert to Fourier space q's and psi's are  related via the matrix equation","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"beginpmatrix widehatq_𝐤 1vdotswidehatq_𝐤 n endpmatrix =\nunderbraceleft(-𝐤^2 mathbb1 + mathbbF right)_equiv mathbbS_𝐤\nbeginpmatrix widehatpsi_𝐤 1vdotswidehatpsi_𝐤 n endpmatrix","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"where","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"mathbbF equiv beginpmatrix\n -F_32 1               F_32 1     0     cdots     0\n  F_32 2  -(F_32 2+F_52 2)  F_52 2         vdots\n 0                             ddots     ddots    ddots  \n vdots                                                      0 \n 0                  cdots                0    F_n-12 n  -F_n-12 n\nendpmatrix ","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"Including an imposed zonal flow U_j(y) in each layer, the equations of motion are:","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"partial_t q_j + mathsfJ(psi_j q_j ) + (U_j - partial_ypsi_j) partial_x Q_j +  U_j partial_x q_j  + (partial_y Q_j)(partial_x psi_j) = -delta_j n mu nabla^2 psi_n - nu (-1)^n_nu nabla^2 n_nu q_j ","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"with","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"partial_y Q_j equiv beta - partial_y^2 U_j - (1-delta_j1) F_j-12 j (U_j-1 - U_j) - (1 - delta_jn) F_j+12 j (U_j+1 - U_j) + delta_jn partial_y eta  \npartial_x Q_j equiv delta_j n partial_x eta ","category":"page"},{"location":"modules/multilayerqg/#Implementation","page":"MultiLayerQG","title":"Implementation","text":"","category":"section"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"Matrices mathbbS_𝐤 as well as mathbbS^-1_𝐤 are included in params as  params.S and params.S⁻¹ respectively. Additionally, the background PV gradients  partial_x Q and partial_y Q are also included in the params as params.Qx and  params.Qy.","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"One can get the widehatpsi_j from widehatq_j via  streamfunctionfrompv!(psih, qh, params, grid), while the inverse, i.e. obtain widehatq_j from widehatpsi_j, is done via  pvfromstreamfunction!(qh, psih, params, grid).","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"The equations of motion are time-stepped forward in Fourier space:","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"partial_t widehatq_j = - widehatmathsfJ(psi_j q_j)  - widehatU_j partial_x Q_j - widehatU_j partial_x q_j\n+ widehat(partial_y psi_j) partial_x Q_j  - widehat(partial_x psi_j)(partial_y Q_j) + delta_j n mu 𝐤^2 widehatpsi_n - nu 𝐤^2n_nu widehatq_j ","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"In doing so the Jacobian is computed in the conservative form: mathsfJ(fg) = partial_y  (partial_x f) g - partial_x (partial_y f) g.","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"The state variable sol consists of the Fourier transforms of q_j at each layer, i.e.,  qh.","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"The linear operator is constructed in Equation","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"GeophysicalFlows.MultiLayerQG.Equation\nGeophysicalFlows.MultiLayerQG.hyperviscosity","category":"page"},{"location":"modules/multilayerqg/#GeophysicalFlows.MultiLayerQG.Equation","page":"MultiLayerQG","title":"GeophysicalFlows.MultiLayerQG.Equation","text":"Equation(dev, params, grid)\n\nReturn the equation for a multi-layer quasi-geostrophic problem with params and grid.  The linear opeartor L includes only (hyper)-viscosity and is computed via  hyperviscosity(dev, params, grid).\n\nThe nonlinear term is computed via function calcN!.\n\n\n\n\n\n","category":"function"},{"location":"modules/multilayerqg/#GeophysicalFlows.MultiLayerQG.hyperviscosity","page":"MultiLayerQG","title":"GeophysicalFlows.MultiLayerQG.hyperviscosity","text":"hyperviscosity(dev, params, grid)\n\nReturn the linear operator L that corresponds to (hyper)-viscosity of order n_ν with  coefficient ν for n fluid layers.\n\nL_j = - ν 𝐤^2 n_ν  j = 1 n \n\n\n\n\n\n","category":"function"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"The nonlinear terms are computed via","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"GeophysicalFlows.MultiLayerQG.calcN!","category":"page"},{"location":"modules/multilayerqg/#GeophysicalFlows.MultiLayerQG.calcN!","page":"MultiLayerQG","title":"GeophysicalFlows.MultiLayerQG.calcN!","text":"calcN!(N, sol, t, clock, vars, params, grid)\n\nCompute the nonlinear term, that is the advection term, the bottom drag, and the forcing:\n\nN_j = - widehat𝖩(ψ_j q_j) - widehatU_j _x Q_j - widehatU_j _x q_j\n + widehat(_y ψ_j)(_x Q_j) - widehat(_x ψ_j)(_y Q_j) + δ_j n μ 𝐤^2 ψ_n + F_j \n\n\n\n\n\n","category":"function"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"which in turn calls calcN_advection!  and addforcing!.","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"tip: Linearized MultiLayerQG dynamics \nThe MultiLayerQG module includes also a linearized version of the dynamics about a base flow U_j(y), j = 1 dots n; see LinearEquation,  calcNlinear!, and  calcN_linearadvection!.","category":"page"},{"location":"modules/multilayerqg/#Parameters-and-Variables","page":"MultiLayerQG","title":"Parameters and Variables","text":"","category":"section"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"All required parameters are included inside Params and all module variables are included inside Vars.","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"For decaying case (no forcing, F=0), vars can be constructed with DecayingVars.  For the forced case (F ne 0) the vars struct is with ForcedVars or StochasticForcedVars.","category":"page"},{"location":"modules/multilayerqg/#Helper-functions","page":"MultiLayerQG","title":"Helper functions","text":"","category":"section"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"GeophysicalFlows.MultiLayerQG.set_q!\nGeophysicalFlows.MultiLayerQG.set_ψ!\nGeophysicalFlows.MultiLayerQG.updatevars!","category":"page"},{"location":"modules/multilayerqg/#GeophysicalFlows.MultiLayerQG.set_q!","page":"MultiLayerQG","title":"GeophysicalFlows.MultiLayerQG.set_q!","text":"set_q!(sol, params, vars, grid, q)\nset_q!(prob, q)\n\nSet the solution prob.sol as the transform of q and update variables.\n\n\n\n\n\n","category":"function"},{"location":"modules/multilayerqg/#GeophysicalFlows.MultiLayerQG.set_ψ!","page":"MultiLayerQG","title":"GeophysicalFlows.MultiLayerQG.set_ψ!","text":"set_ψ!(params, vars, grid, sol, ψ)\nset_ψ!(prob, ψ)\n\nSet the solution prob.sol to the transform qh that corresponds to streamfunction ψ  and update variables.\n\n\n\n\n\n","category":"function"},{"location":"modules/multilayerqg/#GeophysicalFlows.MultiLayerQG.updatevars!","page":"MultiLayerQG","title":"GeophysicalFlows.MultiLayerQG.updatevars!","text":"updatevars!(vars, params, grid, sol)\nupdatevars!(prob)\n\nUpdate all problem variables using sol.\n\n\n\n\n\n","category":"function"},{"location":"modules/multilayerqg/#Diagnostics","page":"MultiLayerQG","title":"Diagnostics","text":"","category":"section"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"The eddy kinetic energy in each layer and the eddy potential energy that corresponds to each  fluid interface is computed via energies():","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"GeophysicalFlows.MultiLayerQG.energies","category":"page"},{"location":"modules/multilayerqg/#GeophysicalFlows.MultiLayerQG.energies","page":"MultiLayerQG","title":"GeophysicalFlows.MultiLayerQG.energies","text":"energies(vars, params, grid, sol)\nenergies(prob)\n\nReturn the kinetic energy of each fluid layer KE_1  KE_n, and the potential energy of each fluid interface PE_32  PE_n-12, where n is the number of layers in the fluid. (When n=1, only the kinetic energy is returned.)\n\nThe kinetic energy at the j-th fluid layer is \n\n𝖪𝖤_j = fracH_jH int frac12 bf  ψ_j^2 frac𝖽x 𝖽yL_x L_y = frac12 fracH_jH sum_𝐤 𝐤² ψ_j²  j = 1  n \n\nwhile the potential energy that corresponds to the interface j+12 (i.e., the interface  between the j-th and (j+1)-th fluid layer) is\n\n𝖯𝖤_j+12 = int frac12 fracf₀^2g_j+12 (ψ_j - ψ_j+1)^2 frac𝖽x 𝖽yL_x L_y = frac12 fracf₀^2g_j+12 sum_𝐤 ψ_j - ψ_j+1²  j = 1  n-1 \n\n\n\n\n\n","category":"function"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"The lateral eddy fluxes in each layer and the vertical fluxes across fluid interfaces are computed via fluxes():","category":"page"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"GeophysicalFlows.MultiLayerQG.fluxes","category":"page"},{"location":"modules/multilayerqg/#GeophysicalFlows.MultiLayerQG.fluxes","page":"MultiLayerQG","title":"GeophysicalFlows.MultiLayerQG.fluxes","text":"fluxes(vars, params, grid, sol)\nfluxes(prob)\n\nReturn the lateral eddy fluxes within each fluid layer, lateralfluxes_1lateralfluxes_n and also the vertical eddy fluxes at each fluid interface,  verticalfluxes_32verticalfluxes_n-12, where n is the total number of layers in the fluid. (When n=1, only the lateral fluxes are returned.)\n\nThe lateral eddy fluxes within the j-th fluid layer are\n\ntextrmlateralfluxes_j = fracH_jH int U_j v_j _y u_j \nfrac𝖽x 𝖽yL_x L_y    j = 1  n \n\nwhile the vertical eddy fluxes at the j+12-th fluid interface  (i.e., interface between  the j-th and (j+1)-th fluid layer) are\n\ntextrmverticalfluxes_j+12 = int fracf₀²g_j+12 H (U_j - U_j+1)  \nv_j+1 ψ_j frac𝖽x 𝖽yL_x L_y   j = 1  n-1\n\n\n\n\n\n","category":"function"},{"location":"modules/multilayerqg/#Examples","page":"MultiLayerQG","title":"Examples","text":"","category":"section"},{"location":"modules/multilayerqg/","page":"MultiLayerQG","title":"MultiLayerQG","text":"examples/multilayerqg_2layer.jl: A script that simulates the growth and equilibration of baroclinic eddy turbulence in the Phillips 2-layer model.","category":"page"},{"location":"modules/surfaceqg/#SurfaceQG","page":"SurfaceQG","title":"SurfaceQG","text":"","category":"section"},{"location":"modules/surfaceqg/#Basic-Equations","page":"SurfaceQG","title":"Basic Equations","text":"","category":"section"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"This module solves the non-dimensional surface quasi-geostrophic (SQG) equation for surface  buoyancy b_s = b(x y z=0), as described in Capet et al., 2008. The buoyancy and the fluid  velocity at the surface are related through a streamfunction psi via:","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"(u_s v_s b_s) = (-partial_y psi partial_x psi -partial_z psi) ","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"The SQG model evolves the surface buoyancy,","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"partial_t b_s + mathsfJ(psi b_s) = underbrace-nu(-1)^n_nu nabla^2n_nu b_s_textrmbuoyancy diffusion + underbraceF_textrmforcing ","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"Above, mathsfJ(psi b) = (partial_x psi)(partial_y b) - (partial_y psi)(partial_x b)  is the two-dimensional Jacobian. The evolution of buoyancy is only solved for the surface  layer, but b_s is a function of the vertical gradient of psi. In the SQG system, the  potential vorticity in the interior of the flow is identically zero. That is, relative vorticity  is equal and opposite to the vertical stretching of the buoyancy layers,","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"underbraceleft(partial_x^2 + partial_y^2 right) psi_textrmrelative vorticity + underbracepartial_z^2 psi_textrmstretching term = 0 ","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"with the boundary conditions b_s = - partial_z psi_z=0 and psi rightarrow 0 as z rightarrow -infty. (We take here the oceanographic convention: z le 0.)","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"These equations describe a system where the streamfunction (and hence the dynamics) at all depths is prescribed entirely by the surface buoyancy. By taking the Fourier transform in the horizontal (x and y), the streamfunction-buoyancy relation is:","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"widehatpsi(k_x k_y z t) = - fracwidehatb_s𝐤  e^𝐤z  ","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"where 𝐤 = sqrtk_x^2 + k_y^2 is the total horizontal wavenumber.","category":"page"},{"location":"modules/surfaceqg/#Implementation","page":"SurfaceQG","title":"Implementation","text":"","category":"section"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"The buoyancy equation is time-stepped forward in Fourier space:","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"partial_t widehatb_s = - widehatmathsfJ(psi b_s) - nu 𝐤^2 n_nu widehatb_s + widehatF ","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"The surface buoyancy is b. The state variable  sol is the Fourier transform of the surface buoyancy, bh.","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"The Jacobian is computed in the conservative form: mathsfJ(f g) = partial_y  (partial_x f) g -partial_x (partial_y f) g.","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"The linear operator is constructed in Equation","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"GeophysicalFlows.SurfaceQG.Equation","category":"page"},{"location":"modules/surfaceqg/#GeophysicalFlows.SurfaceQG.Equation","page":"SurfaceQG","title":"GeophysicalFlows.SurfaceQG.Equation","text":"Equation(params, grid)\n\nReturn the equation for surface QG dynamics with params and grid. The linear  opeartor L includes (hyper)-viscosity of order n_ν with coefficient ν,\n\nL = - ν 𝐤^2 n_ν \n\nPlain old viscocity corresponds to n_ν=1.\n\nThe nonlinear term is computed via function calcN!().\n\n\n\n\n\n","category":"function"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"while the nonlinear terms via ","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"GeophysicalFlows.SurfaceQG.calcN!","category":"page"},{"location":"modules/surfaceqg/#GeophysicalFlows.SurfaceQG.calcN!","page":"SurfaceQG","title":"GeophysicalFlows.SurfaceQG.calcN!","text":"calcN!(N, sol, t, clock, vars, params, grid)\n\nCalculate the nonlinear term, that is the advection term and the forcing,\n\nN = - widehat𝖩(ψ b) + F \n\n\n\n\n\n","category":"function"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"which in turn calls calcN_advection!  and addforcing!.","category":"page"},{"location":"modules/surfaceqg/#Parameters-and-Variables","page":"SurfaceQG","title":"Parameters and Variables","text":"","category":"section"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"All required parameters are included inside Params and all module variables are included inside Vars.","category":"page"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"For decaying case (no forcing, F = 0), vars can be constructed with DecayingVars.  For the forced case (F ne 0) the vars struct is with ForcedVars or StochasticForcedVars.","category":"page"},{"location":"modules/surfaceqg/#Helper-functions","page":"SurfaceQG","title":"Helper functions","text":"","category":"section"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"GeophysicalFlows.SurfaceQG.updatevars!\nGeophysicalFlows.SurfaceQG.set_b!","category":"page"},{"location":"modules/surfaceqg/#GeophysicalFlows.SurfaceQG.updatevars!","page":"SurfaceQG","title":"GeophysicalFlows.SurfaceQG.updatevars!","text":"updatevars!(prob)\n\nUpdate variables in vars with solution in sol.\n\n\n\n\n\n","category":"function"},{"location":"modules/surfaceqg/#GeophysicalFlows.SurfaceQG.set_b!","page":"SurfaceQG","title":"GeophysicalFlows.SurfaceQG.set_b!","text":"set_b!(prob, b)\n\nSet the solution sol as the transform of b and update all variables.\n\n\n\n\n\n","category":"function"},{"location":"modules/surfaceqg/#Diagnostics","page":"SurfaceQG","title":"Diagnostics","text":"","category":"section"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"GeophysicalFlows.SurfaceQG.kinetic_energy\nGeophysicalFlows.SurfaceQG.buoyancy_variance","category":"page"},{"location":"modules/surfaceqg/#GeophysicalFlows.SurfaceQG.kinetic_energy","page":"SurfaceQG","title":"GeophysicalFlows.SurfaceQG.kinetic_energy","text":"kinetic_energy(prob)\n\nReturn the domain-averaged surface kinetic energy. Since u² + v² = bf  ψ², we get\n\nint frac12 bf  ψ² frac𝖽x 𝖽yL_x L_y = sum_𝐤 frac12 𝐤² ψ² \n\nIn SQG, this is identical to half the domain-averaged surface buoyancy variance.\n\n\n\n\n\n","category":"function"},{"location":"modules/surfaceqg/#GeophysicalFlows.SurfaceQG.buoyancy_variance","page":"SurfaceQG","title":"GeophysicalFlows.SurfaceQG.buoyancy_variance","text":"buoyancy_variance(prob)\n\nReturn the buoyancy variance,\n\nint b² frac𝖽x 𝖽yL_x L_y = sum_𝐤 b² \n\nIn SQG, this is identical to the velocity variance (i.e., twice the domain-averaged kinetic  energy).\n\n\n\n\n\n","category":"function"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"Other diagnostic include: buoyancy_dissipation and buoyancy_work.","category":"page"},{"location":"modules/surfaceqg/#Examples","page":"SurfaceQG","title":"Examples","text":"","category":"section"},{"location":"modules/surfaceqg/","page":"SurfaceQG","title":"SurfaceQG","text":"examples/surfaceqg_decaying.jl: A script that simulates decaying surface quasi-geostrophic flow with a prescribed initial buoyancy field, producing an animation of the evolution of the surface buoyancy.\nCapet, X. et al., (2008). Surface kinetic energy transfer in surface quasi-geostrophic flows. J. Fluid Mech., 604, 165-174.","category":"page"},{"location":"contributing/#Contributors-Guide","page":"Contributor's guide","title":"Contributors Guide","text":"","category":"section"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"This is a short guide for potential GeophysicalFlows.jl contributors.","category":"page"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"Please feel free to ask us questions and chat, either by raising an issue or starting a discussion.","category":"page"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"We follow the ColPrac guide for collaborative practices.  New contributors should make sure to read that guide.","category":"page"},{"location":"contributing/#What-can-I-do?","page":"Contributor's guide","title":"What can I do?","text":"","category":"section"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"Tackle an existing issue.\nTry to run your favorite GeophysicalFlows.jl module and play around with it to simulate  your favorite setup. If you run into any problems or find it difficult to use, modify, or  understand, please open an issue!\nWrite up an example or tutorial on how to do something useful with one of the current modules in GeophysicalFlows.jl, like how to set up a new physical configuration.\nImprove documentation, docstrings, or comments if you found something is hard to use.\nImplement a new feature (e.g., a new diagnostic into a module).\nImplement a new module from scratch to solve your favorite partial differential equation with periodic boundary conditions.","category":"page"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"If you're interested in working on something, let us know by commenting on an existing issue  or by opening a new issue. This is to make sure no one else is working on the same issue and  so we can help and guide you in case there is anything you need to know beforehand.","category":"page"},{"location":"contributing/#Ground-Rules","page":"Contributor's guide","title":"Ground Rules","text":"","category":"section"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"Each pull request should consist of a logical collection of changes. You can include multiple bug fixes in a single pull request, but they should be related. For unrelated changes, please submit multiple pull requests.\nDo not commit changes to files that are irrelevant to your feature or bugfix (e.g., .gitignore).\nBe willing to accept criticism and work on improving your code; we don't want to break other users' code, so care must be taken not to introduce bugs. We discuss pull requests and keep working on them until we believe we've done a good job.\nBe aware that the pull request review process is not immediate, and is generally proportional to the size of the pull request.","category":"page"},{"location":"contributing/#Reporting-a-bug","page":"Contributor's guide","title":"Reporting a bug","text":"","category":"section"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"The easiest way to get involved is to report issues you encounter when using GeophysicalFlows.jl  or by requesting something you think is missing.","category":"page"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"Head over to the issues page.\nSearch to see if your issue already exists or has even been solved previously.\nIf you indeed have a new issue or request, click the \"New Issue\" button.\nPlease be as specific as possible. Include the version of the code you were using, as well as what operating system you are running. The output of Julia's versioninfo() and ] status is helpful to include. If possible, include complete, minimal example code that reproduces the problem.","category":"page"},{"location":"contributing/#Setting-up-your-development-environment","page":"Contributor's guide","title":"Setting up your development environment","text":"","category":"section"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"Install Julia on your system.\nInstall git on your system if it is not already there (install XCode command line tools on a Mac or git bash on Windows).\nLogin to your GitHub account and make a fork of the GeophysicalFlows.jl repository by clicking the \"Fork\" button.\nClone your fork of the GeophysicalFlows.jl repository (in terminal on Mac/Linux or git shell/ GUI on Windows) in the location you'd like to keep it.\ngit clone https://github.com/your-user-name/GeophysicalFlows.jl.git\nNavigate to that folder in the terminal or in Anaconda Prompt if you're on Windows.\nConnect your repository to the upstream (main project).\ngit remote add geophysicalflows https://github.com/FourierFlows/GeophysicalFlows.jl.git\nCreate the development environment by opening Julia via julia --project then typing in ] instantiate. This will install all the dependencies in the Project.toml file.\nYou can test to make sure GeophysicalFlows.jl works by typing in ] test which will run all the tests (this can take a while). In an ideal world you should run the tests on a machine with a GPU capability but if that's not a possibility that is available to you then don't  worry – simply comment in a PR that you didn't test on GPU.","category":"page"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"Your development environment is now ready!","category":"page"},{"location":"contributing/#Pull-Requests","page":"Contributor's guide","title":"Pull Requests","text":"","category":"section"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"Changes and contributions should be made via GitHub pull requests against the main branch.","category":"page"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"When you're done making changes, commit the changes you made. Chris Beams has written  a guide on how to write good commit messages.","category":"page"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"When you think your changes are ready to be merged into the main repository, push to your fork and submit a pull request.","category":"page"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"Working on your first Pull Request? You can learn how from this free video series How to Contribute to an Open Source Project on GitHub, Aaron Meurer's tutorial on the git workflow,  or the guide “How to Contribute to Open Source\".","category":"page"},{"location":"contributing/#Documentation","page":"Contributor's guide","title":"Documentation","text":"","category":"section"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"All PRs that introduce new features or new modules should be accompanied with appropriate  docstrings and documentation. Writing documentation strings is really important to make sure  others use your functionality properly. Didn't write new functions? That's fine, but be sure  that the documentation for the code you touched is still in great shape. It is not uncommon  to find some strange wording or clarification that you can take care of while you are here.","category":"page"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"We encourage using unicode characters  when writing docstrings, e.g., use α instead of \\alpha. This makes the rendering of the  docstrings in the Documentation and in the Julia REPL's help?> mode as similar as possible.","category":"page"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"You can preview how the Documentation will look like after merging by building the documentation  locally. To do that, from the main directory of your local repository call","category":"page"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'\njulia --project=docs/ docs/make.jl","category":"page"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"and then open docs/build/index.html in your favorite browser.","category":"page"},{"location":"contributing/#Credits","page":"Contributor's guide","title":"Credits","text":"","category":"section"},{"location":"contributing/","page":"Contributor's guide","title":"Contributor's guide","text":"This contributor's guide is heavily based on the MetPy contributor's guide  and on its \"cover\" made by Oceananigans.jl.","category":"page"},{"location":"aliasing/#Aliasing","page":"Aliasing","title":"Aliasing","text":"","category":"section"},{"location":"aliasing/","page":"Aliasing","title":"Aliasing","text":"In pseudospectral methods, computing nonlinear terms results in aliasing errors. (Read more about aliasing errors in the FourierFlows.jl Documentation.) To avoid aliasing errors, we need to apply some dealiasing to our fields  in Fourier space before transforming to physical space to compute nonlinear terms.","category":"page"},{"location":"aliasing/","page":"Aliasing","title":"Aliasing","text":"info: De-aliasing scheme\nFourierFlows.jl curently implements dealiasing by zeroing out the highest-aliased_fraction  wavenumber components on a grid. By default in FourierFlows.jl, aliased_fraction=1/3. Users can construct a grid with different aliased_fraction viajulia> grid = OneDGrid(64, 2π, aliased_fraction=1/2)\n\njulia> OneDimensionalGrid\n         ├─────────── Device: CPU\n         ├──────── FloatType: Float64\n         ├────────── size Lx: 6.283185307179586\n         ├──── resolution nx: 64\n         ├── grid spacing dx: 0.09817477042468103\n         ├─────────── domain: x ∈ [-3.141592653589793, 3.0434178831651124]\n         └─ aliased fraction: 0.5or provide the keyword argument aliased_fraction to the Problem() constructor of each module, e.g.,julia> prob = GeophysicalFlows.TwoDNavierStokes.Problem(; aliased_fraction=1/2)\nProblem\n  ├─────────── grid: grid (on CPU)\n  ├───── parameters: params\n  ├────── variables: vars\n  ├─── state vector: sol\n  ├─────── equation: eqn\n  ├────────── clock: clock\n  └──── timestepper: RK4TimeStepper\n  \njulia> prob.grid.aliased_fraction\n0.5","category":"page"},{"location":"aliasing/","page":"Aliasing","title":"Aliasing","text":"Currently, all nonlinearities in all modules included in GeophysicalFlows.jl modules are quadratic  nonlinearities. Therefore, the default aliased_fraction of 1/3 is appropriate.","category":"page"},{"location":"aliasing/","page":"Aliasing","title":"Aliasing","text":"All modules apply de-aliasing by calling, e.g., dealias!(prob.sol, prob.grid) both before computing any nonlinear terms and also during updating all variable, i.e., within updatevars!.","category":"page"},{"location":"aliasing/","page":"Aliasing","title":"Aliasing","text":"To disable de-aliasing you need to create a problem with a grid that has been constructed with  the keyword aliased_fraction=0.","category":"page"},{"location":"installation_instructions/#Installation-instructions","page":"Installation instructions","title":"Installation instructions","text":"","category":"section"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"You can install the latest version of GeophysicalFlows.jl via the built-in package manager  (accessed by pressing ] in the Julia REPL command prompt) to add the package and also to  instantiate/build all the required dependencies","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"julia>]\n(v1.5) pkg> add GeophysicalFlows\n(v1.5) pkg> instantiate","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"We recommend installing GeophysicalFlows.jl with the built-in Julia package manager, because  this installs a stable, tagged release. Later on, you can update GeophysicalFlows.jl to the  latest tagged release again via the package manager by typing","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"(v1.5) pkg> update GeophysicalFlows","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"Note that some releases might induce breaking changes to certain modules. If after anything  happens or your code stops working, please open an issue  or start a discussion. We're  more than happy to help with getting your simulations up and running.","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"warn: Use Julia 1.5 or newer\nThe latest GeophysicalFlows.jl requires at least Julia v1.5 to run. Installing GeophysicalFlows with an older version of Julia will install an older version  of GeophysicalFlows.jl (the latest version compatible with your version of Julia).Last version compatible with Julia v1.0.5 (the current long-term-release): GeophysicalFlows.jl v0.5.1","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/barotropicqgql_betaforced.jl\"","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Quasi-Linear-forced-dissipative-barotropic-QG-beta-plane-turbulence","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"This example can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"A simulation of forced-dissipative barotropic quasi-geostrophic turbulence on a beta plane under the quasi-linear approximation. The dynamics include linear drag and stochastic excitation.","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Install-dependencies","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Install dependencies","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"using Pkg\npkg\"add GeophysicalFlows, Random, Statistics, Printf, Plots\"","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Let's-begin","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Let's begin","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"Let's load GeophysicalFlows.jl and some other needed packages.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"using GeophysicalFlows, Random, Printf, Plots\nusing Statistics: mean\nparsevalsum = FourierFlows.parsevalsum","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Choosing-a-device:-CPU-or-GPU","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Numerical-parameters-and-time-stepping-parameters","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"      n = 128            # 2D resolution = n^2\nstepper = \"FilteredRK4\"  # timestepper\n     dt = 0.05           # timestep\n nsteps = 8000           # total number of time-steps\n nsubs  = 10             # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Physical-parameters","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Physical parameters","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"L = 2π        # domain size\nβ = 10.0      # planetary PV gradient\nμ = 0.01      # bottom drag\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Forcing","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Forcing","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We force the vorticity equation with stochastic excitation that is delta-correlated in time and while spatially homogeneously and isotropically correlated. The forcing has a spectrum with power in a ring in wavenumber space of radius k_f (forcing_wavenumber) and width δ_f (forcing_bandwidth), and it injects energy per unit area and per unit time equal to varepsilon. That is, the forcing covariance spectrum is proportional to exp-(bmk - k_f)^2  (2 δ_f^2).","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"forcing_wavenumber = 14.0 * 2π/L  # the forcing wavenumber, `k_f`, for a spectrum that is a ring in wavenumber space\nforcing_bandwidth  = 1.5  * 2π/L  # the width of the forcing spectrum, `δ_f`\nε = 0.001                         # energy input rate by the forcing\n\ngrid = TwoDGrid(dev, n, L)\n\nK = @. sqrt(grid.Krsq)            # a 2D array with the total wavenumber\n\nforcing_spectrum = @. exp(-(K - forcing_wavenumber)^2 / (2 * forcing_bandwidth^2))\n@CUDA.allowscalar forcing_spectrum[grid.Krsq .== 0] .= 0 # ensure forcing has zero domain-average\n\nε0 = parsevalsum(forcing_spectrum .* grid.invKrsq / 2, grid) / (grid.Lx * grid.Ly)\n@. forcing_spectrum *= ε/ε0       # normalize forcing to inject energy at rate ε\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We reset of the random number generator for reproducibility","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"if dev==CPU(); Random.seed!(1234); else; CUDA.seed!(1234); end\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"Next we construct function calcF! that computes a forcing realization every timestep. First we make sure that if dev=GPU(), then CUDA.rand() function is called for random numbers uniformly distributed between 0 and 1.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"random_uniform = dev==CPU() ? rand : CUDA.rand\n\nfunction calcF!(Fh, sol, t, clock, vars, params, grid)\n  Fh .= sqrt.(forcing_spectrum) .* exp.(2π * im * random_uniform(eltype(grid), size(sol))) ./ sqrt(clock.dt)\n\n  return nothing\nend\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Problem-setup","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Problem setup","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We initialize a Problem by providing a set of keyword arguments. Not providing a viscosity coefficient ν leads to the module's default value: ν=0. In this example numerical instability due to accumulation of enstrophy in high wavenumbers is taken care with the FilteredTimestepper we picked. Thus, we choose not to do any dealiasing by providing aliased_fraction=0.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"prob = BarotropicQGQL.Problem(dev; nx=n, Lx=L, β=β, μ=μ, dt=dt, stepper=stepper,\n                              calcF=calcF!, stochastic=true, aliased_fraction=0)\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"and define some shortcuts.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"sol, clock, vars, params, grid = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx, y = grid.x, grid.y\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"First let's see how a forcing realization looks like. Note that when plotting, we decorate the variable to be plotted with Array() to make sure it is brought back on the CPU when vars live on the GPU.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"calcF!(vars.Fh, sol, 0.0, clock, vars, params, grid)\n\nheatmap(x, y, Array(irfft(vars.Fh, grid.nx)'),\n     aspectratio = 1,\n               c = :balance,\n            clim = (-8, 8),\n           xlims = (-grid.Lx/2, grid.Lx/2),\n           ylims = (-grid.Ly/2, grid.Ly/2),\n          xticks = -3:3,\n          yticks = -3:3,\n          xlabel = \"x\",\n          ylabel = \"y\",\n           title = \"a forcing realization\",\n      framestyle = :box)","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Setting-initial-conditions","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Setting initial conditions","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"Our initial condition is simply fluid at rest.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"BarotropicQGQL.set_zeta!(prob, ArrayType(dev)(zeros(grid.nx, grid.ny)))\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Diagnostics","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Diagnostics","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"Create Diagnostics – energy and enstrophy are functions imported at the top.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"E = Diagnostic(BarotropicQGQL.energy, prob; nsteps=nsteps)\nZ = Diagnostic(BarotropicQGQL.enstrophy, prob; nsteps=nsteps)\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We can also define our custom diagnostics via functions.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"function zetaMean(prob)\n  sol = prob.sol\n  sol[1, :]\nend\n\nzMean = Diagnostic(zetaMean, prob; nsteps=nsteps, freq=10)  # the zonal-mean vorticity\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We combile all diags in a list.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"diags = [E, Z, zMean] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Output","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Output","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"filepath = \".\"\nplotpath = \"./plots_forcedbetaQLturb\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"forcedbetaQLturb.jld2\")\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"Do some basic file management,","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"and then create Output.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nget_u(prob) = irfft(im * g.l .* g.invKrsq .* sol, g.nx)\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Visualizing-the-simulation","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Visualizing the simulation","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We define a function that plots the vorticity and streamfunction fields, the corresponding zonal-mean vorticity and zonal-mean zonal velocity and timeseries of energy and enstrophy.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"function plot_output(prob)\n  ζ̄, ζ′= prob.vars.Zeta, prob.vars.zeta\n  ζ = @. ζ̄ + ζ′\n  ψ̄, ψ′= prob.vars.Psi,  prob.vars.psi\n  ψ = @. ψ̄ + ψ′\n  ζ̄ₘ = mean(ζ̄, dims=1)'\n  ūₘ = mean(prob.vars.U, dims=1)'\n\n  pζ = heatmap(x, y, Array(ζ'),\n       aspectratio = 1,\n            legend = false,\n                 c = :balance,\n              clim = (-8, 8),\n             xlims = (-grid.Lx/2, grid.Lx/2),\n             ylims = (-grid.Ly/2, grid.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"vorticity ζ=∂v/∂x-∂u/∂y\",\n        framestyle = :box)\n\n  pψ = contourf(x, y, Array(ψ'),\n            levels = -0.32:0.04:0.32,\n       aspectratio = 1,\n         linewidth = 1,\n            legend = false,\n              clim = (-0.22, 0.22),\n                 c = :viridis,\n             xlims = (-grid.Lx/2, grid.Lx/2),\n             ylims = (-grid.Ly/2, grid.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"streamfunction ψ\",\n        framestyle = :box)\n\n  pζm = plot(Array(ζ̄ₘ), y,\n            legend = false,\n         linewidth = 2,\n             alpha = 0.7,\n            yticks = -3:3,\n             xlims = (-3, 3),\n            xlabel = \"zonal mean ζ\",\n            ylabel = \"y\")\n  plot!(pζm, 0*y, y, linestyle=:dash, linecolor=:black)\n\n  pum = plot(Array(ūₘ), y,\n            legend = false,\n         linewidth = 2,\n             alpha = 0.7,\n            yticks = -3:3,\n             xlims = (-0.5, 0.5),\n            xlabel = \"zonal mean u\",\n            ylabel = \"y\")\n  plot!(pum, 0*y, y, linestyle=:dash, linecolor=:black)\n\n  pE = plot(1,\n             label = \"energy\",\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 4.1),\n             ylims = (0, 0.05),\n            xlabel = \"μt\")\n\n  pZ = plot(1,\n             label = \"enstrophy\",\n         linecolor = :red,\n            legend = :bottomright,\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 4.1),\n             ylims = (0, 5),\n            xlabel = \"μt\")\n\n  l = @layout Plots.grid(2, 3)\n  p = plot(pζ, pζm, pE, pψ, pum, pZ, layout=l, size = (1000, 600))\n\n  return p\nend\nnothing # hide","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Time-stepping-the-Problem-forward","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We time-step the Problem forward in time.","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"p = plot_output(prob)\n\nstartwalltime = time()\n\nanim = @animate for j = 0:round(Int, nsteps / nsubs)\n  if j % (1000 / nsubs) == 0\n    cfl = clock.dt * maximum([maximum(vars.u .+ vars.U) / grid.dx, maximum(vars.v) / grid.dy])\n\n    log = @sprintf(\"step: %04d, t: %d, cfl: %.2f, E: %.4f, Q: %.4f, walltime: %.2f min\",\n      clock.step, clock.t, cfl, E.data[E.i], Z.data[Z.i],\n      (time()-startwalltime)/60)\n\n    println(log)\n  end\n\n  p[1][1][:z] = Array(@. vars.zeta + vars.Zeta)\n  p[1][:title] = \"vorticity, μt=\" * @sprintf(\"%.2f\", μ * clock.t)\n  p[4][1][:z] = Array(@. vars.psi + vars.Psi)\n  p[2][1][:x] = Array(mean(vars.Zeta, dims=1)')\n  p[5][1][:x] = Array(mean(vars.U, dims=1)')\n  push!(p[3][1], μ * E.t[E.i], E.data[E.i])\n  push!(p[6][1], μ * Z.t[Z.i], Z.data[Z.i])\n\n  stepforward!(prob, diags, nsubs)\n  BarotropicQGQL.updatevars!(prob)\nend\n\nmp4(anim, \"barotropicqgql_betaforced.mp4\", fps=18)","category":"page"},{"location":"literated/barotropicqgql_betaforced/#Save","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Save","text":"","category":"section"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"Finally, we can save, e.g., the last snapshot via","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), clock.step)\nsavefig(savename)","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"","category":"page"},{"location":"literated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"stochastic_forcing/#Stochastic-Forcing","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"","category":"section"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Forcing terms are implemented in various modules. Forcing can be either deterministic or  stochastic (random). For deterministic forcing the implementation is straightforward; for  stochastic forcing there are two main train of thoughts: Itô calculus and Stratonovich calculus.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Both stochastic calculi give the same results. But once we decide to use one of the two calculi  we have to remain consistent and use that calculus throughout. There can be a lot of confusion  and oftentimes confusion stems from mixing the two different stochastic calculi in a single  computation instead of using one of the two consistently all along.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"note: Itô or Stratonovich in GeophysicalFlows.jl?\nAll modules included in GeophysicalFlows.jl use Stratonovich calculus.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"The choice of Stratonovich calculus for GeophysicalFlows.jl was made since this calculus \"works  the same\" with both stochastic and deterministic forcing, i.e. with Stratonovich calculus we  have the same chain rules for differentiation for stochastic functions as the chain rules we  learn in normal-deterministic calculus). Therefore, with the Stratonovich calculus the code  does not really \"care\" whether the user implement deterministic or stochastic forcing.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"If you are interested in learning more regarding the two stochastic calculi and  how they are  numerically implemented then read on; otherwise you can skip this section of the documentation.","category":"page"},{"location":"stochastic_forcing/#Stochastic-Differential-Equations-(SDEs)","page":"Stochastic Forcing","title":"Stochastic Differential Equations (SDEs)","text":"","category":"section"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"A differential equation:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"\tfracmathrmd xmathrmd t = f(x)  quad x(t_0) = 0","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"can also be equivalently written in an integral form:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"\tx(t) = int_t_0^t f(x(s))  mathrmd s","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"In a similar manner, a stochastic differential equation (SDE),","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"\tmathrmd x = f(x)  mathrmd t + g(x)  mathrmd W_t  quad x(t_0) = 0 ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"with W_t a Brownian motion or Wiener process, can be written in an integral form as:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"\tx(t) = int_t_0^t f(x(s))  mathrmd s + int_t_0^t g(x(s))  mathrmd W_s ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"tip: Wiener process\nA Wiener process is a random variable W_t that depends continuously on t ge 0 and satisfies the following properties:Independence. For 0 le s le t the increment W_t - W_s is independent of any prior values, i.e., independent of all W_tau, tau le s.\nStationarity. The statistical distribution of the increment W_t+s  W_s does not depend on  s (and so is identical in distribution to W_t).\nGaussianity. W_t is a Gaussian process with mean langle W_t rangle = 0 and covariance langle W_t W_s rangle = min(t s).","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"!!! tip Notation, e.g., x_t     It's common to use notation x_t to denote explicit t-dependence of variable x. Not to be confused with the other common usage of subscripts for denoting partial differentiation.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"The last integral in the integral representation of a SDE expression above is a stochastic integral  (it involves a stochastic differential, mathrmd W_t). There is not a single straight-forward  way for computing the value of a stochastic integral. The various ways we can approximate the  value of a stochastic integral as a Riemannian sum each lead to a different answer. The two most  popular ways for computing such stochastic integrals are:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"beginaligned\ncolorGreen textItô  colorGreenint_t_0^t g(x(s))  mathrmd W_s approx sum_j g left ( x(t_j) right )(W_j+1 - W_j)  \ncolorMagenta textStratonovich  colorMagenta int_t_0^t g(x(s))  mathrmd W_s approx sum_j g left (x left (tfrac12(t_j + t_j+1) right ) right)(W_j+1 - W_j) \nendaligned","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"The difference in the two calculi above lies in the point at which we choose to evaluate g(x): we take the start of the time-interval for colorGreen textItô  t_j, while we use the mid-point for colorMagentatextStratonovich  tfrac12(t_j+t_j+1). In the case the  stochastic noise is additive, i.e., its prefactor g does not depend on the state x_t, then the two interpretations coincide. When the noise does depend on the state of the system,  i.e., g=g(x(t)), then the two interpretations above give thoroughly different results. This happens because the white noise process is not continuous and, therefore, the two interpretations of the stochastic integrals above do not converge to the same result.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"To overcome this apparent inconsistency, the two choices above come together with different  chain rules, i.e., chain rules that are not necessarily the same as those in plain old calculus. Let us see how different choices for computing the stochastic integrals bring about the need  for different chain rules.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"An SDE can be written also in differential form. Because we cannot formally form the derivative mathrmd W  mathrmd t, since W is nowhere differentiable, we write an SDE in  differential form as:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"beginaligned\ncolorGreentextItô  colorGreenmathrmd x_t = f(x_t) mathrmd t + g(x_t) mathrmd W_t  \ncolorMagentatextStratonovich  colorMagentamathrmd x_t = f(x_t) mathrmd t + g(x_t) circ mathrmd W_t \nendaligned","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"The circle in the term colorMagentag(x_t) circ mathrmd W_t is used to differentiate  between Itô and Stratonovich calculus.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Let's now assume we perform a variable change y = G(x). It turns out that according to  which interpretation of the stochastic integral one chooses to use, then the following chain  rule must be used:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"beginaligned\ncolorGreentextItô  colorGreenmathrmd y_t = fracmathrmd Gmathrmd x mathrmd x_t + frac12 g(x_t)^2 fracmathrmd^2 Gmathrmd x^2 mathrmd t = left fracmathrmd Gmathrmd x f(x_t) + frac12 g(x_t)^2 fracmathrmd^2 Gmathrmd x^2 right mathrmd t + fracmathrmd Gmathrmd x g(x_t) mathrmd W_t  \ncolorMagentatextStratonovich  colorMagentamathrmd y_t  = fracmathrmd Gmathrmd x mathrmd x_t = fracmathrmd Gmathrmd x f(x_t) mathrmd t + fracmathrmd Gmathrmd x g(x_t) circ mathrmd W_t \nendaligned","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"The above are the so-called stochastic chain rules. All derivatives of G are evaluated  at x_t. For Stratonovich calculus, the chain rule resembles the usual chain rule one learns in calculus; for Itô there exists an additional term, often referred to as the \"drift-term\":  colorGreentfrac12 g^2  mathrmd^2G  mathrmd x^2.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"It's easy to see that the extra drift-term in Itô's interpretation of the stochastic integral,  is exactly equal to the ensemble mean  over forcing realizations of the Stratonovich  stochastic integral. That's because the Itô stochastic integral has, by construction, zero  ensemble mean since at every instant the noise is multiplied with g which is  evaluated  at a time instance before the action of the noise; g and mathrmd W are uncorrelated  and thus:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"colorGreen left langle g(x_t) mathrmd W_t right rangle = 0 quad textwhile quad colorMagenta left langle g(x_t) circ mathrmd W_t right rangle ne 0 ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"The above is demonstrated by evaluating the simple stochastic integral:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"beginaligned\ncolorGreen textItô  colorGreen left langle int_t_0^t W_s  mathrmd W_s right rangle approx sum_j left langle W_j (W_j+1 - W_j) right rangle \n hspace73em colorGreen = sum_j left langle W_j W_j+1 right rangle - left langle W_j W_j right rangle sim sum_j t_j - t_j = 0  \ncolorMagentatextStratonovich  colorMagentaleft langle int_t_0^t W_s circ mathrmd W_s right rangle approx sum_j left langle frac12(W_j + W_j+1) (W_j+1 - W_j)right rangle \n hspace73em colorMagenta = frac12 sum_j left langle W_j+1 W_j+1 right rangle - left langle W_j W_j right rangle  sim frac12 sum_j t_j+1 - t_j = fract2 \nendaligned","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"SDEs rarely can be solved in closed form; most often numerical solution of SDEs is brought to  the rescue. Itô calculus has the advantage that is very easily implemented numerically. On  the other hand, the chain rule in Stratonovich calculus coincides with that in normal calculus.  This stems from the fact that in the Stratonovich interpretation the white noise process is as  a series of colored noise processes with the de-correlation time tending to zero. This made  Stratonovich calculus more popular in the physics community. A nice discussion on the differences  and similarities between the two calculi is given by van Kampen.","category":"page"},{"location":"stochastic_forcing/#A-simple-Stochastic-Differential-Equation:-the-Ornstein–Uhlenbeck-process","page":"Stochastic Forcing","title":"A simple Stochastic Differential Equation: the Ornstein–Uhlenbeck process","text":"","category":"section"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"One of the simplest SDEs is the Ornstein–Uhlenbeck process, a variation of which is:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"x(t) = - int_t_0^t mu x(s)  mathrmd s + int_t_0^t sqrtsigma  mathrmd W_s  tag1","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Note that in differential form (1) is written as:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"mathrmd x_t = - mu x_t  mathrmd t + sqrtsigma  mathrmd W_t  tag2","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Luckily, for (2) we don't need to distinguish between Itô and Stratonovich, since g is  independent of x(t). But note that oftentimes this is not the case; that g is independent  of x(t) is only a fortuitous coincident for this particular SDE.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"How do we time-step SDE (2) numerically? Let us assume a discretization of time into time-steps of duration tau, i.e., t_j = (j-1) tau, j=1 2 dots. (What follows is easily  generalized to non-uniform time discretizations.) With that in mind, we denote x_j equiv x(t_j).  Then the Euler–Mayorama time-stepping scheme for (2) is","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"\tx_j+1 = x_j + (-mu x_j) tau + sqrtsigma (W_j+1 - W_j) ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Now let us ask the following question: How can we compute the work done by the noise? In other words, if we are interested in the evolution of the \"energy\", defined as E equiv tfrac12 x^2, then how does the noise term attribute in the growth of E?  To answer that we first have to find the SDE that energy E obeys. But, in doing so, it  is important to adopt a single interpretation for computing stochastic integrals as now a  transformation of variables is needed. That is, depending on whether we choose to interpret  the stochastic integrals according to Itô or to Stratonovich calculus, E evolves according to:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"hspace335em colorGreen textItô  colorGreen mathrmd E_t = left ( -2 mu E_t + tfrac12 sigma right ) mathrmd t + x_t sqrtsigma mathrmd W_t  tag3","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"hspace-335em colorMagenta textStratonovich  colorMagenta mathrmd E_t = -2 mu E_t mathrmd t + x_t circ sqrtsigma mathrmd W_t  tag4","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"The term -2 mu E_t in both cases is the dissipation of energy by the mu term; the  rest of the terms involve the noise. How do we compute the work P done by the noise?  Well, it follows that:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"beginaligned\ncolorGreen textItô  colorGreen P_t = tfrac12 sigma mathrmd t + sqrtsigma x_t mathrmd W_t approx tfrac12 sigma  mathrmdt + sqrtsigma x_j (W_j+1 - W_j)  \ncolorMagenta textStratonovich  colorMagenta P_t =  x_t circ sqrtsigma mathrmd W_t approx sqrtsigma x left ( tfrac12 (t_j + t_j+1) right ) (W_j+1 - W_j) \nendaligned","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Now let's assume for a moment that we didn't know the rules for transforming Stratonovich to  Itô and we were wondering what is the extra drift term we have to include in the Itô formulations,  i.e., the tfrac12 sigma term. We can compute the Itô's drift-term using the fact that  it is exactly equal to langle x_t circ sqrtsigma mathrmd W_t rangle; and for the  latter we can use the \"usual\" calculus. That is, we rewrite (1) as:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"dotx = -mu x + xi  tag5","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"where xi(t) is understood to be the \"continuous\" version of the white-noise process (which  is formally only understood in terms of distributions). The forcing xi has the properties:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"left langle xi(t) right rangle = 0 quad textand quad left langle xi(t) xi(t) right rangle = sigma delta(t - t) ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Thus we need to compute langle P_t rangle = langle x(t) xi(t) rangle. But (5) formally has the solution:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"x(t) = e^-mu t x(0) + int_0^t e^-mu (t - s) xi(s)  mathrmd s ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"and using this solution we get","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"langle P_t rangle = langle x(t) xi(t) rangle =  e^-mu t underbracelangle x(0) xi(t) rangle_=0 + int_0^t e^-mu (t - s) langle xi(t) xi(s) rangle  mathrmd s = sigma int_0^t e^- mu (t - s) delta(t - s)  mathrmd s = fracsigma2 ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Above we used that int_0^t delta(t - s) mathrmd s = tfrac12, which is consistent  with the Stratonovich symmetric interpretation of stochastic integrals.","category":"page"},{"location":"stochastic_forcing/#Numerical-implementation","page":"Stochastic Forcing","title":"Numerical implementation","text":"","category":"section"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"How do we time-step the equation for E? In the case of Itô's interpretation, (3), we use  the Euler–Maruyama time-stepping scheme:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"\tE_j+1 = E_j + left ( -2 mu E_j + fracsigma2 right ) tau + sqrtsigma x_j (W_j+1 - W_j)","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"However, we cannot use Euler–Maruyama for time-stepping the corresponding Stratonovich  version of (4), since the Euler–Maruyama scheme involves \"Itô\"-thinking. To time-step (4) we  have to approximate g in the middle of the time-step. There are many ways to do that, one  of which is the, so called, Euler–Heun method:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"beginaligned\nwidetildeE_j+1 = E_j + (- 2mu E_j) tau + sqrtsigma x_j (W_j+1 - W_j) \nE_j+1 = E_j + left( -2 mu fracE_j + widetildeE_j + 12 right)tau + sqrtsigmafracx_j + x_j+12 (W_j+1 - W_j) \nendaligned","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Let's apply not Euler–Maruyama and Euler–Heun schemes to time-step (3) and (4) respectively and compare the results with those obtained from time-stepping (2) and computing E a  posteriori. ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Figure below compares the energy evolution as predicted by:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"direct computation from the x_t time-series: tfrac12 x_t^2,\ntime-integration of (3) using Euler–Maruyama, and\ntime-integration of (4) using Euler–Heun.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"using Plots\nPlots.default(lw=2)","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"using Plots\nusing Statistics: mean\nusing Random: randn, seed!\nseed!(1234) # for reproducing the same plots\n\n                μ = 0.2\n                σ = 0.2    # noise strength\n               dt = 0.01   # timestep\n           nsteps = 2001   # total timesteps\n   n_realizations = 1000   # how many forcing realizations\nsome_realizations = 20     # used for plotting to illustrate convergence\n\nt = 0:dt:(nsteps-1)*dt \t# time\n\nΔW = randn(nsteps, n_realizations) * sqrt(dt) # noise\n\n# Numerical calculation\nx = zeros(size(ΔW))\nE_ito = zeros(size(ΔW))\nE_str = zeros(size(ΔW))\nE_numerical = zeros(size(ΔW))\n\nfor j = 2:nsteps # time step the equations\n\t\n  # time-step dx = - μ x dt + √σ dW\n  @. x[j, :] = x[j-1, :] - μ * x[j-1, :] * dt + sqrt(σ) * ΔW[j-1, :]\n\n  # time-step dE = (- 2μ E + ½σ) dt + √σ x dW\n  @. E_ito[j, :] = E_ito[j-1, :] + (-2μ * E_ito[j-1, :]\n\t                   + σ/2) * dt + sqrt(σ) * x[j-1, :] * ΔW[j-1, :]\n\n  # time-step dE = - 2μ E dt + √σ x ∘ dW\n  xbar = @. x[j-1, :] - μ * x[j-1, :] * dt + sqrt(σ) * ΔW[j-1, :]\n  Ebar = @. E_str[j-1, :] + (-2μ * E_str[j-1, :]) * dt + sqrt(σ) * x[j-1, :] * ΔW[j-1, :]\n  @. E_str[j, :] = E_str[j-1, :] + (-2μ * (E_str[j-1, :]\n\t\t+ Ebar) / 2) * dt + sqrt(σ) * (x[j-1, :] + xbar) / 2 * ΔW[j-1, :]\nend\n\n# direct computation of E from x\n@. E_numerical = 0.5 * x^2\n\n# compare the three E(t) solutions\nplot(μ * t, [E_numerical[:, 1] E_ito[:, 1] E_str[:, 1]],\n          linewidth = [3 2 1],\n              label = [\"½ xₜ²\" \"Eₜ (Ito)\" \"Eₜ (Stratonovich)\"],\n          linestyle = [:solid :dash :dashdot],\n             xlabel = \"μ t\",\n             ylabel = \"E\",\n             legend = :topleft,\n              title = \"comparison of E(t) for single realization\")\n\nsavefig(\"assets/energy_comparison.svg\"); nothing # hide","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"(Image: energy_comparison)","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Now we can further compute the \"energy\" budgets, i.e., the work done by the noise versus the energy loss by the μ term, using Itô and Stratonovich formalisms. Figures below show  the ensemble mean energy budgets (using 1000 ensemble members) as computed using Itô and Stratonovich calculus. For the energy budget to close we have to be consistent: if we time-step  the  energy equation based on Stratonovich calculus then we must compute the work also according  to Stratonovich and vice versa.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"# theoretical results for ⟨E⟩ and d⟨E⟩/dt\n   E_theory = @. σ/4μ * (1 - exp(-2μ * t))\ndEdt_theory = @. σ/2  * exp(-2μ * t)\n\n# compute d⟨E⟩/dt numerically\ndEdt_ito = mean(E_ito[2:nsteps, :] .- E_ito[1:nsteps-1, :], dims=2) / dt\n\n# compute the work and dissipation\nwork_ito = mean(sqrt(σ) * ΔW[1:nsteps-1, :] / dt .* x[1:nsteps-1, :] .+ σ/2, dims=2)\ndiss_ito = 2*μ * (mean(E_ito[1:nsteps-1, :], dims=2))\n\n# Ensemble mean energy budgets from the Itô integration\n\nplot_E = plot(μ * t, [E_theory mean(E_ito[:, 1:some_realizations], dims=2) mean(E_ito, dims=2)],\n                linewidth = [3 2],\n\t                  label = [\"theoretical ⟨E⟩\" \"⟨E⟩ from $some_realizations ensemble members\" \"⟨E⟩ from $n_realizations ensemble members\"],\n\t                 xlabel = \"μ t\",\n\t                 ylabel = \"E\",\n\t                 legend = :bottomright,\n\t                  title = \"Ito: 𝖽Eₜ = (-2μ Eₜ + ½σ) 𝖽t + xₜ √σ 𝖽Wₜ\")\n\nplot_Ebudget = plot(μ * t[1:nsteps-1], [dEdt_ito work_ito.-diss_ito dEdt_theory[1:nsteps-1]],\n                linestyle = [:dash :dashdot :solid],\n                linewidth = [2 1 3],\n                    label = [\"numerical 𝖽⟨E⟩/𝖽t\" \"⟨work - dissipation⟩\" \"theoretical 𝖽⟨E⟩/𝖽t\"],\n                   legend = :topright,\n                   xlabel = \"μ t\")\n\nplot(plot_E, plot_Ebudget, layout=grid(2, 1, heights=[0.65 ,0.35]), size=(600, 525))\n\nsavefig(\"assets/energy_budgets_Ito.svg\"); nothing # hide","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"(Image: energy_budgets_Ito)","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"# compute d⟨E⟩/dt numerically\ndEdt_str = mean(E_str[2:nsteps, :] .- E_str[1:nsteps-1, :], dims=2) / dt\n\n# compute the work and dissipation\nwork_str = mean(sqrt(σ) * ΔW[1:nsteps-1, :] / dt .* (x[1:nsteps-1, :] .+ x[2:nsteps, :])/2, dims=2)\ndiss_str = 2*μ * (mean(E_str[1:nsteps-1, :], dims=2))\n\nplot_E = plot(μ * t, [E_theory mean(E_str[:, 1:some_realizations], dims=2) mean(E_str, dims=2)],\n                linewidth = [3 2],\n                    label = [\"theoretical ⟨E⟩\" \"⟨E⟩ from $some_realizations ensemble members\" \"⟨E⟩ from $n_realizations ensemble members\"],\n                   xlabel = \"μ t\",\n                   ylabel = \"E\",\n                   legend = :bottomright,\n                    title = \"Stratonovich: 𝖽Eₜ = -2μ Eₜ 𝖽t + xₜ ∘ √σ 𝖽Wₜ\")\n\nplot_Ebudget = plot(μ * t[1:nsteps-1], [dEdt_str[1:nsteps-1] work_str[1:nsteps-1].-diss_str[1:nsteps-1] dEdt_theory[1:nsteps-1]],\n                linestyle = [:dash :dashdot :solid],\n                linewidth = [2 1 3],\n                    label = [\"numerical 𝖽⟨E⟩/𝖽t\" \"⟨work - dissipation⟩\" \"theoretical 𝖽⟨E⟩/𝖽t\"],\n                   legend = :bottomleft,\n                   xlabel = \"μ t\")\n\nplot(plot_E, plot_Ebudget, layout=grid(2, 1, heights=[0.65 ,0.35]), size=(600, 525))\n\nsavefig(\"assets/energy_budgets_Stratonovich.svg\"); nothing # hide","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"(Image: energy_budgets_Stratonovich)","category":"page"},{"location":"stochastic_forcing/#A-simple-Stochastic-Partial-Differential-Equation-(SPDE)","page":"Stochastic Forcing","title":"A simple Stochastic Partial Differential Equation (SPDE)","text":"","category":"section"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"We would like now to transfer all the knowledge we got from the previous sections to PDEs.  In particular we'll start by focussing on the simple SPDE:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"partial_t nabla^2 psi(bmx t) =  - mu nabla^2 psi(bmx t) + xi(bmx t)  tag6","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"with periodic boundary conditions in both x and y. SPDE (6) is also equivalently written as:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"mathrmd nabla^2 psi_t(bmx) = - mu nabla^2 psi_t (bmx) mathrmd t + sqrtsigma mathrmd W_t (bmx) ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"The form (6) is the continuous version, similar to (2). In this SPDE, since the forcing is  purely additive, i.e., it does not depend on the state of the system, both Itô and Stratonovich  interpretations coincide.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"The forcing xi obeys:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"langle xi(bmx t) rangle = 0 quad textand quad langle xi(bmx t) xi(bmx t) rangle = Q(bmx - bmx) delta(t - t) ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"that is, the forcing is white in time but spatially correlated; its spatial correlation is  prescribed by the function Q which is, necessarily, homogeneous in all its arguments (see discussion by Constantinou (2015); Appendix A).","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Equation (6) above describes the vorticity evolution of a two-dimensional fluid nabla^2 psi  that is stochastically forced while dissipated by linear drag mu. The energy of the  fluid is:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"E = tfrac12 overlinebmnabla psi^2^x y = -tfrac12 overlinepsi nabla^2 psi^x y ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"where the overbar denotes average over x and y and an integration-by-parts was carried through in the last equality. To obtain the energy equation we multiply (6) with -psi and  average over the whole domain. Thus, the work done by the forcing is given by:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"P = -  overlinepsi  xi^x y ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"but the above is a stochastic integral and it is meaningless without a rule for computing the stochastic integral.","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Numerically, the work done by the forcing at the j-th timestep can be obtained  Stratonovich-wise via:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"beginaligned\nP_j = -  overlinefracpsi(bmx t_j) + psi(bmx t_j+1)2  xi(bmx t_j+1) ^xy \nendaligned","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"or Itô-wise as","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"beginaligned\nP_j = - overline psi(bmx t_j) xi(bmx t_j+1) ^xy + textdrift \nendaligned","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"But how much is the Itô drift term in this case? As in the previous section, the drift is  precisely the ensemble mean of the Stratonovich work, i.e.:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"textrmIto drift= - overlinelangle underbracepsi(bmx t) circ  xi(bmx t)_textrmStratonovich rangle^x y ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"But again, the above can be computed using the \"formal\" solution of (6):","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"psi(bmx t) = e^-mu t psi(bmx 0) + int_0^t e^- mu (t - s) nabla^-2 xi(bmx s)  mathrmd s ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"which implies","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"beginaligned\ntextdrift  = -overlinee^- mu t underbraceleft langle psi(bmx 0) xi(bmx t) right rangle_=0^x y - int_0^t e^- mu (t - s) overlinenabla^-2 left langle xi(bmx s) xi(bmx t) rightrangle^x y  mathrmd s \n = - int_0^t e^-mu(t - s) overlineunderbraceleft  nabla^-2 Q (bmx) right  big_bmx=0_textindependent of x y  delta(t - s)^xy  mathrmd s \n = - frac12 nabla^-2 Q(bmx) big_bmx=0 \n = - frac12 left  nabla^-2 int fracmathrmd^2 bmk(2pi)^2 widehatQ(bmk)  e^i bmk bmcdot bmx right _bmx=0 \n = int fracmathrmd^2 bmk(2pi)^2 fracwidehatQ(bmk)2 bmk^2 \nendaligned","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Thus, the drift, or in this case the mean energy input rate by the stochastic forcing, is  precisely determined from the spatial correlation of the forcing, Q. Let us denote the  drift as:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"varepsilon equiv int fracmathrmd^2 bmk(2pi)^2 fracwidehatQ(bmk)2 bmk^2  tag7","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Using the above, the work for a single forcing realization at the j-th timestep is numerically  computed as:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"colorGreen textItô  colorGreen P_j = -overlinepsi(bmx t_j) xi(bmx t_j+1)^x y + varepsilon  tag8","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"colorMagenta textStratonovich  colorMagenta P_j = -overlinefracpsi(bmx t_j) + psi(bmx t_j+1)2 xi(bmx t_j+1)^x y  tag9","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"Remember, previously the work done by the stochastic forcing was:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"mathrmd P_t = colorGreen fracsigma2mathrmd t + sqrtsigma x_t mathrmd W_t = colorMagenta sqrtsigma x_t circ mathrmd W_t ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"and by sampling over various forcing realizations:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"langle mathrmd P_t rangle = fracsigma2 mathrmd t = langle sqrtsigma x_t circ mathrmd W_t rangle ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"All modules in GeophysicalFlows.jl use Stratonovich calculus. For example, the domain-averaged  energy injected per unit time by the forcing in the TwoDNavierStokes module is computed  using (9) via the energy_work function.","category":"page"},{"location":"stochastic_forcing/#A-bit-more-elaborate-SPDE","page":"Stochastic Forcing","title":"A bit more elaborate SPDE","text":"","category":"section"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"It turns out everything carries through if in our SPDE above for the 2D vorticity equation we  also include the nonlinear advection terms:","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"partial_t nabla^2 psi(bmx t) + mathsfJ(psi nabla^2 psi) = - mu nabla^2 psi(bmx t) + xi(bmx t)  tag10","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"The nonlinearity does not alter the Itô drift; thus the ensemble mean energy input by the  stochastic forcing, remains the same. We can easily verify this from the \"formal\" solution  of (10):","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"psi(bmx t) = e^- mu t psi(bmx 0) + int_0^t e^- mu (t - s) nabla^-2 xi(bmx s)  mathrmd s - int_0^t nabla^-2 mathsfJ left ( psi(bmx s) nabla^2 psi(bmx s) right ) mathrmd s ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"When multiplied with xi(bmx t) the last term vanishes since its only non-zero  contribution comes from the point s = t, which is of measure zero (in the integrated sense). ","category":"page"},{"location":"stochastic_forcing/","page":"Stochastic Forcing","title":"Stochastic Forcing","text":"A demonstration of how the energy budgets can be computed when we have stochastic forcing is  illustrated in an example of the TwoDNavierStokes  module.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/twodnavierstokes_stochasticforcing.jl\"","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/#D-forced-dissipative-turbulence","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"This example can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"A simulation of forced-dissipative two-dimensional turbulence. We solve the two-dimensional vorticity equation with stochastic excitation and dissipation in the form of linear drag and hyperviscosity.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/#Install-dependencies","page":"2D forced-dissipative turbulence","title":"Install dependencies","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"using Pkg\npkg\"add GeophysicalFlows, Random, Printf, Plots\"","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/#Let's-begin","page":"2D forced-dissipative turbulence","title":"Let's begin","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"Let's load GeophysicalFlows.jl and some other needed packages.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"using GeophysicalFlows, Random, Printf, Plots\nparsevalsum = FourierFlows.parsevalsum","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/#Choosing-a-device:-CPU-or-GPU","page":"2D forced-dissipative turbulence","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/#Numerical,-domain,-and-simulation-parameters","page":"2D forced-dissipative turbulence","title":"Numerical, domain, and simulation parameters","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"First, we pick some numerical and physical parameters for our model.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":" n, L  = 256, 2π             # grid resolution and domain length\n ν, nν = 2e-7, 2             # hyperviscosity coefficient and hyperviscosity order\n μ, nμ = 1e-1, 0             # linear drag coefficient\n    dt = 0.005               # timestep\nnsteps = 4000                # total number of steps\n nsubs = 20                  # number of steps between each plot\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/#Forcing","page":"2D forced-dissipative turbulence","title":"Forcing","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"We force the vorticity equation with stochastic excitation that is delta-correlated in time and while spatially homogeneously and isotropically correlated. The forcing has a spectrum with power in a ring in wavenumber space of radius k_f (forcing_wavenumber) and width δ_f (forcing_bandwidth), and it injects energy per unit area and per unit time equal to varepsilon. That is, the forcing covariance spectrum is proportional to exp-(bmk - k_f)^2  (2 δ_f^2).","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"forcing_wavenumber = 14.0 * 2π/L  # the forcing wavenumber, `k_f`, for a spectrum that is a ring in wavenumber space\nforcing_bandwidth  = 1.5  * 2π/L  # the width of the forcing spectrum, `δ_f`\nε = 0.1                           # energy input rate by the forcing\n\ngrid = TwoDGrid(dev, n, L)\n\nK = @. sqrt(grid.Krsq)             # a 2D array with the total wavenumber\n\nforcing_spectrum = @. exp(-(K - forcing_wavenumber)^2 / (2 * forcing_bandwidth^2))\n@CUDA.allowscalar forcing_spectrum[grid.Krsq .== 0] .= 0 # ensure forcing has zero domain-average\n\nε0 = parsevalsum(forcing_spectrum .* grid.invKrsq / 2, grid) / (grid.Lx * grid.Ly)\n@. forcing_spectrum *= ε/ε0        # normalize forcing to inject energy at rate ε\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"We reset of the random number generator for reproducibility","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"if dev==CPU(); Random.seed!(1234); else; CUDA.seed!(1234); end\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"Next we construct function calcF! that computes a forcing realization every timestep. First we make sure that if dev=GPU(), then CUDA.rand() function is called for random numbers uniformly distributed between 0 and 1.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"random_uniform = dev==CPU() ? rand : CUDA.rand\n\nfunction calcF!(Fh, sol, t, clock, vars, params, grid)\n  Fh .= sqrt.(forcing_spectrum) .* exp.(2π * im * random_uniform(eltype(grid), size(sol))) ./ sqrt(clock.dt)\n\n  return nothing\nend\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/#Problem-setup","page":"2D forced-dissipative turbulence","title":"Problem setup","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"We initialize a Problem by providing a set of keyword arguments. The stepper keyword defines the time-stepper to be used.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"prob = TwoDNavierStokes.Problem(dev; nx=n, Lx=L, ν=ν, nν=nν, μ=μ, nμ=nμ, dt=dt, stepper=\"ETDRK4\",\n                                calcF=calcF!, stochastic=true)\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"Define some shortcuts for convenience.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"sol, clock, vars, params, grid = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\n\nx, y = grid.x, grid.y\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"First let's see how a forcing realization looks like. Function calcF!() computes the forcing in Fourier space and saves it into variable vars.Fh, so we first need to go back to physical space.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"Note that when plotting, we decorate the variable to be plotted with Array() to make sure it is brought back on the CPU when the variable lives on the GPU.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"calcF!(vars.Fh, sol, 0.0, clock, vars, params, grid)\n\nheatmap(x, y, Array(irfft(vars.Fh, grid.nx)'),\n     aspectratio = 1,\n               c = :balance,\n            clim = (-200, 200),\n           xlims = (-L/2, L/2),\n           ylims = (-L/2, L/2),\n          xticks = -3:3,\n          yticks = -3:3,\n          xlabel = \"x\",\n          ylabel = \"y\",\n           title = \"a forcing realization\",\n      framestyle = :box)","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/#Setting-initial-conditions","page":"2D forced-dissipative turbulence","title":"Setting initial conditions","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"Our initial condition is a fluid at rest.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"TwoDNavierStokes.set_ζ!(prob, ArrayType(dev)(zeros(grid.nx, grid.ny)))","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/#Diagnostics","page":"2D forced-dissipative turbulence","title":"Diagnostics","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"Create Diagnostics; the diagnostics are aimed to probe the energy budget.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"E  = Diagnostic(TwoDNavierStokes.energy,                prob, nsteps=nsteps) # energy\nZ  = Diagnostic(TwoDNavierStokes.enstrophy,             prob, nsteps=nsteps) # enstrophy\ndiags = [E, Z] # a list of Diagnostics passed to `stepforward!` will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/#Visualizing-the-simulation","page":"2D forced-dissipative turbulence","title":"Visualizing the simulation","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"We initialize a plot with the vorticity field and the time-series of energy and enstrophy diagnostics. To plot energy and enstrophy on the same axes we scale enstrophy with k_f^2.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"p1 = heatmap(x, y, Array(vars.ζ'),\n         aspectratio = 1,\n                   c = :balance,\n                clim = (-40, 40),\n               xlims = (-L/2, L/2),\n               ylims = (-L/2, L/2),\n              xticks = -3:3,\n              yticks = -3:3,\n              xlabel = \"x\",\n              ylabel = \"y\",\n               title = \"vorticity, t=\" * @sprintf(\"%.2f\", clock.t),\n          framestyle = :box)\n\np2 = plot(2, # this means \"a plot with two series\"\n               label = [\"energy E(t)\" \"enstrophy Z(t) / k_f²\"],\n              legend = :right,\n           linewidth = 2,\n               alpha = 0.7,\n              xlabel = \"μ t\",\n               xlims = (0, 1.1 * μ * nsteps * dt),\n               ylims = (0, 0.55))\n\nl = @layout Plots.grid(1, 2)\np = plot(p1, p2, layout = l, size = (900, 420))","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/#Time-stepping-the-Problem-forward","page":"2D forced-dissipative turbulence","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"Finally, we time-step the Problem forward in time.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"startwalltime = time()\n\nanim = @animate for j = 0:round(Int, nsteps / nsubs)\n  if j % (1000/nsubs) == 0\n    cfl = clock.dt * maximum([maximum(vars.u) / grid.dx, maximum(vars.v) / grid.dy])\n\n    log = @sprintf(\"step: %04d, t: %d, cfl: %.2f, E: %.4f, Z: %.4f, walltime: %.2f min\",\n          clock.step, clock.t, cfl, E.data[E.i], Z.data[Z.i], (time()-startwalltime)/60)\n    println(log)\n  end\n\n  p[1][1][:z] = Array(vars.ζ)\n  p[1][:title] = \"vorticity, μt = \" * @sprintf(\"%.2f\", μ * clock.t)\n  push!(p[2][1], μ * E.t[E.i], E.data[E.i])\n  push!(p[2][2], μ * Z.t[Z.i], Z.data[Z.i] / forcing_wavenumber^2)\n\n  stepforward!(prob, diags, nsubs)\n  TwoDNavierStokes.updatevars!(prob)\nend\n\nmp4(anim, \"twodturb_forced.mp4\", fps=18)","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/multilayerqg_2layer.jl\"","category":"page"},{"location":"literated/multilayerqg_2layer/#Phillips-model-of-Baroclinic-Instability","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"This example can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"A simulation of the growth of barolinic instability in the Phillips 2-layer model when we impose a vertical mean flow shear as a difference Delta U in the imposed, domain-averaged, zonal flow at each layer.","category":"page"},{"location":"literated/multilayerqg_2layer/#Install-dependencies","page":"Phillips model of Baroclinic Instability","title":"Install dependencies","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"using Pkg\npkg\"add GeophysicalFlows, Plots, Printf\"","category":"page"},{"location":"literated/multilayerqg_2layer/#Let's-begin","page":"Phillips model of Baroclinic Instability","title":"Let's begin","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Let's load GeophysicalFlows.jl and some other needed packages.","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"using GeophysicalFlows, Plots, Printf\n\nusing Random: seed!","category":"page"},{"location":"literated/multilayerqg_2layer/#Choosing-a-device:-CPU-or-GPU","page":"Phillips model of Baroclinic Instability","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"literated/multilayerqg_2layer/#Numerical-parameters-and-time-stepping-parameters","page":"Phillips model of Baroclinic Instability","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"n = 128                  # 2D resolution = n²\nstepper = \"FilteredRK4\"  # timestepper\n     dt = 2.5e-3         # timestep\n nsteps = 20000          # total number of time-steps\n nsubs  = 50             # number of time-steps for plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"literated/multilayerqg_2layer/#Physical-parameters","page":"Phillips model of Baroclinic Instability","title":"Physical parameters","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"L = 2π                   # domain size\nμ = 5e-2                 # bottom drag\nβ = 5                    # the y-gradient of planetary PV\n\nnlayers = 2              # number of layers\nf₀, g = 1, 1             # Coriolis parameter and gravitational constant\n H = [0.2, 0.8]          # the rest depths of each layer\n ρ = [4.0, 5.0]          # the density of each layer\n\n U = zeros(nlayers) # the imposed mean zonal flow in each layer\n U[1] = 1.0\n U[2] = 0.0\nnothing # hide","category":"page"},{"location":"literated/multilayerqg_2layer/#Problem-setup","page":"Phillips model of Baroclinic Instability","title":"Problem setup","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"We initialize a Problem by providing a set of keyword arguments. In this example we don't do any dealiasing to our solution by providing aliased_fraction=0.","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"prob = MultiLayerQG.Problem(nlayers, dev;\n                            nx=n, Lx=L, f₀=f₀, g=g, H=H, ρ=ρ, U=U, μ=μ, β=β,\n                            dt=dt, stepper=stepper, aliased_fraction=0)\nnothing # hide","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"and define some shortcuts.","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"sol, clock, params, vars, grid = prob.sol, prob.clock, prob.params, prob.vars, prob.grid\nx, y = grid.x, grid.y\nnothing # hide","category":"page"},{"location":"literated/multilayerqg_2layer/#Setting-initial-conditions","page":"Phillips model of Baroclinic Instability","title":"Setting initial conditions","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Our initial condition is some small-amplitude random noise. We smooth our initial condidtion using the timestepper's high-wavenumber filter.","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"ArrayType() function returns the array type appropriate for the device, i.e., Array for dev = CPU() and CuArray for dev = GPU().","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"seed!(1234) # reset of the random number generator for reproducibility\nq₀  = 1e-2 * ArrayType(dev)(randn((grid.nx, grid.ny, nlayers)))\nq₀h = prob.timestepper.filter .* rfft(q₀, (1, 2)) # apply rfft  only in dims=1, 2\nq₀  = irfft(q₀h, grid.nx, (1, 2))                 # apply irfft only in dims=1, 2\n\nMultiLayerQG.set_q!(prob, q₀)\nnothing # hide","category":"page"},{"location":"literated/multilayerqg_2layer/#Diagnostics","page":"Phillips model of Baroclinic Instability","title":"Diagnostics","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Create Diagnostics – energies function is imported at the top.","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"E = Diagnostic(MultiLayerQG.energies, prob; nsteps=nsteps)\ndiags = [E] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"literated/multilayerqg_2layer/#Output","page":"Phillips model of Baroclinic Instability","title":"Output","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"filepath = \".\"\nplotpath = \"./plots_2layer\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"2layer.jld2\")\nnothing # hide","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Do some basic file management","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"And then create Output","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nfunction get_u(prob)\n  sol, params, vars, grid = prob.sol, prob.params, prob.vars, prob.grid\n\n  @. vars.qh = sol\n  streamfunctionfrompv!(vars.ψh, vars.qh, params, grid)\n  @. vars.uh = -im * grid.l * vars.ψh\n  invtransform!(vars.u, vars.uh, params)\n\n  return vars.u\nend\n\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nnothing # hide","category":"page"},{"location":"literated/multilayerqg_2layer/#Visualizing-the-simulation","page":"Phillips model of Baroclinic Instability","title":"Visualizing the simulation","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"We define a function that plots the potential vorticity field and the evolution of energy and enstrophy. Note that when plotting, we decorate the variable to be plotted with Array() to make sure it is brought back on the CPU when vars live on the GPU.","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"symlims(data) = maximum(abs.(extrema(data))) |> q -> (-q, q)\n\nfunction plot_output(prob)\n  Lx, Ly = prob.grid.Lx, prob.grid.Ly\n\n  l = @layout Plots.grid(2, 3)\n  p = plot(layout=l, size = (1000, 600))\n\n  for m in 1:nlayers\n    heatmap!(p[(m-1) * 3 + 1], x, y, Array(vars.q[:, :, m]'),\n         aspectratio = 1,\n              legend = false,\n                   c = :balance,\n               xlims = (-Lx/2, Lx/2),\n               ylims = (-Ly/2, Ly/2),\n               clims = symlims,\n              xticks = -3:3,\n              yticks = -3:3,\n              xlabel = \"x\",\n              ylabel = \"y\",\n               title = \"q_\"*string(m),\n          framestyle = :box)\n\n    contourf!(p[(m-1) * 3 + 2], x, y, Array(vars.ψ[:, :, m]'),\n              levels = 8,\n         aspectratio = 1,\n              legend = false,\n                   c = :viridis,\n               xlims = (-Lx/2, Lx/2),\n               ylims = (-Ly/2, Ly/2),\n               clims = symlims,\n              xticks = -3:3,\n              yticks = -3:3,\n              xlabel = \"x\",\n              ylabel = \"y\",\n               title = \"ψ_\"*string(m),\n          framestyle = :box)\n  end\n\n  plot!(p[3], 2,\n             label = [\"KE₁\" \"KE₂\"],\n            legend = :bottomright,\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 2.35),\n             ylims = (1e-9, 1e0),\n            yscale = :log10,\n            yticks = 10.0.^(-9:0),\n            xlabel = \"μt\")\n\n  plot!(p[6], 1,\n             label = \"PE\",\n            legend = :bottomright,\n         linecolor = :red,\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 2.35),\n             ylims = (1e-9, 1e0),\n            yscale = :log10,\n            yticks = 10.0.^(-9:0),\n            xlabel = \"μt\")\n\nend\nnothing # hide","category":"page"},{"location":"literated/multilayerqg_2layer/#Time-stepping-the-Problem-forward","page":"Phillips model of Baroclinic Instability","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Finally, we time-step the Problem forward in time.","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"p = plot_output(prob)\n\nstartwalltime = time()\n\nanim = @animate for j = 0:round(Int, nsteps / nsubs)\n  if j % (1000 / nsubs) == 0\n    cfl = clock.dt * maximum([maximum(vars.u) / grid.dx, maximum(vars.v) / grid.dy])\n\n    log = @sprintf(\"step: %04d, t: %.1f, cfl: %.2f, KE₁: %.3e, KE₂: %.3e, PE: %.3e, walltime: %.2f min\", clock.step, clock.t, cfl, E.data[E.i][1][1], E.data[E.i][1][2], E.data[E.i][2][1], (time()-startwalltime)/60)\n\n    println(log)\n  end\n\n  for m in 1:nlayers\n    p[(m-1) * 3 + 1][1][:z] = Array(vars.q[:, :, m])\n    p[(m-1) * 3 + 2][1][:z] = Array(vars.ψ[:, :, m])\n  end\n\n  push!(p[3][1], μ * E.t[E.i], E.data[E.i][1][1])\n  push!(p[3][2], μ * E.t[E.i], E.data[E.i][1][2])\n  push!(p[6][1], μ * E.t[E.i], E.data[E.i][2][1])\n\n  stepforward!(prob, diags, nsubs)\n  MultiLayerQG.updatevars!(prob)\nend\n\nmp4(anim, \"multilayerqg_2layer.mp4\", fps=18)","category":"page"},{"location":"literated/multilayerqg_2layer/#Save","page":"Phillips model of Baroclinic Instability","title":"Save","text":"","category":"section"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Finally, we can save, e.g., the last snapshot via","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), clock.step)\nsavefig(savename)","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"","category":"page"},{"location":"literated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"This page was generated using Literate.jl.","category":"page"},{"location":"modules/singlelayerqg/#SingleLayerQG","page":"SingleLayerQG","title":"SingleLayerQG","text":"","category":"section"},{"location":"modules/singlelayerqg/#Basic-Equations","page":"SingleLayerQG","title":"Basic Equations","text":"","category":"section"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"This module solves the barotropic or equivalent barotropic quasi-geostrophic vorticity equation  on a beta plane of variable fluid depth H - h(x y). The flow is obtained through a  streamfunction psi as (u v) = (-partial_y psi partial_x psi). All flow fields  can be obtained from the quasi-geostrophic potential vorticity (QGPV). Here the QGPV is","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"\tunderbracef_0 + beta y_textplanetary PV + underbracepartial_x v\n\t- partial_y u_textrelative vorticity\n\tunderbrace - frac1ell^2 psi_textvortex stretching + \n\tunderbracefracf_0 hH_texttopographic PV ","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"where ell is the Rossby radius of deformation. Purely barotropic dynamics corresponds to  infinite Rossby radius of deformation (ell = infty), while a flow with a finite Rossby  radius follows is said to obey equivalent-barotropic dynamics. We denote the sum of the relative vorticity and the vortex stretching contributions to the QGPV with q equiv nabla^2 psi - psi  ell^2. Also, we denote the topographic PV with eta equiv f_0 h  H.","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"The dynamical variable is q.  Thus, the equation solved by the module is:","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"partial_t q + mathsfJ(psi q + eta) + beta partial_x psi = \nunderbrace-leftmu + nu(-1)^n_nu nabla^2n_nu right q_textrmdissipation + F ","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"where mathsfJ(a b) = (partial_x a)(partial_y b)-(partial_y a)(partial_x b) is the  two-dimensional Jacobian. On the right hand side, F(x y t) is forcing, mu is  linear drag, and nu is hyperviscosity of order n_nu. Plain old viscosity corresponds  to n_nu = 1.","category":"page"},{"location":"modules/singlelayerqg/#Implementation","page":"SingleLayerQG","title":"Implementation","text":"","category":"section"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"The equation is time-stepped forward in Fourier space:","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"partial_t widehatq = - widehatmathsfJ(psi q + eta) + beta fraci k_x𝐤^2 + 1ell^2 widehatq - left(mu + nu 𝐤^2n_nu right) widehatq + widehatF ","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"The state variable sol is the Fourier transform of the sum of relative vorticity and vortex  stretching (when the latter is applicable), qh.","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"The Jacobian is computed in the conservative form: mathsfJ(f g) = partial_y  (partial_x f) g - partial_x (partial_y f) g.","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"The linear operator is constructed in Equation","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"GeophysicalFlows.SingleLayerQG.Equation","category":"page"},{"location":"modules/singlelayerqg/#GeophysicalFlows.SingleLayerQG.Equation","page":"SingleLayerQG","title":"GeophysicalFlows.SingleLayerQG.Equation","text":"Equation(params::BarotropicQGParams, grid)\n\nReturn the equation for a barotropic QG problem with params and grid. Linear operator  L includes bottom drag μ, (hyper)-viscosity of order n_ν with coefficient ν  and the β term:\n\nL = - μ - ν 𝐤^2 n_ν + i β k_x  𝐤² \n\nNonlinear term is computed via calcN! function.\n\n\n\n\n\nEquation(params::EquivalentBarotropicQGParams, grid)\n\nReturn the equation for an equivalent-barotropic QG problem with params and grid.  Linear operator L includes bottom drag μ, (hyper)-viscosity of order n_ν with  coefficient ν and the β term:\n\nL = -μ - ν 𝐤^2 n_ν + i β k_x  (𝐤² + 1ℓ²) \n\nNonlinear term is computed via calcN! function.\n\n\n\n\n\n","category":"function"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"The nonlinear terms are computed via","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"GeophysicalFlows.SingleLayerQG.calcN!","category":"page"},{"location":"modules/singlelayerqg/#GeophysicalFlows.SingleLayerQG.calcN!","page":"SingleLayerQG","title":"GeophysicalFlows.SingleLayerQG.calcN!","text":"calcN!(N, sol, t, clock, vars, params, grid)\n\nCalculate the nonlinear term, that is the advection term and the forcing,\n\nN = - widehat𝖩(ψ q+η) + F \n\n\n\n\n\n","category":"function"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"which in turn calls calcN_advection!  and addforcing!.","category":"page"},{"location":"modules/singlelayerqg/#Parameters-and-Variables","page":"SingleLayerQG","title":"Parameters and Variables","text":"","category":"section"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"All required parameters are included inside Params and all module variables are included inside Vars.","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"For decaying case (no forcing, F=0), vars can be constructed with DecayingVars.  For the forced case (F ne 0) the vars struct is with ForcedVars or StochasticForcedVars.","category":"page"},{"location":"modules/singlelayerqg/#Helper-functions","page":"SingleLayerQG","title":"Helper functions","text":"","category":"section"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"Some helper functions included in the module are:","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"GeophysicalFlows.SingleLayerQG.updatevars!\nGeophysicalFlows.SingleLayerQG.set_q!","category":"page"},{"location":"modules/singlelayerqg/#GeophysicalFlows.SingleLayerQG.updatevars!","page":"SingleLayerQG","title":"GeophysicalFlows.SingleLayerQG.updatevars!","text":"updatevars!(sol, vars, params, grid)\n\nUpdate the variables in vars with the solution in sol.\n\n\n\n\n\n","category":"function"},{"location":"modules/singlelayerqg/#GeophysicalFlows.SingleLayerQG.set_q!","page":"SingleLayerQG","title":"GeophysicalFlows.SingleLayerQG.set_q!","text":"set_q!(prob, q)\n\nSet the solution of problem, prob.sol as the transform of q and update variables prob.vars.\n\n\n\n\n\n","category":"function"},{"location":"modules/singlelayerqg/#Diagnostics","page":"SingleLayerQG","title":"Diagnostics","text":"","category":"section"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"The kinetic energy of the fluid is computed via:","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"GeophysicalFlows.SingleLayerQG.kinetic_energy","category":"page"},{"location":"modules/singlelayerqg/#GeophysicalFlows.SingleLayerQG.kinetic_energy","page":"SingleLayerQG","title":"GeophysicalFlows.SingleLayerQG.kinetic_energy","text":"kinetic_energy(prob)\nkinetic_energy(sol, grid, vars, params)\n\nReturn the domain-averaged kinetic energy of the fluid. Since u² + v² = bf  ψ², the domain-averaged kinetic energy is \n\nint frac12 bf  ψ² frac𝖽x 𝖽yL_x L_y = sum_𝐤 frac12 𝐤² ψ² \n\n\n\n\n\n","category":"function"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"while the potential energy, for an equivalent barotropic fluid, is computed via:","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"GeophysicalFlows.SingleLayerQG.potential_energy","category":"page"},{"location":"modules/singlelayerqg/#GeophysicalFlows.SingleLayerQG.potential_energy","page":"SingleLayerQG","title":"GeophysicalFlows.SingleLayerQG.potential_energy","text":"potential_energy(prob)\npotential_energy(sol, grid, vars, params)\n\nReturn the domain-averaged potential energy of the fluid, \n\nint frac12 fracψ²ℓ² frac𝖽x 𝖽yL_x L_y = sum_𝐤 frac12 fracψ²ℓ² \n\n\n\n\n\n","category":"function"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"The total energy is:","category":"page"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"GeophysicalFlows.SingleLayerQG.energy","category":"page"},{"location":"modules/singlelayerqg/#GeophysicalFlows.SingleLayerQG.energy","page":"SingleLayerQG","title":"GeophysicalFlows.SingleLayerQG.energy","text":"energy(prob)\nenergy(sol, grid, vars, params)\n\nReturn the domain-averaged total energy of the fluid, that is, the kinetic energy for a pure barotropic flow or the sum of kinetic and potential energies for an equivalent barotropic flow.\n\n\n\n\n\n","category":"function"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"Other diagnostic include: energy_dissipation,  energy_drag, energy_work,  enstrophy_dissipation, and enstrophy_drag, enstrophy_work.","category":"page"},{"location":"modules/singlelayerqg/#Examples","page":"SingleLayerQG","title":"Examples","text":"","category":"section"},{"location":"modules/singlelayerqg/","page":"SingleLayerQG","title":"SingleLayerQG","text":"examples/singlelayerqg_betadecay.jl: A script that simulates decaying quasi-geostrophic flow on a beta plane demonstrating zonation.\nexamples/singlelayerqg_betaforced.jl: A script that simulates forced-dissipative quasi-geostrophic flow on a beta plane demonstrating zonation. The forcing is temporally delta-correlated with isotropic spatial structure with power in a narrow annulus in wavenumber space with total wavenumber k_f.\nexamples/singlelayerqg_decay_topography.jl: A script that simulates two dimensional turbulence (barotropic quasi-geostrophic flow with beta=0) above topography.\nexamples/singlelayerqg_decaying_barotropic_equivalentbarotropic.jl: A script that simulates two dimensional turbulence (beta=0) with both infinite and finite Rossby radius of deformation and compares the evolution of the two.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/twodnavierstokes_stochasticforcing_budgets.jl\"","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/#D-forced-dissipative-turbulence-budgets","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"This example can viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"A simulation of forced-dissipative two-dimensional turbulence. We solve the two-dimensional vorticity equation with stochastic excitation and dissipation in the form of linear drag and hyperviscosity. As a demonstration, we compute how each of the forcing and dissipation terms contribute to the energy and the enstrophy budgets.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/#Install-dependencies","page":"2D forced-dissipative turbulence budgets","title":"Install dependencies","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"using Pkg\npkg\"add GeophysicalFlows, Random, Printf, Plots\"","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/#Let's-begin","page":"2D forced-dissipative turbulence budgets","title":"Let's begin","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"Let's load GeophysicalFlows.jl and some other needed packages.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"using GeophysicalFlows, Random, Printf, Plots\nparsevalsum = FourierFlows.parsevalsum","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/#Choosing-a-device:-CPU-or-GPU","page":"2D forced-dissipative turbulence budgets","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/#Numerical,-domain,-and-simulation-parameters","page":"2D forced-dissipative turbulence budgets","title":"Numerical, domain, and simulation parameters","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"First, we pick some numerical and physical parameters for our model.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":" n, L  = 256, 2π              # grid resolution and domain length\n ν, nν = 2e-7, 2              # hyperviscosity coefficient and hyperviscosity order\n μ, nμ = 1e-1, 0              # linear drag coefficient\ndt, tf = 0.005, 0.2 / μ       # timestep and final time\n    nt = round(Int, tf / dt)  # total timesteps\n    ns = 4                    # how many intermediate times we want to plot\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/#Forcing","page":"2D forced-dissipative turbulence budgets","title":"Forcing","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"We force the vorticity equation with stochastic excitation that is delta-correlated in time and while spatially homogeneously and isotropically correlated. The forcing has a spectrum with power in a ring in wavenumber space of radius k_f (forcing_wavenumber) and width δ_f (forcing_bandwidth), and it injects energy per unit area and per unit time equal to varepsilon. That is, the forcing covariance spectrum is proportional to exp-(bmk - k_f)^2  (2 δ_f^2).","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"forcing_wavenumber = 14.0 * 2π/L  # the forcing wavenumber, `k_f`, for a spectrum that is a ring in wavenumber space\nforcing_bandwidth  = 1.5  * 2π/L  # the width of the forcing spectrum, `δ_f`\nε = 0.1                           # energy input rate by the forcing\n\ngrid = TwoDGrid(dev, n, L)\n\nK = @. sqrt(grid.Krsq)             # a 2D array with the total wavenumber\n\nforcing_spectrum = @. exp(-(K - forcing_wavenumber)^2 / (2 * forcing_bandwidth^2))\n@CUDA.allowscalar forcing_spectrum[grid.Krsq .== 0] .= 0 # ensure forcing has zero domain-average\n\nε0 = parsevalsum(forcing_spectrum .* grid.invKrsq / 2, grid) / (grid.Lx * grid.Ly)\n@. forcing_spectrum *= ε/ε0        # normalize forcing to inject energy at rate ε\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"We reset of the random number generator for reproducibility","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"if dev==CPU(); Random.seed!(1234); else; CUDA.seed!(1234); end\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"Next we construct function calcF! that computes a forcing realization every timestep. First we make sure that if dev=GPU(), then CUDA.rand() function is called for random numbers uniformly distributed between 0 and 1.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"random_uniform = dev==CPU() ? rand : CUDA.rand\n\nfunction calcF!(Fh, sol, t, clock, vars, params, grid)\n  Fh .= sqrt.(forcing_spectrum) .* exp.(2π * im * random_uniform(eltype(grid), size(sol))) ./ sqrt(clock.dt)\n\n  return nothing\nend\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/#Problem-setup","page":"2D forced-dissipative turbulence budgets","title":"Problem setup","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"We initialize a Problem by providing a set of keyword arguments. The stepper keyword defines the time-stepper to be used.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"prob = TwoDNavierStokes.Problem(dev; nx=n, Lx=L, ν=ν, nν=nν, μ=μ, nμ=nμ, dt=dt, stepper=\"ETDRK4\",\n                                calcF=calcF!, stochastic=true)\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"Define some shortcuts for convenience.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"sol, clock, vars, params, grid = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\n\nx, y = grid.x, grid.y\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"First let's see how a forcing realization looks like. Function calcF!() computes the forcing in Fourier space and saves it into variable vars.Fh, so we first need to go back to physical space.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"Note that when plotting, we decorate the variable to be plotted with Array() to make sure it is brought back on the CPU when the variable lives on the GPU.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"calcF!(vars.Fh, sol, 0.0, clock, vars, params, grid)\n\nheatmap(x, y, Array(irfft(vars.Fh, grid.nx)'),\n     aspectratio = 1,\n               c = :balance,\n            clim = (-200, 200),\n           xlims = (-L/2, L/2),\n           ylims = (-L/2, L/2),\n          xticks = -3:3,\n          yticks = -3:3,\n          xlabel = \"x\",\n          ylabel = \"y\",\n           title = \"a forcing realization\",\n      framestyle = :box)","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/#Setting-initial-conditions","page":"2D forced-dissipative turbulence budgets","title":"Setting initial conditions","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"Our initial condition is a fluid at rest.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"TwoDNavierStokes.set_ζ!(prob, ArrayType(dev)(zeros(grid.nx, grid.ny)))","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/#Diagnostics","page":"2D forced-dissipative turbulence budgets","title":"Diagnostics","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"Create Diagnostics; the diagnostics are aimed to probe the energy and enstrophy budgets.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"E  = Diagnostic(TwoDNavierStokes.energy,                               prob, nsteps=nt) # energy\nRᵋ = Diagnostic(TwoDNavierStokes.energy_dissipation_hypoviscosity,     prob, nsteps=nt) # energy dissipation by drag μ\nDᵋ = Diagnostic(TwoDNavierStokes.energy_dissipation_hyperviscosity,    prob, nsteps=nt) # energy dissipation by drag μ\nWᵋ = Diagnostic(TwoDNavierStokes.energy_work,                          prob, nsteps=nt) # energy work input by forcing\nZ  = Diagnostic(TwoDNavierStokes.enstrophy,                            prob, nsteps=nt) # enstrophy\nRᶻ = Diagnostic(TwoDNavierStokes.enstrophy_dissipation_hypoviscosity,  prob, nsteps=nt) # enstrophy dissipation by drag μ\nDᶻ = Diagnostic(TwoDNavierStokes.enstrophy_dissipation_hyperviscosity, prob, nsteps=nt) # enstrophy dissipation by drag μ\nWᶻ = Diagnostic(TwoDNavierStokes.enstrophy_work,                       prob, nsteps=nt) # enstrophy work input by forcing\ndiags = [E, Dᵋ, Wᵋ, Rᵋ, Z, Dᶻ, Wᶻ, Rᶻ] # a list of Diagnostics passed to `stepforward!` will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/#Visualizing-the-simulation","page":"2D forced-dissipative turbulence budgets","title":"Visualizing the simulation","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"We define a function that plots the vorticity field and the evolution of the diagnostics: energy, enstrophy, and all terms involved in the energy and enstrophy budgets. Last, we also check (by plotting) whether the energy and enstrophy budgets are accurately computed, e.g., mathrmdEmathrmdt = W^varepsilon - R^varepsilon - D^varepsilon.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"function computetendencies_and_makeplot(prob, diags)\n  sol, clock, vars, params, grid = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\n\n  TwoDNavierStokes.updatevars!(prob)\n\n  E, Dᵋ, Wᵋ, Rᵋ, Z, Dᶻ, Wᶻ, Rᶻ = diags\n\n  clocktime = round(μ * clock.t, digits=2)\n\n  dEdt_numerical = (E[2:E.i] - E[1:E.i-1]) / clock.dt # numerical first-order approximation of energy tendency\n  dZdt_numerical = (Z[2:Z.i] - Z[1:Z.i-1]) / clock.dt # numerical first-order approximation of enstrophy tendency\n\n  dEdt_computed = Wᵋ[2:E.i] + Dᵋ[1:E.i-1] + Rᵋ[1:E.i-1]\n  dZdt_computed = Wᶻ[2:Z.i] + Dᶻ[1:Z.i-1] + Rᶻ[1:Z.i-1]\n\n  residual_E = dEdt_computed - dEdt_numerical\n  residual_Z = dZdt_computed - dZdt_numerical\n\n  εᶻ = parsevalsum(forcing_spectrum / 2, grid) / (grid.Lx * grid.Ly)\n\n  pζ = heatmap(x, y, Array(vars.ζ'),\n            aspectratio = 1,\n            legend = false,\n                 c = :viridis,\n              clim = (-25, 25),\n             xlims = (-L/2, L/2),\n             ylims = (-L/2, L/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"μt\",\n            ylabel = \"y\",\n             title = \"∇²ψ(x, y, μt=\" * @sprintf(\"%.2f\", μ * clock.t) * \")\",\n        framestyle = :box)\n\n  pζ = plot(pζ, size = (400, 400))\n\n  t = E.t[2:E.i]\n\n  p1E = plot(μ * t, [Wᵋ[2:E.i] ε.+0*t Dᵋ[1:E.i-1] Rᵋ[1:E.i-1]],\n             label = [\"energy work, Wᵋ\" \"ensemble mean energy work, <Wᵋ>\" \"dissipation, Dᵋ\" \"drag, Rᵋ = - 2μE\"],\n         linestyle = [:solid :dash :solid :solid],\n         linewidth = 2,\n             alpha = 0.8,\n            xlabel = \"μt\",\n            ylabel = \"energy sources and sinks\")\n\n  p2E = plot(μ * t, [dEdt_computed, dEdt_numerical],\n           label = [\"computed Wᵋ-Dᵋ\" \"numerical dE/dt\"],\n       linestyle = [:solid :dashdotdot],\n       linewidth = 2,\n           alpha = 0.8,\n          xlabel = \"μt\",\n          ylabel = \"dE/dt\")\n\n  p3E = plot(μ * t, residual_E,\n           label = \"residual dE/dt = computed - numerical\",\n       linewidth = 2,\n           alpha = 0.7,\n          xlabel = \"μt\")\n\n  t = Z.t[2:E.i]\n\n  p1Z = plot(μ * t, [Wᶻ[2:Z.i] εᶻ.+0*t Dᶻ[1:Z.i-1] Rᶻ[1:Z.i-1]],\n           label = [\"enstrophy work, Wᶻ\" \"mean enstrophy work, <Wᶻ>\" \"enstrophy dissipation, Dᶻ\" \"enstrophy drag, Rᶻ = - 2μZ\"],\n       linestyle = [:solid :dash :solid :solid],\n       linewidth = 2,\n           alpha = 0.8,\n          xlabel = \"μt\",\n          ylabel = \"enstrophy sources and sinks\")\n\n\n  p2Z = plot(μ * t, [dZdt_computed, dZdt_numerical],\n         label = [\"computed Wᶻ-Dᶻ\" \"numerical dZ/dt\"],\n     linestyle = [:solid :dashdotdot],\n     linewidth = 2,\n         alpha = 0.8,\n        xlabel = \"μt\",\n        ylabel = \"dZ/dt\")\n\n  p3Z = plot(μ * t, residual_Z,\n         label = \"residual dZ/dt = computed - numerical\",\n     linewidth = 2,\n         alpha = 0.7,\n        xlabel = \"μt\")\n\n  layout = @layout Plots.grid(3, 2)\n\n  pbudgets = plot(p1E, p1Z, p2E, p2Z, p3E, p3Z, layout=layout, size = (900, 1200))\n\n  return pζ, pbudgets\nend\nnothing # hide","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/#Time-stepping-the-Problem-forward","page":"2D forced-dissipative turbulence budgets","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"Finally, we time-step the Problem forward in time.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"startwalltime = time()\nfor i = 1:ns\n  stepforward!(prob, diags, round(Int, nt/ns))\n\n  TwoDNavierStokes.updatevars!(prob)\n\n  cfl = clock.dt * maximum([maximum(vars.u) / grid.dx, maximum(vars.v) / grid.dy])\n\n  log = @sprintf(\"step: %04d, t: %.1f, cfl: %.3f, walltime: %.2f min\", clock.step, clock.t,\n        cfl, (time()-startwalltime)/60)\n\n  println(log)\nend","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/#Plot","page":"2D forced-dissipative turbulence budgets","title":"Plot","text":"","category":"section"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"And now let's see what we got. First we plot the final snapshot of the vorticity field.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"pζ, pbudgets = computetendencies_and_makeplot(prob, diags)\n\npζ","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"And finaly the energy and enstrophy budgets.","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"pbudgets","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"","category":"page"},{"location":"literated/twodnavierstokes_stochasticforcing_budgets/","page":"2D forced-dissipative turbulence budgets","title":"2D forced-dissipative turbulence budgets","text":"This page was generated using Literate.jl.","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/singlelayerqg_decaying_barotropic_equivalentbarotropic.jl\"","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/#SingleLayerQG-decaying-2D-turbulence-with-and-without-finite-Rossby-radius-of-deformation","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"This example can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"We use here the SingleLayerQG module to simulate decaying two-dimensional turbulence and investigate how does a finite Rossby radius of deformation affects its evolution.","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/#Install-dependencies","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"Install dependencies","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"using Pkg\npkg\"add GeophysicalFlows, Printf, Random, Plots\"","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/#Let's-begin","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"Let's begin","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"Let's load GeophysicalFlows.jl and some other needed packages.","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"using GeophysicalFlows, Printf, Random, Plots\n\nusing GeophysicalFlows: peakedisotropicspectrum\nusing Random: seed!","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/#Choosing-a-device:-CPU-or-GPU","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/#Numerical,-domain,-and-simulation-parameters","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"Numerical, domain, and simulation parameters","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"First, we pick some numerical and physical parameters for our model.","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"n, L  = 128, 2π             # grid resolution and domain length\ndeformation_radius = 0.35   # the deformation radius\nnothing # hide\n\n# Then we pick the time-stepper parameters\n    dt = 1e-2  # timestep\nnsteps = 4000  # total number of steps\n nsubs = 20    # number of steps between each plot\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/#Problem-setup","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"Problem setup","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"We initialize two problems by providing a set of keyword arguments to the Problem constructor. The two problems are otherwise the same, except one has an infinite deformation radius, prob_bqg, and the other has finite deformation radius, prob_eqbqg.","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"prob_bqg = SingleLayerQG.Problem(dev; nx=n, Lx=L,\n                                      dt=dt, stepper=\"FilteredRK4\", aliased_fraction=0)\nprob_eqbqg = SingleLayerQG.Problem(dev; nx=n, Lx=L, deformation_radius = deformation_radius,\n                                      dt=dt, stepper=\"FilteredRK4\", aliased_fraction=0)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/#Setting-initial-conditions","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"Setting initial conditions","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"For initial condition we construct a relative vorticity with energy most energy around total wavenumber k_0.","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"seed!(1234)\nk₀, E₀ = 6, 0.5\n∇²ψ₀ = peakedisotropicspectrum(prob_bqg.grid, k₀, E₀, mask=prob_bqg.timestepper.filter)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"SingleLayerQG allows us to set up the initial q for each problem via set_q!() function. To initialize both prob_bqg and prob_eqbqg with the same flow, we first use function SingleLayerQG.streamfunctionfrompv! to get the streamfunction that corresponds to the relative vorticity we computed above. This works in the purely barotropic problem, prob_bqg since in that case the QGPV is simply the relative vorticity.","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"∇²ψ₀h = rfft(∇²ψ₀)\nψ₀h = @. 0 * ∇²ψ₀h\nSingleLayerQG.streamfunctionfrompv!(ψ₀h, ∇²ψ₀h, prob_bqg.params, prob_bqg.grid)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"and then use the streamfunction to compute the corresponding q_0 for each problem,","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"q₀_bqg   = irfft(-prob_bqg.grid.Krsq .* ψ₀h, prob_bqg.grid.nx)\nq₀_eqbqg = irfft(-(prob_eqbqg.grid.Krsq .+ 1/prob_eqbqg.params.deformation_radius^2) .* ψ₀h, prob_bqg.grid.nx)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"Now we can initialize our problems with the same flow.","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"SingleLayerQG.set_q!(prob_bqg, q₀_bqg)\nSingleLayerQG.set_q!(prob_eqbqg, q₀_eqbqg)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"Let's plot the initial vorticity field for each problem. A function that returns relative vorticity from each problem's state variable will prove useful. Note that when plotting, we decorate the variable to be plotted with Array() to make sure it is brought back on the CPU when the variable lives on the GPU.","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"relativevorticity(prob) = irfft(-prob.grid.Krsq .* prob.vars.ψh, prob.grid.nx)\n\nx, y = prob_bqg.grid.x, prob_bqg.grid.y\n\np_bqg = heatmap(x, y, Array(relativevorticity(prob_bqg)'),\n         aspectratio = 1,\n                   c = :balance,\n                clim = (-40, 40),\n               xlims = (-L/2, L/2),\n               ylims = (-L/2, L/2),\n              xticks = -3:3,\n              yticks = -3:3,\n              xlabel = \"x\",\n              ylabel = \"y\",\n               title = \"barotropic\\n ∇²ψ, t=\" * @sprintf(\"%.2f\", prob_bqg.clock.t),\n          framestyle = :box)\n\np_eqbqg = heatmap(x, y, Array(relativevorticity(prob_eqbqg)'),\n         aspectratio = 1,\n                   c = :balance,\n                clim = (-40, 40),\n               xlims = (-L/2, L/2),\n               ylims = (-L/2, L/2),\n              xticks = -3:3,\n              yticks = -3:3,\n              xlabel = \"x\",\n              ylabel = \"y\",\n               title = \"equivalent barotropic; deformation radius: \" * @sprintf(\"%.2f\", prob_eqbqg.params.deformation_radius) * \"\\n ∇²ψ, t=\" * @sprintf(\"%.2f\", prob_eqbqg.clock.t),\n          framestyle = :box)\n\nl = @layout Plots.grid(1, 2)\np = plot(p_bqg, p_eqbqg, layout = l, size = (800, 380))","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/#Time-stepping-the-Problem-forward","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"Now we time-step both problems forward and animate the relative vorticity in each case.","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"startwalltime = time()\n\ncfl(prob) = prob.clock.dt * maximum([maximum(prob.vars.u) / prob.grid.dx, maximum(prob.vars.v) / prob.grid.dy])\n\nanim = @animate for j = 0:Int(nsteps/nsubs)\n  if j % (1000 / nsubs) == 0\n    log_bqg = @sprintf(\"barotropic; step: %04d, t: %d, cfl: %.2f, walltime: %.2f min\",\n        prob_bqg.clock.step, prob_bqg.clock.t, cfl(prob_bqg), (time()-startwalltime)/60)\n    println(log_bqg)\n\n    log_eqbqg = @sprintf(\"equivalent barotropic; step: %04d, t: %d, cfl: %.2f, walltime: %.2f min\",\n        prob_eqbqg.clock.step, prob_eqbqg.clock.t, cfl(prob_eqbqg), (time()-startwalltime)/60)\n    println(log_eqbqg)\n  end\n\n  p[1][1][:z] = Array(relativevorticity(prob_bqg))\n  p[1][:title] = \"barotropic\\n ∇²ψ, t=\" * @sprintf(\"%.2f\", prob_bqg.clock.t)\n  p[2][1][:z] = Array(relativevorticity(prob_eqbqg))\n  p[2][:title] = \"equivalent barotropic; deformation radius: \" * @sprintf(\"%.2f\", prob_eqbqg.params.deformation_radius) * \"\\n ∇²ψ, t=\" * @sprintf(\"%.2f\", prob_eqbqg.clock.t)\n\n  stepforward!(prob_bqg, nsubs)\n  SingleLayerQG.updatevars!(prob_bqg)\n\n  stepforward!(prob_eqbqg, nsubs)\n  SingleLayerQG.updatevars!(prob_eqbqg)\nend\n\nmp4(anim, \"singlelayerqg_barotropic_equivalentbarotropic.mp4\", fps=18)","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"","category":"page"},{"location":"literated/singlelayerqg_decaying_barotropic_equivalentbarotropic/","page":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","title":"SingleLayerQG decaying 2D turbulence with and without finite Rossby radius of deformation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"lib/types/#Private-types","page":"Private types","title":"Private types","text":"","category":"section"},{"location":"lib/types/#TwoDNavierStokes","page":"Private types","title":"TwoDNavierStokes","text":"","category":"section"},{"location":"lib/types/","page":"Private types","title":"Private types","text":"GeophysicalFlows.TwoDNavierStokes.Params\nGeophysicalFlows.TwoDNavierStokes.Vars\nGeophysicalFlows.TwoDNavierStokes.DecayingVars\nGeophysicalFlows.TwoDNavierStokes.ForcedVars\nGeophysicalFlows.TwoDNavierStokes.StochasticForcedVars","category":"page"},{"location":"lib/types/#GeophysicalFlows.TwoDNavierStokes.Params","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.Params","text":"Params{T}(ν, nν, μ, nμ, calcF!)\n\nA struct containing the parameters for the two-dimensional Navier-Stokes. Included are:\n\nν::Any\nsmall-scale (hyper)-viscosity coefficient\nnν::Int64\n(hyper)-viscosity order, nν 1\nμ::Any\nlarge-scale (hypo)-viscosity coefficient\nnμ::Int64\n(hypo)-viscosity order, nμ 0\ncalcF!::Function\nfunction that calculates the Fourier transform of the forcing, F\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.TwoDNavierStokes.Vars","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.Vars","text":"Vars{Aphys, Atrans, F, P}(ζ, u, v, ζh, uh, vh, Fh, prevsol)\n\nThe variables for two-dimensional Navier-Stokes:\n\nζ\nrelative vorticity\nu\nx-component of velocity\nv\ny-component of velocity\nζh\nFourier transform of relative vorticity\nuh\nFourier transform of x-component of velocity\nvh\nFourier transform of y-component of velocity\nFh\nFourier transform of forcing\nprevsol\nsol at previous time-step\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.TwoDNavierStokes.DecayingVars","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.DecayingVars","text":"DecayingVars(dev, grid)\n\nReturn the vars for unforced two-dimensional Navier-Stokes problem on device dev and  with grid.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.TwoDNavierStokes.ForcedVars","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.ForcedVars","text":"ForcedVars(dev, grid)\n\nReturn the vars for forced two-dimensional Navier-Stokes on device dev and with grid.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.TwoDNavierStokes.StochasticForcedVars","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.StochasticForcedVars","text":"StochasticForcedVars(dev, grid)\n\nReturn the vars for stochastically forced two-dimensional Navier-Stokes on device dev and  with grid.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#SingleLayerQG","page":"Private types","title":"SingleLayerQG","text":"","category":"section"},{"location":"lib/types/","page":"Private types","title":"Private types","text":"GeophysicalFlows.SingleLayerQG.Params\nGeophysicalFlows.SingleLayerQG.BarotropicQGParams\nGeophysicalFlows.SingleLayerQG.EquivalentBarotropicQGParams\nGeophysicalFlows.SingleLayerQG.Vars\nGeophysicalFlows.SingleLayerQG.DecayingVars\nGeophysicalFlows.SingleLayerQG.ForcedVars\nGeophysicalFlows.SingleLayerQG.StochasticForcedVars","category":"page"},{"location":"lib/types/#GeophysicalFlows.SingleLayerQG.Params","page":"Private types","title":"GeophysicalFlows.SingleLayerQG.Params","text":"Params{T, Aphys, Atrans, ℓ}(β, deformation_radius, eta, etah, μ, ν, nν, calcF!)\n\nA struct containing the parameters for the SingleLayerQG problem. Included are:\n\nβ::Any\nplanetary vorticity y-gradient\ndeformation_radius::Any\nRossby radius of deformation\neta::Any\ntopographic potential vorticity\netah::Any\nFourier transform of topographic potential vorticity\nμ::Any\nlinear drag coefficient\nν::Any\nsmall-scale (hyper)-viscosity coefficient\nnν::Int64\n(hyper)-viscosity order, nν 1\ncalcF!::Function\nfunction that calculates the Fourier transform of the forcing, F\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.SingleLayerQG.BarotropicQGParams","page":"Private types","title":"GeophysicalFlows.SingleLayerQG.BarotropicQGParams","text":"BarotropicQGParams(grid::TwoDGrid, β, eta, μ, ν, nν::Int, calcF\n\nConstructor for BarotropicQGParams (infinite Rossby radius of deformation).\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.SingleLayerQG.EquivalentBarotropicQGParams","page":"Private types","title":"GeophysicalFlows.SingleLayerQG.EquivalentBarotropicQGParams","text":"EquivalentBarotropicQGParams(grid::TwoDGrid, β, deformation_radius, eta, μ, ν, nν::Int, calcF\n\nConstructor for EquivalentBarotropicQGParams (finite Rossby radius of deformation).\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.SingleLayerQG.Vars","page":"Private types","title":"GeophysicalFlows.SingleLayerQG.Vars","text":"Vars{Aphys, Atrans, F, P}(q, ψ, u, v, qh, , ψh, uh, vh, Fh, prevsol)\n\nThe variables for SingleLayer QG:\n\nq\nrelative vorticity (+ vortex stretching)\nψ\nstreamfunction\nu\nx-component of velocity\nv\ny-component of velocity\nqh\nFourier transform of relative vorticity (+ vortex stretching)\nψh\nFourier transform of streamfunction\nuh\nFourier transform of x-component of velocity\nvh\nFourier transform of y-component of velocity\nFh\nFourier transform of forcing\nprevsol\nsol at previous time-step\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.SingleLayerQG.DecayingVars","page":"Private types","title":"GeophysicalFlows.SingleLayerQG.DecayingVars","text":"DecayingVars(dev, grid)\n\nReturn the vars for unforced single-layer QG problem on device dev and with grid\n\n\n\n\n\n","category":"function"},{"location":"lib/types/#GeophysicalFlows.SingleLayerQG.ForcedVars","page":"Private types","title":"GeophysicalFlows.SingleLayerQG.ForcedVars","text":"ForcedVars(dev, grid)\n\nReturn the vars for forced single-layer QG problem on device dev and with grid.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.SingleLayerQG.StochasticForcedVars","page":"Private types","title":"GeophysicalFlows.SingleLayerQG.StochasticForcedVars","text":"StochasticForcedVars(dev, grid)\n\nReturn the vars for stochastically forced barotropic QG problem on device dev and with grid.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#MultiLayerQG","page":"Private types","title":"MultiLayerQG","text":"","category":"section"},{"location":"lib/types/","page":"Private types","title":"Private types","text":"GeophysicalFlows.MultiLayerQG.Params\nGeophysicalFlows.MultiLayerQG.SingleLayerParams\nGeophysicalFlows.MultiLayerQG.Vars\nGeophysicalFlows.MultiLayerQG.DecayingVars\nGeophysicalFlows.MultiLayerQG.ForcedVars\nGeophysicalFlows.MultiLayerQG.StochasticForcedVars","category":"page"},{"location":"lib/types/#GeophysicalFlows.MultiLayerQG.Params","page":"Private types","title":"GeophysicalFlows.MultiLayerQG.Params","text":"Params{T, Aphys3D, Aphys2D, Aphys1D, Atrans4D, Trfft}(nlayers, g, f₀, β, ρ, H, U, eta, μ, ν, nν, calcFq!, g′, Qx, Qy, S, S⁻¹, rfftplan)\n\nA struct containing the parameters for the MultiLayerQG problem. Included are:\n\nnlayers::Int64\nnumber of fluid layers\ng::Any\ngravitational constant\nf₀::Any\nconstant planetary vorticity\nβ::Any\nplanetary vorticity y-gradient\nρ::Any\narray with density of each fluid layer\nH::Any\narray with rest height of each fluid layer\nU::Any\narray with imposed constant zonal flow U(y) in each fluid layer\neta::Any\narray containing topographic PV\nμ::Any\nlinear bottom drag coefficient\nν::Any\nsmall-scale (hyper)-viscosity coefficient\nnν::Int64\n(hyper)-viscosity order, nν 1\ncalcFq!::Function\nfunction that calculates the Fourier transform of the forcing, F\ng′::Any\narray with the reduced gravity constants for each fluid interface\nQx::Any\narray containing x-gradient of PV due to eta in each fluid layer\nQy::Any\narray containing y-gradient of PV due to β, U, and eta in each fluid layer\nS::Any\narray containing coeffients for getting PV from streamfunction\nS⁻¹::Any\narray containing coeffients for inverting PV to streamfunction\nrfftplan::Any\nrfft plan for FFTs\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.MultiLayerQG.SingleLayerParams","page":"Private types","title":"GeophysicalFlows.MultiLayerQG.SingleLayerParams","text":"SingleLayerParams{T, Aphys3D, Aphys2D, Trfft}(β, U, eta, μ, ν, nν, calcFq!, Qx, Qy, rfftplan)\n\nA struct containing the parameters for the SingleLayerQG problem. Included are:\n\nβ::Any\nplanetary vorticity y-gradient\nU::Any\narray with imposed constant zonal flow U(y)\neta::Any\narray containing topographic PV\nμ::Any\nlinear drag coefficient\nν::Any\nsmall-scale (hyper)-viscosity coefficient\nnν::Int64\n(hyper)-viscosity order, nν 1\ncalcFq!::Function\nfunction that calculates the Fourier transform of the forcing, F\nQx::Any\narray containing x-gradient of PV due to eta\nQy::Any\narray containing y-gradient of PV due to β, U, and eta\nrfftplan::Any\nrfft plan for FFTs\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.MultiLayerQG.Vars","page":"Private types","title":"GeophysicalFlows.MultiLayerQG.Vars","text":"Vars{Aphys, Atrans, F, P}(q, ψ, u, v, qh, , ψh, uh, vh, Fh, prevsol)\n\nThe variables for MultiLayer QG:\n\nq\nrelative vorticity + vortex stretching\nψ\nstreamfunction\nu\nx-component of velocity\nv\ny-component of velocity\nqh\nFourier transform of relative vorticity + vortex stretching\nψh\nFourier transform of streamfunction\nuh\nFourier transform of x-component of velocity\nvh\nFourier transform of y-component of velocity\nFqh\nFourier transform of forcing\nprevsol\nsol at previous time-step\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.MultiLayerQG.DecayingVars","page":"Private types","title":"GeophysicalFlows.MultiLayerQG.DecayingVars","text":"DecayingVars(dev, grid, params)\n\nReturn the vars for unforced multi-layer QG problem with grid and params.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.MultiLayerQG.ForcedVars","page":"Private types","title":"GeophysicalFlows.MultiLayerQG.ForcedVars","text":"ForcedVars(dev, grid, params)\n\nReturn the vars for forced multi-layer QG problem with grid and params.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.MultiLayerQG.StochasticForcedVars","page":"Private types","title":"GeophysicalFlows.MultiLayerQG.StochasticForcedVars","text":"StochasticForcedVars(dev, rid, params)\n\nReturn the vars for forced multi-layer QG problem with grid and params.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#SurfaceQG","page":"Private types","title":"SurfaceQG","text":"","category":"section"},{"location":"lib/types/","page":"Private types","title":"Private types","text":"GeophysicalFlows.SurfaceQG.Params\nGeophysicalFlows.SurfaceQG.Vars\nGeophysicalFlows.SurfaceQG.DecayingVars\nGeophysicalFlows.SurfaceQG.ForcedVars\nGeophysicalFlows.SurfaceQG.StochasticForcedVars","category":"page"},{"location":"lib/types/#GeophysicalFlows.SurfaceQG.Params","page":"Private types","title":"GeophysicalFlows.SurfaceQG.Params","text":"Params{T}(ν, nν, calcF!)\n\nA struct containing the parameters for Surface QG dynamics. Included are:\n\nν::Any\nbuoyancy (hyper)-viscosity coefficient\nnν::Int64\nbuoyancy (hyper)-viscosity order\ncalcF!::Function\nfunction that calculates the Fourier transform of the forcing, F\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.SurfaceQG.Vars","page":"Private types","title":"GeophysicalFlows.SurfaceQG.Vars","text":"Vars{Aphys, Atrans, F, P}(b, u, v, bh, uh, vh, Fh, prevsol)\n\nThe variables for surface QG problem:\n\nb\nbuoyancy\nu\nx-component of velocity\nv\ny-component of velocity\nbh\nFourier transform of buoyancy\nuh\nFourier transform of x-component of velocity\nvh\nFourier transform of y-component of velocity\nFh\nFourier transform of forcing\nprevsol\nsol at previous time-step\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.SurfaceQG.DecayingVars","page":"Private types","title":"GeophysicalFlows.SurfaceQG.DecayingVars","text":"DecayingVars(dev, grid)\n\nReturn the vars for unforced surface QG dynamics on device dev and with grid.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.SurfaceQG.ForcedVars","page":"Private types","title":"GeophysicalFlows.SurfaceQG.ForcedVars","text":"ForcedVars(dev, grid)\n\nReturn the vars for forced surface QG dynamics on device dev and with grid.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.SurfaceQG.StochasticForcedVars","page":"Private types","title":"GeophysicalFlows.SurfaceQG.StochasticForcedVars","text":"StochasticForcedVars(dev, grid)\n\nReturn the vars for stochastically forced surface QG dynamics on device dev and with grid.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#BarotropicQGQL","page":"Private types","title":"BarotropicQGQL","text":"","category":"section"},{"location":"lib/types/","page":"Private types","title":"Private types","text":"GeophysicalFlows.BarotropicQGQL.Params\nGeophysicalFlows.BarotropicQGQL.Vars\nGeophysicalFlows.BarotropicQGQL.DecayingVars\nGeophysicalFlows.BarotropicQGQL.ForcedVars\nGeophysicalFlows.BarotropicQGQL.StochasticForcedVars","category":"page"},{"location":"lib/types/#GeophysicalFlows.BarotropicQGQL.Params","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.Params","text":"Params{T, Aphys, Atrans}(β, eta, etah, μ, ν, nν, calcF!)\n\nA struct containing the parameters for a barotropic QL QG problem. Included are:\n\nβ::Any\nplanetary vorticity y-gradient\neta::Any\ntopographic potential vorticity\netah::Any\nFourier transform of topographic potential vorticity\nμ::Any\nlinear drag coefficient\nν::Any\nsmall-scale (hyper)-viscosity coefficient\nnν::Int64\n(hyper)-viscosity order, nν 1\ncalcF!::Function\nfunction that calculates the Fourier transform of the forcing, F\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.BarotropicQGQL.Vars","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.Vars","text":"Vars{Aphys, Atrans, F, P}(u, v, U, uzeta, vzeta, zeta, Zeta, psi, Psi, N, NZ, uh, vh, Uh, zetah, Zetah, psih, Psih, Fh, prevsol)\n\nThe variables for barotropic QL QG:\n\nu\nx-component of small-scale velocity\nv\ny-component of small-scale velocity\nU\nx-component of large-scale velocity\nuzeta\nsmall-scale u′ζ′\nvzeta\nsmall-scale v′ζ′\nzeta\nsmall-scale relative vorticity\nZeta\nlarge-scale relative vorticity\npsi\nsmall-scale relative vorticity\nPsi\nlarge-scale relative vorticity\nNz\nsmall-scale nonlinear term\nNZ\nlarge-scale nonlinear term\nuh\nFourier transform of x-component of small-scale velocity\nvh\nFourier transform of y-component of small-scale velocity\nUh\nFourier transform of x-component of large-scale velocity\nzetah\nFourier transform of small-scale relative vorticity\nZetah\nFourier transform of large-scale relative vorticity\npsih\nFourier transform of small-scale relative vorticity\nPsih\nFourier transform of large-scale relative vorticity\nFh\nFourier transform of forcing\nprevsol\nsol at previous time-step\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.BarotropicQGQL.DecayingVars","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.DecayingVars","text":"DecayingVars(dev, grid)\n\nReturn the vars for unforced two-dimensional quasi-linear barotropic QG problem on device dev  and with grid.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.BarotropicQGQL.ForcedVars","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.ForcedVars","text":"ForcedVars(dev, grid)\n\nReturn the vars for forced two-dimensional quasi-linear barotropic QG problem on device  dev and with grid.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#GeophysicalFlows.BarotropicQGQL.StochasticForcedVars","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.StochasticForcedVars","text":"StochasticForcedVars(dev, grid)\n\nReturn the vars for stochastically forced two-dimensional quasi-linear barotropic QG problem  on device dev and with grid.\n\n\n\n\n\n","category":"type"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/singlelayerqg_betadecay.jl\"","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Decaying-barotropic-QG-beta-plane-turbulence","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"This example can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"An example of decaying barotropic quasi-geostrophic turbulence on a beta plane.","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Install-dependencies","page":"Decaying barotropic QG beta-plane turbulence","title":"Install dependencies","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"using Pkg\npkg\"add GeophysicalFlows, Plots, Printf, Statistics, Random\"","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Let's-begin","page":"Decaying barotropic QG beta-plane turbulence","title":"Let's begin","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"Let's load GeophysicalFlows.jl and some other needed packages.","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"using GeophysicalFlows, Plots, Printf, Random\n\nusing Statistics: mean","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Choosing-a-device:-CPU-or-GPU","page":"Decaying barotropic QG beta-plane turbulence","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Numerical-parameters-and-time-stepping-parameters","page":"Decaying barotropic QG beta-plane turbulence","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"      n = 128            # 2D resolution: n² grid points\nstepper = \"FilteredRK4\"  # timestepper\n     dt = 0.04           # timestep\n nsteps = 2000           # total number of time-steps\n nsubs  = 20             # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Physical-parameters","page":"Decaying barotropic QG beta-plane turbulence","title":"Physical parameters","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"L = 2π        # domain size\nβ = 10.0      # planetary PV gradient\nμ = 0.0       # bottom drag\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Problem-setup","page":"Decaying barotropic QG beta-plane turbulence","title":"Problem setup","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"We initialize a Problem by providing a set of keyword arguments. Not providing a viscosity coefficient ν leads to the module's default value: ν=0. In this example numerical instability due to accumulation of enstrophy at high wavenumbers is taken care with the FilteredTimestepper we picked. Thus, we choose not to do any dealiasing by providing aliased_fraction=0.","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"prob = SingleLayerQG.Problem(dev; nx=n, Lx=L, β=β, μ=μ,\n                                  dt=dt, stepper=stepper, aliased_fraction=0)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"and define some shortcuts","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"sol, clock, vars, params, grid = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx, y = grid.x, grid.y\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Setting-initial-conditions","page":"Decaying barotropic QG beta-plane turbulence","title":"Setting initial conditions","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"Our initial condition consist of a flow that has power only at wavenumbers with 6  fracL2pi sqrtk_x^2 + k_y^2  10 and initial energy E_0. ArrayType() function returns the array type appropriate for the device, i.e., Array for dev = CPU() and CuArray for dev = GPU().","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"E₀ = 0.08 # energy of initial condition\n\nK = @. sqrt(grid.Krsq)                          # a 2D array with the total wavenumber\n\nRandom.seed!(1234)\nq₀h = ArrayType(dev)(randn(Complex{eltype(grid)}, size(sol)))\n@. q₀h = ifelse(K < 6  * 2π/L, 0, q₀h)\n@. q₀h = ifelse(K > 10 * 2π/L, 0, q₀h)\n@. q₀h[1, :] = 0    # remove any power from zonal wavenumber k=0\nq₀h *= sqrt(E₀ / SingleLayerQG.energy(q₀h, vars, params, grid)) # normalize q₀ to have energy E₀\nq₀ = irfft(q₀h, grid.nx)\n\nSingleLayerQG.set_q!(prob, q₀)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"Let's plot the initial vorticity and streamfunction. Note that when plotting, we decorate the variable to be plotted with Array() to make sure it is brought back on the CPU when vars live on the GPU.","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"p1 = heatmap(x, y, Array(vars.q'),\n         aspectratio = 1,\n              c = :balance,\n           clim = (-12, 12),\n          xlims = (-grid.Lx/2, grid.Lx/2),\n          ylims = (-grid.Ly/2, grid.Ly/2),\n         xticks = -3:3,\n         yticks = -3:3,\n         xlabel = \"x\",\n         ylabel = \"y\",\n          title = \"initial vorticity ∂v/∂x-∂u/∂y\",\n     framestyle = :box)\n\np2 = contourf(x, y, Array(vars.ψ'),\n        aspectratio = 1,\n             c = :viridis,\n        levels = range(-0.7, stop=0.7, length=20),\n          clim = (-0.35, 0.35),\n         xlims = (-grid.Lx/2, grid.Lx/2),\n         ylims = (-grid.Ly/2, grid.Ly/2),\n        xticks = -3:3,\n        yticks = -3:3,\n        xlabel = \"x\",\n        ylabel = \"y\",\n         title = \"initial streamfunction ψ\",\n    framestyle = :box)\n\nlayout = @layout Plots.grid(1, 2)\np = plot(p1, p2, layout = layout, size = (800, 360))","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Diagnostics","page":"Decaying barotropic QG beta-plane turbulence","title":"Diagnostics","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"Create Diagnostics – energy and enstrophy functions are imported at the top.","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"E = Diagnostic(SingleLayerQG.energy, prob; nsteps=nsteps)\nZ = Diagnostic(SingleLayerQG.enstrophy, prob; nsteps=nsteps)\ndiags = [E, Z] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Output","page":"Decaying barotropic QG beta-plane turbulence","title":"Output","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"filepath = \".\"\nplotpath = \"./plots_decayingbetaturb\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"decayingbetaturb.jld2\")\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"Do some basic file management,","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"and then create Output.","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nout = Output(prob, filename, (:sol, get_sol))\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Visualizing-the-simulation","page":"Decaying barotropic QG beta-plane turbulence","title":"Visualizing the simulation","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"We define a function that plots the vorticity and streamfunction and their corresponding zonal mean structure.","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"function plot_output(prob)\n  q = Array(prob.vars.q)\n  ψ = Array(prob.vars.ψ)\n  q̄ = Array(mean(q, dims=1)')\n  ū = Array(mean(prob.vars.u, dims=1)')\n\n  pq = heatmap(x, y, q',\n       aspectratio = 1,\n            legend = false,\n                 c = :balance,\n              clim = (-12, 12),\n             xlims = (-grid.Lx/2, grid.Lx/2),\n             ylims = (-grid.Ly/2, grid.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"vorticity ∂v/∂x-∂u/∂y\",\n        framestyle = :box)\n\n  pψ = contourf(x, y, ψ',\n       aspectratio = 1,\n            legend = false,\n                 c = :viridis,\n            levels = range(-0.7, stop=0.7, length=20),\n              clim = (-0.35, 0.35),\n             xlims = (-grid.Lx/2, grid.Lx/2),\n             ylims = (-grid.Ly/2, grid.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"streamfunction ψ\",\n        framestyle = :box)\n\n  pqm = plot(q̄, y,\n            legend = false,\n         linewidth = 2,\n             alpha = 0.7,\n            yticks = -3:3,\n             xlims = (-2.2, 2.2),\n            xlabel = \"zonal mean q\",\n            ylabel = \"y\")\n  plot!(pqm, 0*y, y, linestyle=:dash, linecolor=:black)\n\n  pum = plot(ū, y,\n            legend = false,\n         linewidth = 2,\n             alpha = 0.7,\n            yticks = -3:3,\n             xlims = (-0.55, 0.55),\n            xlabel = \"zonal mean u\",\n            ylabel = \"y\")\n  plot!(pum, 0*y, y, linestyle=:dash, linecolor=:black)\n\n  layout = @layout Plots.grid(2, 2)\n  p = plot(pq, pqm, pψ, pum, layout = layout, size = (800, 720))\n\n  return p\nend\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Time-stepping-the-Problem-forward","page":"Decaying barotropic QG beta-plane turbulence","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"We time-step the Problem forward in time.","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"startwalltime = time()\n\np = plot_output(prob)\n\nanim = @animate for j = 0:round(Int, nsteps/nsubs)\n\n  if j % round(Int, nsteps/nsubs / 4) == 0\n    cfl = clock.dt * maximum([maximum(vars.u) / grid.dx, maximum(vars.v) / grid.dy])\n\n    log = @sprintf(\"step: %04d, t: %d, cfl: %.2f, E: %.4f, Q: %.4f, walltime: %.2f min\",\n      clock.step, clock.t, cfl, E.data[E.i], Z.data[Z.i], (time()-startwalltime)/60)\n\n    println(log)\n  end\n\n  p[1][1][:z] = Array(vars.q)\n  p[1][:title] = \"vorticity, t=\"*@sprintf(\"%.2f\", clock.t)\n  p[3][1][:z] = Array(vars.ψ)\n  p[2][1][:x] = Array(mean(vars.q, dims=1)')\n  p[4][1][:x] = Array(mean(vars.u, dims=1)')\n\n  stepforward!(prob, diags, nsubs)\n  SingleLayerQG.updatevars!(prob)\n\nend\n\nmp4(anim, \"singlelayerqg_betadecay.mp4\", fps=8)","category":"page"},{"location":"literated/singlelayerqg_betadecay/#Save","page":"Decaying barotropic QG beta-plane turbulence","title":"Save","text":"","category":"section"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"Finally, we can save, e.g., the last snapshot via","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), clock.step)\nsavefig(savename)","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"","category":"page"},{"location":"literated/singlelayerqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"modules/barotropicqgql/#BarotropicQGQL","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"","category":"section"},{"location":"modules/barotropicqgql/#Basic-Equations","page":"BarotropicQGQL","title":"Basic Equations","text":"","category":"section"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"This module solves the quasi-linear quasi-geostrophic barotropic vorticity equation on a beta  plane of variable fluid depth H - h(x y). Quasi-linear refers to the dynamics that neglects  the eddy–eddy interactions in the eddy evolution equation after an eddy–mean flow decomposition,  e.g., ","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"phi(x y t) = overlinephi(y t) + phi(x y t) ","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"where overline above denotes a zonal mean, overlinephi(y t) = int phi(x y t)  𝖽x  L_x, and prime denotes deviations from the zonal mean. This approximation is used in many process-model studies of zonation, e.g., ","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"Farrell, B. F. and Ioannou, P. J. (2003). Structural stability of turbulent jets. J. Atmos. Sci., 60, 2101-2118.\nSrinivasan, K. and Young, W. R. (2012). Zonostrophic instability. J. Atmos. Sci., 69 (5), 1633-1656.\nConstantinou, N. C., Farrell, B. F., and Ioannou, P. J. (2014). Emergence and equilibration of jets in beta-plane turbulence: applications of Stochastic Structural Stability Theory. J. Atmos. Sci., 71 (5), 1818-1842.","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"As in the SingleLayerQG module, the flow is obtained through a  streamfunction psi as (u v) = (-partial_y psi partial_x psi). All flow fields  can be obtained from the quasi-geostrophic potential vorticity (QGPV). Here, the QGPV is","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"underbracef_0 + beta y_textplanetary PV + underbracepartial_x v\n\t- partial_y u_textrelative vorticity + underbracefracf_0 hH_texttopographic PV ","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"The dynamical variable is the component of the vorticity of the flow normal to the plane of  motion, zeta equiv partial_x v - partial_y u = nabla^2 psi. Also, we denote the  topographic PV with eta equiv f_0 h  H. After we apply the eddy-mean flow decomposition  above, the QGPV dynamics are:","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"beginaligned\n\tpartial_t overlinezeta + mathsfJ(overlinepsi overlinezeta + overlineeta) + overlinemathsfJ(psi zeta + eta)  = underbrace- leftmu + nu(-1)^n_nu nabla^2n_nu\n\tright overlinezeta _textrmdissipation  \n\tpartial_t zeta  + mathsfJ(psi overlinezeta + overlineeta) + mathsfJ(overlinepsi zeta + eta) +  underbracemathsfJ(psi zeta + eta) - overlinemathsfJ(psi zeta + eta)_textrmEENL + beta partial_x psi = \n\t = underbrace-leftmu + nu(-1)^n_nu nabla^2n_nu right zeta_textrmdissipation + F \nendaligned","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"where mathsfJ(a b) = (partial_x a)(partial_y b) - (partial_y a)(partial_x b). On  the right hand side, F(x y t) is forcing (which is assumed to have zero zonal mean,  overlineF = 0), mu is linear drag, and nu is hyperviscosity. Plain old  viscosity corresponds to n_nu = 1.","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"Quasi-linear dynamics neglects the term eddy-eddy nonlinearity (EENL) term above.","category":"page"},{"location":"modules/barotropicqgql/#Implementation","page":"BarotropicQGQL","title":"Implementation","text":"","category":"section"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"The equation is time-stepped forward in Fourier space:","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"partial_t widehatzeta = - widehatmathsfJ(psi zeta + eta)^textrmQL + beta fraci k_x𝐤^2 widehatzeta - left ( mu + nu 𝐤^2n_nu right ) widehatzeta + widehatF ","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"The state variable sol is the Fourier transform of vorticity, ζh.","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"The Jacobian is computed in the conservative form: mathsfJ(f g) = partial_y   (partial_x f) g - partial_x  (partial_y f) g. The superscript QL on the Jacobian term  above denotes that triad interactions that correspond to the EENL term are removed.","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"The linear operator is constructed in Equation","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"GeophysicalFlows.BarotropicQGQL.Equation","category":"page"},{"location":"modules/barotropicqgql/#GeophysicalFlows.BarotropicQGQL.Equation","page":"BarotropicQGQL","title":"GeophysicalFlows.BarotropicQGQL.Equation","text":"Equation(params, grid)\n\nReturn the equation for two-dimensional barotropic QG QL problem with parameters params and  on grid. Linear operator L includes bottom drag μ, (hyper)-viscosity of order n_ν with coefficient ν and the β term:\n\nL = - μ - ν 𝐤^2 n_ν + i β k_x  𝐤² \n\nNonlinear term is computed via calcN! function.\n\n\n\n\n\n","category":"function"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"and the nonlinear terms are computed via","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"GeophysicalFlows.BarotropicQGQL.calcN!","category":"page"},{"location":"modules/barotropicqgql/#GeophysicalFlows.BarotropicQGQL.calcN!","page":"BarotropicQGQL","title":"GeophysicalFlows.BarotropicQGQL.calcN!","text":"calcN!(N, sol, t, clock, vars, params, grid)\n\nCalculate the nonlinear term, that is the advection term and the forcing,\n\nN = - widehat𝖩(ψ ζ + η)^mathrmQL + F \n\n\n\n\n\n","category":"function"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"which in turn calls calcN_advection!  and addforcing!.","category":"page"},{"location":"modules/barotropicqgql/#Parameters-and-Variables","page":"BarotropicQGQL","title":"Parameters and Variables","text":"","category":"section"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"All required parameters are included inside Params and all module variables are included inside Vars.","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"For decaying case (no forcing, F = 0), vars can be constructed with DecayingVars.  For the forced case (F ne 0) the vars struct is with ForcedVars or StochasticForcedVars.","category":"page"},{"location":"modules/barotropicqgql/#Helper-functions","page":"BarotropicQGQL","title":"Helper functions","text":"","category":"section"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"GeophysicalFlows.BarotropicQGQL.updatevars!\nGeophysicalFlows.BarotropicQGQL.set_zeta!","category":"page"},{"location":"modules/barotropicqgql/#GeophysicalFlows.BarotropicQGQL.updatevars!","page":"BarotropicQGQL","title":"GeophysicalFlows.BarotropicQGQL.updatevars!","text":"updatevars!(sol, vars, params, grid)\nupdatevars!(prob)\n\nUpdate the vars of a problem prob that has grid and params with the solution in sol.\n\n\n\n\n\n","category":"function"},{"location":"modules/barotropicqgql/#GeophysicalFlows.BarotropicQGQL.set_zeta!","page":"BarotropicQGQL","title":"GeophysicalFlows.BarotropicQGQL.set_zeta!","text":"set_zeta!(prob, zeta)\nset_zeta!(sol, vars, grid, zeta)\n\nSet the solution sol as the transform of zeta and update variables vars on the grid.\n\n\n\n\n\n","category":"function"},{"location":"modules/barotropicqgql/#Diagnostics","page":"BarotropicQGQL","title":"Diagnostics","text":"","category":"section"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"The kinetic energy of the fluid is obtained via:","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"GeophysicalFlows.BarotropicQGQL.energy","category":"page"},{"location":"modules/barotropicqgql/#GeophysicalFlows.BarotropicQGQL.energy","page":"BarotropicQGQL","title":"GeophysicalFlows.BarotropicQGQL.energy","text":"energy(sol, grid)\nenergy(prob)\n\nReturn the domain-averaged kinetic energy of sol.\n\n\n\n\n\n","category":"function"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"while the enstrophy via:","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"GeophysicalFlows.BarotropicQGQL.enstrophy","category":"page"},{"location":"modules/barotropicqgql/#GeophysicalFlows.BarotropicQGQL.enstrophy","page":"BarotropicQGQL","title":"GeophysicalFlows.BarotropicQGQL.enstrophy","text":"enstrophy(sol, grid, vars)\nenstrophy(prob)\n\nReturn the domain-averaged enstrophy of sol.\n\n\n\n\n\n","category":"function"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"Other diagnostic include: dissipation,  drag, and work.","category":"page"},{"location":"modules/barotropicqgql/#Examples","page":"BarotropicQGQL","title":"Examples","text":"","category":"section"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL","title":"BarotropicQGQL","text":"examples/barotropicqgql_betaforced.jl: A script that simulates forced-dissipative quasi-linear quasi-geostrophic flow on a beta plane demonstrating zonation. The forcing is temporally delta-correlated and its spatial structure is isotropic with power in a narrow annulus of total radius k_f in wavenumber space. This example demonstrates that the anisotropic inverse energy cascade is not required for zonation.","category":"page"},{"location":"modules/twodnavierstokes/#TwoDNavierStokes","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"","category":"section"},{"location":"modules/twodnavierstokes/#Basic-Equations","page":"TwoDNavierStokes","title":"Basic Equations","text":"","category":"section"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"This module solves two-dimensional incompressible Navier-Stokes equations using the  vorticity-streamfunction formulation. The flow bmu = (u v) is obtained through a  streamfunction psi as (u v) = (-partial_y psi partial_x psi). The only non-zero  component of vorticity is that normal to the plane of motion,  partial_x v - partial_y u = nabla^2 psi. The module solves the two-dimensional  vorticity equation:","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"partial_t zeta + mathsfJ(psi zeta) = underbrace-left  mu (-nabla^2)^n_mu\n+ nu (-nabla^2)^n_nu right  zeta_textrmdissipation + F ","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"where mathsfJ(psi zeta) = (partial_x psi)(partial_y zeta) - (partial_y psi)(partial_x zeta)  is the two-dimensional Jacobian and F(x y t) is forcing. The Jacobian term is the advection of relative vorticity, mathsfJ(ψ ζ) = bmu cdot nabla zeta. Both ν and μ  terms are viscosities; typically the former is chosen to act at small scales (n_ν  1),  while the latter at large scales (n_ν  0). Plain old viscocity corresponds to n_ν=1  while n_μ=0 corresponds to linear drag. Values of n_ν  2 or n_μ  -1 are referred  to as hyper- or hypo-viscosities, respectively.","category":"page"},{"location":"modules/twodnavierstokes/#Implementation","page":"TwoDNavierStokes","title":"Implementation","text":"","category":"section"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"The equation is time-stepped forward in Fourier space:","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"partial_t widehatzeta = - widehatmathsfJ(psi zeta) - left ( mu 𝐤^2n_mu\n+ nu 𝐤^2n_nu right ) widehatzeta + widehatF ","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"The state variable sol is the Fourier transform of vorticity, ζh.","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"The Jacobian is computed in the conservative form: mathsfJ(a b) =  partial_y (partial_x a) b - partial_x(partial_y a) b.","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"The linear operator is constructed in Equation","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"GeophysicalFlows.TwoDNavierStokes.Equation","category":"page"},{"location":"modules/twodnavierstokes/#GeophysicalFlows.TwoDNavierStokes.Equation","page":"TwoDNavierStokes","title":"GeophysicalFlows.TwoDNavierStokes.Equation","text":"Equation(params, grid)\n\nReturn the equation for two-dimensional Navier-Stokes with params and grid. The linear operator L includes (hyper)-viscosity of order n_ν with coefficient ν and  hypo-viscocity of order n_μ with coefficient μ,\n\nL = - ν 𝐤^2 n_ν - μ 𝐤^2 n_μ \n\nPlain old viscocity corresponds to n_ν=1 while n_μ=0 corresponds to linear drag.\n\nThe nonlinear term is computed via the function calcN!.\n\n\n\n\n\n","category":"function"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"The nonlinear terms are computed via","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"GeophysicalFlows.TwoDNavierStokes.calcN!","category":"page"},{"location":"modules/twodnavierstokes/#GeophysicalFlows.TwoDNavierStokes.calcN!","page":"TwoDNavierStokes","title":"GeophysicalFlows.TwoDNavierStokes.calcN!","text":"calcN!(N, sol, t, clock, vars, params, grid)\n\nCalculate the nonlinear term, that is the advection term and the forcing,\n\nN = - widehat𝖩(ψ ζ) + F \n\n\n\n\n\n","category":"function"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"which in turn calls calcN_advection!  and addforcing!.","category":"page"},{"location":"modules/twodnavierstokes/#Parameters-and-Variables","page":"TwoDNavierStokes","title":"Parameters and Variables","text":"","category":"section"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"All required parameters are included inside Params and all module variables are included inside Vars.","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"For decaying case (no forcing, F=0), vars can be constructed with Vars.  For the forced case (F ne 0) the vars struct is with ForcedVars or StochasticForcedVars.","category":"page"},{"location":"modules/twodnavierstokes/#Helper-functions","page":"TwoDNavierStokes","title":"Helper functions","text":"","category":"section"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"Some helper functions included in the module are:","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"GeophysicalFlows.TwoDNavierStokes.updatevars!\nGeophysicalFlows.TwoDNavierStokes.set_ζ!","category":"page"},{"location":"modules/twodnavierstokes/#GeophysicalFlows.TwoDNavierStokes.updatevars!","page":"TwoDNavierStokes","title":"GeophysicalFlows.TwoDNavierStokes.updatevars!","text":"updatevars!(prob)\n\nUpdate variables in vars with solution in sol.\n\n\n\n\n\n","category":"function"},{"location":"modules/twodnavierstokes/#GeophysicalFlows.TwoDNavierStokes.set_ζ!","page":"TwoDNavierStokes","title":"GeophysicalFlows.TwoDNavierStokes.set_ζ!","text":"set_ζ!(prob, ζ)\n\nSet the solution sol as the transform of ζ and then update variables in vars.\n\n\n\n\n\n","category":"function"},{"location":"modules/twodnavierstokes/#Diagnostics","page":"TwoDNavierStokes","title":"Diagnostics","text":"","category":"section"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"Some useful diagnostics are:","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"GeophysicalFlows.TwoDNavierStokes.energy\nGeophysicalFlows.TwoDNavierStokes.enstrophy","category":"page"},{"location":"modules/twodnavierstokes/#GeophysicalFlows.TwoDNavierStokes.energy","page":"TwoDNavierStokes","title":"GeophysicalFlows.TwoDNavierStokes.energy","text":"energy(prob)\n\nReturn the domain-averaged kinetic energy. Since u² + v² = bf  ψ², the domain-averaged  kinetic energy is\n\nint frac12 bf  ψ² frac𝖽x 𝖽yL_x L_y = sum_𝐤 frac12 𝐤² ψ² \n\n\n\n\n\n","category":"function"},{"location":"modules/twodnavierstokes/#GeophysicalFlows.TwoDNavierStokes.enstrophy","page":"TwoDNavierStokes","title":"GeophysicalFlows.TwoDNavierStokes.enstrophy","text":"enstrophy(prob)\n\nReturns the domain-averaged enstrophy,\n\nint frac12 ζ² frac𝖽x 𝖽yL_x L_y = sum_𝐤 frac12 ζ² \n\n\n\n\n\n","category":"function"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"Other diagnostic include: energy_dissipation,  energy_work,  enstrophy_dissipation, and enstrophy_work.","category":"page"},{"location":"modules/twodnavierstokes/#Examples","page":"TwoDNavierStokes","title":"Examples","text":"","category":"section"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes","title":"TwoDNavierStokes","text":"examples/twodnavierstokes_decaying.jl: A script that simulates decaying two-dimensional turbulence reproducing the results by\nMcWilliams, J. C. (1984). The emergence of isolated coherent vortices in turbulent flow. J. Fluid Mech., 146, 21-43.\nexamples/twodnavierstokes_stochasticforcing.jl: A script that simulates forced-dissipative two-dimensional turbulence with isotropic temporally delta-correlated stochastic forcing.\nexamples/twodnavierstokes_stochasticforcing_budgets.jl: A script that simulates forced-dissipative two-dimensional turbulence demonstrating how we can compute the energy and enstrophy budgets.","category":"page"},{"location":"lib/functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"lib/functions/#GeophysicalFlows","page":"Functions","title":"GeophysicalFlows","text":"","category":"section"},{"location":"lib/functions/#Exported-functions","page":"Functions","title":"Exported functions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"GeophysicalFlows.lambdipole\nGeophysicalFlows.peakedisotropicspectrum","category":"page"},{"location":"lib/functions/#GeophysicalFlows.lambdipole","page":"Functions","title":"GeophysicalFlows.lambdipole","text":"lambdipole(U, R, grid::TwoDGrid; center=(mean(grid.x), mean(grid.y))\n\nReturn the two-dimensional vorticity field of the Lamb dipole with strength U and radius R,  centered on center=(xc, yc) and on the grid. Default value for center is the center of  the domain.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.peakedisotropicspectrum","page":"Functions","title":"GeophysicalFlows.peakedisotropicspectrum","text":"peakedisotropicspectrum(grid, kpeak, E₀; mask=mask, allones=false)\n\nGenerate a random two-dimensional relative vorticity field q(x y) with Fourier spectrum  peaked around a central non-dimensional wavenumber kpeak and normalized so that its total  kinetic energy is E₀.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#TwoDNavierStokes","page":"Functions","title":"TwoDNavierStokes","text":"","category":"section"},{"location":"lib/functions/#Exported-functions-2","page":"Functions","title":"Exported functions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"GeophysicalFlows.TwoDNavierStokes.Problem\nGeophysicalFlows.TwoDNavierStokes.energy_dissipation_hyperviscosity\nGeophysicalFlows.TwoDNavierStokes.energy_dissipation_hypoviscosity\nGeophysicalFlows.TwoDNavierStokes.energy_work\nGeophysicalFlows.TwoDNavierStokes.enstrophy_dissipation_hyperviscosity\nGeophysicalFlows.TwoDNavierStokes.enstrophy_dissipation_hypoviscosity\nGeophysicalFlows.TwoDNavierStokes.enstrophy_work","category":"page"},{"location":"lib/functions/#GeophysicalFlows.TwoDNavierStokes.Problem","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.Problem","text":"Problem(dev::Device=CPU();\n            nx = 256,\n            ny = nx,\n            Lx = 2π,\n            Ly = Lx,\n             ν = 0,\n            nν = 1,\n             μ = 0,\n            nμ = 0,\n            dt = 0.01,\n       stepper = \"RK4\",\n         calcF = nothingfunction,\n    stochastic = false,\n\naliased_fraction = 1/3,                  T = Float64)\n\nConstruct a two-dimensional Navier-Stokes problem on device dev.\n\nKeyword arguments\n\n- `dev`: (required) `CPU()` or `GPU()`; computer architecture used to time-step `problem`.\n- `nx`: Number of grid points in ``x``-domain.\n- `ny`: Number of grid points in ``y``-domain.\n- `Lx`: Extent of the ``x``-domain.\n- `Ly`: Extent of the ``y``-domain.\n- `ν`: Small-scale (hyper)-viscosity coefficient.\n- `nν`: (Hyper)-viscosity order, `nν```≥ 1``\".\n- `μ`: Large-scale (hypo)-viscosity coefficient\".\n- `nμ`: (Hypo)-viscosity order, `nμ```≤ 0``.\n- `dt`: Time-step.\n- `stepper`: The extent of the ``y``-domain.\n- `calcF`: Function that calculates the Fourier transform of the forcing, ``F̂``.\n- `stochastic`: `true` or `false`; boolean denoting whether `calcF` is temporally stochastic.\n- `aliased_fraction`: the fraction of high-wavenubers that are zero-ed out by `dealias!()`.\n- `T`: `Float32` or `Float64`; floating point type used for `problem` data.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.TwoDNavierStokes.energy_dissipation_hyperviscosity","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.energy_dissipation_hyperviscosity","text":"energy_dissipation_hyperviscosity(prob, ξ, νξ)\n\nReturn the domain-averaged energy dissipation rate done by the ν (hyper)-viscosity.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.TwoDNavierStokes.energy_dissipation_hypoviscosity","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.energy_dissipation_hypoviscosity","text":"energy_dissipation_hypoviscosity(prob, ξ, νξ)\n\nReturn the domain-averaged energy dissipation rate done by the μ (hypo)-viscosity.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.TwoDNavierStokes.energy_work","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.energy_work","text":"energy_work(prob)\nenergy_work(sol, vars, grid)\n\nReturn the domain-averaged rate of work of energy by the forcing F,\n\n- int ψ F frac𝖽x 𝖽yL_x L_y = - sum_𝐤 ψ F^* \n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.TwoDNavierStokes.enstrophy_dissipation_hyperviscosity","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.enstrophy_dissipation_hyperviscosity","text":"enstrophy_dissipation_hyperviscosity(prob, ξ, νξ)\n\nReturn the domain-averaged enstrophy dissipation rate done by the ν (hyper)-viscosity.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.TwoDNavierStokes.enstrophy_dissipation_hypoviscosity","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.enstrophy_dissipation_hypoviscosity","text":"enstrophy_dissipation_hypoviscosity(prob, ξ, νξ)\n\nReturn the domain-averaged enstrophy dissipation rate done by the μ (hypo)-viscosity.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.TwoDNavierStokes.enstrophy_work","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.enstrophy_work","text":"enstrophy_work(prob)\nenstrophy_work(sol, vars, grid)\n\nReturn the domain-averaged rate of work of enstrophy by the forcing F,\n\nint ζ F frac𝖽x 𝖽yL_x L_y = sum_𝐤 ζ F^* \n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Private-functions","page":"Functions","title":"Private functions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"GeophysicalFlows.TwoDNavierStokes.calcN_advection!\nGeophysicalFlows.TwoDNavierStokes.addforcing!\nGeophysicalFlows.TwoDNavierStokes.energy_dissipation\nGeophysicalFlows.TwoDNavierStokes.enstrophy_dissipation","category":"page"},{"location":"lib/functions/#GeophysicalFlows.TwoDNavierStokes.calcN_advection!","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.calcN_advection!","text":"calcN_advection!(N, sol, t, clock, vars, params, grid)\n\nCalculate the Fourier transform of the advection term, - 𝖩(ψ ζ) in conservative form,  i.e., - _x(_y ψ)ζ - _y(_x ψ)ζ and store it in N:\n\nN = - widehat𝖩(ψ ζ) = - i k_x widehatu ζ - i k_y widehatv ζ \n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.TwoDNavierStokes.addforcing!","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.addforcing!","text":"addforcing!(N, sol, t, clock, vars, params, grid)\n\nWhen the problem includes forcing, calculate the forcing term F and add it to the  nonlinear term N.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.TwoDNavierStokes.energy_dissipation","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.energy_dissipation","text":"energy_dissipation(prob, ξ, νξ)\n\nReturn the domain-averaged energy dissipation rate done by the viscous term,\n\n- ξ (-1)^n_ξ+1 int ψ ^2n_ξ ζ frac𝖽x 𝖽yL_x L_y = - ξ sum_𝐤 𝐤^2(n_ξ-1) ζ² \n\nwhere ξ and nξ could be either the (hyper)-viscosity coefficient ν and its order  n_ν, or the hypo-viscocity coefficient μ and its order n_μ.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.TwoDNavierStokes.enstrophy_dissipation","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.enstrophy_dissipation","text":"enstrophy_dissipation(prob, ξ, νξ)\n\nReturn the domain-averaged enstrophy dissipation rate done by the viscous term,\n\nξ (-1)^n_ξ+1 int ζ ^2n_ξ ζ frac𝖽x 𝖽yL_x L_y = - ξ sum_𝐤 𝐤^2n_ξ ζ² \n\nwhere ξ and nξ could be either the (hyper)-viscosity coefficient ν and its order  n_ν, or the hypo-viscocity coefficient μ and its order n_μ.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#SingleLayerQG","page":"Functions","title":"SingleLayerQG","text":"","category":"section"},{"location":"lib/functions/#Exported-functions-3","page":"Functions","title":"Exported functions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"GeophysicalFlows.SingleLayerQG.Problem\nGeophysicalFlows.SingleLayerQG.streamfunctionfrompv!\nGeophysicalFlows.SingleLayerQG.energy_dissipation\nGeophysicalFlows.SingleLayerQG.energy_work\nGeophysicalFlows.SingleLayerQG.energy_drag\nGeophysicalFlows.SingleLayerQG.enstrophy\nGeophysicalFlows.SingleLayerQG.enstrophy_dissipation\nGeophysicalFlows.SingleLayerQG.enstrophy_work\nGeophysicalFlows.SingleLayerQG.enstrophy_drag","category":"page"},{"location":"lib/functions/#GeophysicalFlows.SingleLayerQG.Problem","page":"Functions","title":"GeophysicalFlows.SingleLayerQG.Problem","text":"Problem(dev::Device=CPU();\n                  nx = 256,\n                  ny = nx,\n                  Lx = 2π,\n                  Ly = Lx,\n                   β = 0.0,\n  deformation_radius = Inf,\n                 eta = nothing,\n                   ν = 0.0,\n                  nν = 1,\n                   μ = 0.0,\n                  dt = 0.01,\n             stepper = \"RK4\",\n               calcF = nothingfunction,\n          stochastic = false,\n    aliased_fraction = 1/3,\n                   T = Float64)\n\nConstruct a single-layer quasi-geostrophic problem on device dev.\n\nKeyword arguments\n\n- `dev`: (required) `CPU()` or `GPU()`; computer architecture used to time-step `problem`.\n- `nx`: Number of grid points in ``x``-domain.\n- `ny`: Number of grid points in ``y``-domain.\n- `Lx`: Extent of the ``x``-domain.\n- `Ly`: Extent of the ``y``-domain.\n- `β`: Planetary vorticity ``y``-gradient.\n- `deformation_radius`: Rossby radius of deformation; set `Inf` for purely barotropic.\n- `eta`: Topographic potential vorticity.\n- `ν`: Small-scale (hyper)-viscosity coefficient.\n- `nν`: (Hyper)-viscosity order, `nν```≥ 1``\".\n- `μ`: Linear drag coefficient.\n- `dt`: Time-step.\n- `stepper`: The extent of the ``y``-domain.\n- `calcF`: Function that calculates the Fourier transform of the forcing, ``F̂``.\n- `stochastic`: `true` or `false`; boolean denoting whether `calcF` is temporally stochastic.\n- `aliased_fraction`: the fraction of high-wavenubers that are zero-ed out by `dealias!()`.\n- `T`: `Float32` or `Float64`; floating point type used for `problem` data.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.SingleLayerQG.streamfunctionfrompv!","page":"Functions","title":"GeophysicalFlows.SingleLayerQG.streamfunctionfrompv!","text":"streamfunctionfrompv!(ψh, qh, params, grid)\n\nInvert the Fourier transform of PV qh to obtain the Fourier transform of the streamfunction ψh.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.SingleLayerQG.energy_dissipation","page":"Functions","title":"GeophysicalFlows.SingleLayerQG.energy_dissipation","text":"energy_dissipation(prob)\nenergy_dissipation(sol, vars, params, grid)\n\nReturn the domain-averaged energy dissipation rate. nν must be >= 1.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.SingleLayerQG.energy_work","page":"Functions","title":"GeophysicalFlows.SingleLayerQG.energy_work","text":"energy_work(prob)\nenergy_work(sol, vars, params, grid)\n\nReturn the domain-averaged rate of work of energy by the forcing Fh.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.SingleLayerQG.energy_drag","page":"Functions","title":"GeophysicalFlows.SingleLayerQG.energy_drag","text":"energy_drag(prob)\nenergy_drag(sol, vars, params, grid)\n\nReturn the extraction of domain-averaged energy by drag μ.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.SingleLayerQG.enstrophy","page":"Functions","title":"GeophysicalFlows.SingleLayerQG.enstrophy","text":"enstrophy(prob)\nenstrophy(sol, vars, params, grid)\n\nReturn the domain-averaged enstrophy\n\nint frac12 (q + η)² frac𝖽x 𝖽yL_x L_y = sum_𝐤 frac12 q + η² \n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.SingleLayerQG.enstrophy_dissipation","page":"Functions","title":"GeophysicalFlows.SingleLayerQG.enstrophy_dissipation","text":"enstrophy_dissipation(prob)\nenstrophy_dissipation(sol, vars, params, grid)\n\nReturn the domain-averaged enstrophy dissipation rate. nν must be >= 1.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.SingleLayerQG.enstrophy_work","page":"Functions","title":"GeophysicalFlows.SingleLayerQG.enstrophy_work","text":"enstrophy_work(prob)\nenstrophy_work(sol, vars, params, grid)\n\nReturn the domain-averaged rate of work of enstrophy by the forcing Fh.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.SingleLayerQG.enstrophy_drag","page":"Functions","title":"GeophysicalFlows.SingleLayerQG.enstrophy_drag","text":"enstrophy_drag(prob)\nenstrophy_drag(sol, vars, params, grid)\n\nReturn the extraction of domain-averaged enstrophy by drag/hypodrag μ.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Private-functions-2","page":"Functions","title":"Private functions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"GeophysicalFlows.SingleLayerQG.calcN_advection!\nGeophysicalFlows.SingleLayerQG.addforcing!","category":"page"},{"location":"lib/functions/#GeophysicalFlows.SingleLayerQG.calcN_advection!","page":"Functions","title":"GeophysicalFlows.SingleLayerQG.calcN_advection!","text":"calcN_advection!(N, sol, t, clock, vars, params, grid)\n\nCalculate the Fourier transform of the advection term, - 𝖩(ψ q+η) in conservative  form, i.e., - _x(_y ψ)(q+η) - _y(_x ψ)(q+η) and store it in N:\n\nN = - widehat𝖩(ψ q+η) = - i k_x widehatu (q+η) - i k_y widehatv (q+η) \n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.SingleLayerQG.addforcing!","page":"Functions","title":"GeophysicalFlows.SingleLayerQG.addforcing!","text":"addforcing!(N, sol, t, clock, vars, params, grid)\n\nWhen the problem includes forcing, calculate the forcing term F and add it to the  nonlinear term N.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#MultiLayerQG","page":"Functions","title":"MultiLayerQG","text":"","category":"section"},{"location":"lib/functions/#Exported-functions-4","page":"Functions","title":"Exported functions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"GeophysicalFlows.MultiLayerQG.Problem\nGeophysicalFlows.MultiLayerQG.fwdtransform!\nGeophysicalFlows.MultiLayerQG.invtransform!\nGeophysicalFlows.MultiLayerQG.streamfunctionfrompv!\nGeophysicalFlows.MultiLayerQG.pvfromstreamfunction!","category":"page"},{"location":"lib/functions/#GeophysicalFlows.MultiLayerQG.Problem","page":"Functions","title":"GeophysicalFlows.MultiLayerQG.Problem","text":"Problem(nlayers::Int,\n            dev = CPU();\n             nx = 128,\n             ny = nx,\n             Lx = 2π,\n             Ly = Lx,\n             f₀ = 1.0,\n              β = 0.0,\n              g = 1.0,\n              U = zeros(nlayers),\n              H = 1/nlayers * ones(nlayers),\n              ρ = Array{Float64}(1:nlayers),\n            eta = nothing,\n              μ = 0,\n              ν = 0,\n             nν = 1,\n             dt = 0.01,\n        stepper = \"RK4\",\n         calcFq = nothingfunction,\n     stochastic = false,\n         linear = false,\n\naliased_fraction = 1/3,                   T = Float64)\n\nConstruct a multi-layer quasi-geostrophic problem with nlayers fluid layers on device dev.\n\nKeyword arguments\n\n- `nlayers`: (required) Number of fluid layers.\n- `dev`: (required) `CPU()` or `GPU()`; computer architecture used to time-step `problem`.\n- `nx`: Number of grid points in ``x``-domain.\n- `ny`: Number of grid points in ``y``-domain.\n- `Lx`: Extent of the ``x``-domain.\n- `Ly`: Extent of the ``y``-domain.\n- `f₀`: Constant planetary vorticity.\n- `β`: Planetary vorticity ``y``-gradient.\n- `g`: Gravitational accelaration constant.\n- `U`: T imposed constant zonal flow U(y) in each fluid layer.\n- `H`: Rest height of each fluid layer.\n- `ρ`: Densities of each fluid layer.\n- `eta`: Topographic potential vorticity.\n- `μ`: Linear bottom drag coefficient.\n- `ν`: Small-scale (hyper)-viscosity coefficient.\n- `nν`: (Hyper)-viscosity order, `nν```≥ 1``\".\n- `dt`: Time-step.\n- `stepper`: The extent of the ``y``-domain.\n- `calcF`: Function that calculates the Fourier transform of the forcing, ``F̂``.\n- `stochastic`: `true` or `false`; boolean denoting whether `calcF` is temporally stochastic.\n- `aliased_fraction`: the fraction of high-wavenubers that are zero-ed out by `dealias!()`.\n- `T`: `Float32` or `Float64`; floating point type used for `problem` data.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.MultiLayerQG.fwdtransform!","page":"Functions","title":"GeophysicalFlows.MultiLayerQG.fwdtransform!","text":"fwdtransform!(varh, var, params)\n\nCompute the Fourier transform of var and store it in varh.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.MultiLayerQG.invtransform!","page":"Functions","title":"GeophysicalFlows.MultiLayerQG.invtransform!","text":"invtransform!(var, varh, params)\n\nCompute the inverse Fourier transform of varh and store it in var.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.MultiLayerQG.streamfunctionfrompv!","page":"Functions","title":"GeophysicalFlows.MultiLayerQG.streamfunctionfrompv!","text":"streamfunctionfrompv!(ψh, qh, params, grid)\n\nInvert the PV to obtain the Fourier transform of the streamfunction ψh in each layer from qh using ψh = params.S⁻¹ qh.\n\n\n\n\n\nstreamfunctionfrompv!(ψh, qh, params::SingleLayerParams, grid)\n\nInvert the PV to obtain the Fourier transform of the streamfunction ψh for the special case of a single fluid layer configuration. In this case, ψ = - k² q.\n\n\n\n\n\nstreamfunctionfrompv!(ψh, qh, params::TwoLayerParams, grid)\n\nInvert the PV to obtain the Fourier transform of the streamfunction ψh for the special case of a two fluid layer configuration. In this case we have,\n\nψ₁ = - k² q₁ + (f₀²  g) (q₁  H₂ + q₂  H₁)  Δ \n\nψ₂ = - k² q₂ + (f₀²  g) (q₁  H₂ + q₂  H₁)  Δ \n\nwhere Δ = k² k² + f₀² (H₁ + H₂)  (g H₁ H₂).\n\n(Here, the PV-streamfunction relationship is hard-coded to avoid scalar operations on the GPU.)\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.MultiLayerQG.pvfromstreamfunction!","page":"Functions","title":"GeophysicalFlows.MultiLayerQG.pvfromstreamfunction!","text":"pvfromstreamfunction!(qh, ψh, params, grid)\n\nObtain the Fourier transform of the PV from the streamfunction ψh in each layer using  qh = params.S * ψh.\n\n\n\n\n\npvfromstreamfunction!(qh, ψh, params::SingleLayerParams, grid)\n\nObtain the Fourier transform of the PV from the streamfunction ψh for the special case of a single fluid layer configuration. In this case, q = - k² ψ.\n\n\n\n\n\npvfromstreamfunction!(qh, ψh, params::TwoLayerParams, grid)\n\nObtain the Fourier transform of the PV from the streamfunction ψh for the special case of a two fluid layer configuration. In this case we have,\n\nq₁ = - k² ψ₁ + f₀²  (g H₁) * (ψ₂ - ψ₁) \n\nq₂ = - k² ψ₂ + f₀²  (g H₂) * (ψ₁ - ψ₂) \n\n(Here, the PV-streamfunction relationship is hard-coded to avoid scalar operations on the GPU.)\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Private-functions-3","page":"Functions","title":"Private functions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"GeophysicalFlows.MultiLayerQG.LinearEquation\nGeophysicalFlows.MultiLayerQG.calcNlinear!\nGeophysicalFlows.MultiLayerQG.calcN_advection!\nGeophysicalFlows.MultiLayerQG.calcN_linearadvection!\nGeophysicalFlows.MultiLayerQG.addforcing!","category":"page"},{"location":"lib/functions/#GeophysicalFlows.MultiLayerQG.LinearEquation","page":"Functions","title":"GeophysicalFlows.MultiLayerQG.LinearEquation","text":"LinearEquation(dev, params, grid)\n\nReturn the equation for a multi-layer quasi-geostrophic problem with params and grid.  The linear opeartor L includes only (hyper)-viscosity and is computed via  hyperviscosity(dev, params, grid).\n\nThe nonlinear term is computed via function calcNlinear!.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.MultiLayerQG.calcNlinear!","page":"Functions","title":"GeophysicalFlows.MultiLayerQG.calcNlinear!","text":"calcNlinear!(N, sol, t, clock, vars, params, grid)\n\nCompute the nonlinear term of the linearized equations:\n\nN_j = - widehatU_j _x Q_j - widehatU_j _x q_j + widehat(_y ψ_j)(_x Q_j) \n- widehat(_x ψ_j)(_y Q_j) + δ_j n μ 𝐤^2 ψ_n + F_j \n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.MultiLayerQG.calcN_advection!","page":"Functions","title":"GeophysicalFlows.MultiLayerQG.calcN_advection!","text":"calcN_advection!(N, sol, vars, params, grid)\n\nCompute the advection term and stores it in N:\n\nN_j = - widehat𝖩(ψ_j q_j) - widehatU_j _x Q_j - widehatU_j _x q_j\n + widehat(_y ψ_j)(_x Q_j) - widehat(_x ψ_j)(_y Q_j) \n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.MultiLayerQG.calcN_linearadvection!","page":"Functions","title":"GeophysicalFlows.MultiLayerQG.calcN_linearadvection!","text":"calcN_linearadvection!(N, sol, vars, params, grid)\n\nCompute the advection term of the linearized equations and stores it in N:\n\nN_j = - widehatU_j _x Q_j - widehatU_j _x q_j\n + widehat(_y ψ_j)(_x Q_j) - widehat(_x ψ_j)(_y Q_j) \n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.MultiLayerQG.addforcing!","page":"Functions","title":"GeophysicalFlows.MultiLayerQG.addforcing!","text":"addforcing!(N, sol, t, clock, vars, params, grid)\n\nWhen the problem includes forcing, calculate the forcing term F for each layer and add  it to the nonlinear term N.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#SurfaceQG","page":"Functions","title":"SurfaceQG","text":"","category":"section"},{"location":"lib/functions/#Exported-functions-5","page":"Functions","title":"Exported functions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"GeophysicalFlows.SurfaceQG.Problem\nGeophysicalFlows.SurfaceQG.buoyancy_dissipation\nGeophysicalFlows.SurfaceQG.buoyancy_work","category":"page"},{"location":"lib/functions/#GeophysicalFlows.SurfaceQG.Problem","page":"Functions","title":"GeophysicalFlows.SurfaceQG.Problem","text":"Problem(dev::Device=CPU();\n             nx = 256,\n             Lx = 2π,\n             ny = nx,\n             Ly = Lx,\n              ν = 0,\n             nν = 1,\n             dt = 0.01,\n        stepper = \"RK4\",\n          calcF = nothingfunction,\n     stochastic = false,\n\naliased_fraction = 1/3,                   T = Float64)\n\nConstruct a surface quasi-geostrophic problem on device dev.\n\nKeyword arguments\n\n- `dev`: (required) `CPU()` or `GPU()`; computer architecture used to time-step `problem`.\n- `nx`: Number of grid points in ``x``-domain.\n- `ny`: Number of grid points in ``y``-domain.\n- `Lx`: Extent of the ``x``-domain.\n- `Ly`: Extent of the ``y``-domain.\n- `ν`: Small-scale (hyper)-viscosity coefficient.\n- `nν`: (Hyper)-viscosity order, `nν```≥ 1``\".\n- `dt`: Time-step.\n- `stepper`: The extent of the ``y``-domain.\n- `calcF`: Function that calculates the Fourier transform of the forcing, ``F̂``.\n- `stochastic`: `true` or `false`; boolean denoting whether `calcF` is temporally stochastic.\n- `aliased_fraction`: the fraction of high-wavenubers that are zero-ed out by `dealias!()`.\n- `T`: `Float32` or `Float64`; floating point type used for `problem` data.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.SurfaceQG.buoyancy_dissipation","page":"Functions","title":"GeophysicalFlows.SurfaceQG.buoyancy_dissipation","text":"buoyancy_dissipation(prob)\n\nReturn the domain-averaged dissipation rate of surface buoyancy variance due to small scale (hyper)-viscosity,\n\n2 ν (-1)^n_ν int b ^2n_ν b frac𝖽x 𝖽yL_x L_y = - 2 ν sum_𝐤 𝐤^2n_ν b² \n\nwhere ν the (hyper)-viscosity coefficient ν and nν the (hyper)-viscosity order. In SQG, this is identical to twice the rate of kinetic energy dissipation\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.SurfaceQG.buoyancy_work","page":"Functions","title":"GeophysicalFlows.SurfaceQG.buoyancy_work","text":"buoyancy_work(prob)\nbuoyancy_work(sol, vars, grid)\n\nReturn the domain-averaged rate of work of buoyancy variance by the forcing,\n\nint 2 b F frac𝖽x 𝖽yL_x L_y = sum_𝐤 2 b F^* \n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Private-functions-4","page":"Functions","title":"Private functions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"GeophysicalFlows.SurfaceQG.calcN_advection!\nGeophysicalFlows.SurfaceQG.addforcing!","category":"page"},{"location":"lib/functions/#GeophysicalFlows.SurfaceQG.calcN_advection!","page":"Functions","title":"GeophysicalFlows.SurfaceQG.calcN_advection!","text":"calcN_advection(N, sol, t, clock, vars, params, grid)\n\nCalculate the Fourier transform of the advection term, - 𝖩(ψ b) in conservative  form, i.e., - _x(_y ψ)b - _y(_x ψ)b and store it in N:\n\nN = - widehat𝖩(ψ b) = - i k_x widehatu b - i k_y widehatv b \n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.SurfaceQG.addforcing!","page":"Functions","title":"GeophysicalFlows.SurfaceQG.addforcing!","text":"addforcing!(N, sol, t, clock, vars, params, grid)\n\nWhen the problem includes forcing, calculate the forcing term F and add it to the  nonlinear term N.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#BarotropicQGQL","page":"Functions","title":"BarotropicQGQL","text":"","category":"section"},{"location":"lib/functions/#Exported-functions-6","page":"Functions","title":"Exported functions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"GeophysicalFlows.BarotropicQGQL.Problem\nGeophysicalFlows.BarotropicQGQL.dissipation\nGeophysicalFlows.BarotropicQGQL.work\nGeophysicalFlows.BarotropicQGQL.drag","category":"page"},{"location":"lib/functions/#GeophysicalFlows.BarotropicQGQL.Problem","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.Problem","text":"Problem(dev::Device=CPU();\n                  nx = 256,\n                  ny = nx,\n                  Lx = 2π,\n                  Ly = Lx,\n                   β = 0.0,\n  deformation_radius = Inf,\n                 eta = nothing,\n                   ν = 0.0,\n                  nν = 1,\n                   μ = 0.0,\n                  dt = 0.01,\n             stepper = \"RK4\",\n               calcF = nothingfunction,\n          stochastic = false,\n    aliased_fraction = 1/3,\n                   T = Float64)\n\nConstruct a quasi-linear barotropic quasi-geostrophic problem on device dev.\n\nKeyword arguments\n\n- `dev`: (required) `CPU()` or `GPU()`; computer architecture used to time-step `problem`.\n- `nx`: Number of grid points in ``x``-domain.\n- `ny`: Number of grid points in ``y``-domain.\n- `Lx`: Extent of the ``x``-domain.\n- `Ly`: Extent of the ``y``-domain.\n- `β`: Planetary vorticity ``y``-gradient.\n- `eta`: Topographic potential vorticity.\n- `ν`: Small-scale (hyper)-viscosity coefficient.\n- `nν`: (Hyper)-viscosity order, `nν```≥ 1``\".\n- `μ`: Linear drag coefficient.\n- `dt`: Time-step.\n- `stepper`: The extent of the ``y``-domain.\n- `calcF`: Function that calculates the Fourier transform of the forcing, ``F̂``.\n- `stochastic`: `true` or `false`; boolean denoting whether `calcF` is temporally stochastic.\n- `aliased_fraction`: the fraction of high-wavenubers that are zero-ed out by `dealias!()`.\n- `T`: `Float32` or `Float64`; floating point type used for `problem` data.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.BarotropicQGQL.dissipation","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.dissipation","text":"dissipation(prob)\ndissipation(sol, vars, params, grid)\n\nReturn the domain-averaged energy dissipation rate. nν must be >= 1.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.BarotropicQGQL.work","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.work","text":"work(prob)\nwork(sol, vars, params, grid)\n\nReturn the domain-averaged rate of work of energy by the forcing, params.Fh.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.BarotropicQGQL.drag","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.drag","text":"drag(prob)\ndrag(sol, vars, params, grid)\n\nReturn the extraction of domain-averaged energy by drag μ.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Private-functions-5","page":"Functions","title":"Private functions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"GeophysicalFlows.BarotropicQGQL.calcN_advection!\nGeophysicalFlows.BarotropicQGQL.addforcing!","category":"page"},{"location":"lib/functions/#GeophysicalFlows.BarotropicQGQL.calcN_advection!","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.calcN_advection!","text":"calcN_advection!(N, sol, t, clock, vars, params, grid)\n\nCalculate the Fourier transform of the advection term for quasi-linear barotropic QG dynamics.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#GeophysicalFlows.BarotropicQGQL.addforcing!","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.addforcing!","text":"addforcing!(N, sol, t, clock, vars, params, grid)\n\nWhen the problem includes forcing, calculate the forcing term F and add it to the  nonlinear term N.\n\n\n\n\n\n","category":"function"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/singlelayerqg_betaforced.jl\"","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Forced-dissipative-barotropic-QG-beta-plane-turbulence","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"This example can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"A simulation of forced-dissipative barotropic quasi-geostrophic turbulence on a beta plane. The dynamics include linear drag and stochastic excitation.","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Install-dependencies","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Install dependencies","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"using Pkg\npkg\"add GeophysicalFlows, Random, Printf, Plots, Statistics\"","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Let's-begin","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Let's begin","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Let's load GeophysicalFlows.jl and some other needed packages.","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"using GeophysicalFlows, Random, Printf, Plots\n\nusing Statistics: mean\nparsevalsum = FourierFlows.parsevalsum","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Choosing-a-device:-CPU-or-GPU","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Numerical-parameters-and-time-stepping-parameters","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"      n = 128            # 2D resolution: n² grid points\nstepper = \"FilteredRK4\"  # timestepper\n     dt = 0.05           # timestep\n nsteps = 8000           # total number of time-steps\n nsubs  = 10             # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Physical-parameters","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Physical parameters","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"L = 2π        # domain size\nβ = 10.0      # planetary PV gradient\nμ = 0.01      # bottom drag\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Forcing","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forcing","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"We force the vorticity equation with stochastic excitation that is delta-correlated in time and while spatially homogeneously and isotropically correlated. The forcing has a spectrum with power in a ring in wavenumber space of radius k_f (forcing_wavenumber) and width δ_f (forcing_bandwidth), and it injects energy per unit area and per unit time equal to varepsilon. That is, the forcing covariance spectrum is proportional to exp-(bmk - k_f)^2  (2 δ_f^2).","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"forcing_wavenumber = 14.0 * 2π/L  # the forcing wavenumber, `k_f`, for a spectrum that is a ring in wavenumber space\nforcing_bandwidth  = 1.5  * 2π/L  # the width of the forcing spectrum, `δ_f`\nε = 0.001                         # energy input rate by the forcing\n\ngrid = TwoDGrid(dev, n, L)\n\nK = @. sqrt(grid.Krsq)            # a 2D array with the total wavenumber\n\nforcing_spectrum = @. exp(-(K - forcing_wavenumber)^2 / (2 * forcing_bandwidth^2))\n@CUDA.allowscalar forcing_spectrum[grid.Krsq .== 0] .= 0 # ensure forcing has zero domain-average\n\nε0 = parsevalsum(forcing_spectrum .* grid.invKrsq / 2, grid) / (grid.Lx * grid.Ly)\n@. forcing_spectrum *= ε/ε0       # normalize forcing to inject energy at rate ε\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"We reset of the random number generator for reproducibility","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"if dev==CPU(); Random.seed!(1234); else; CUDA.seed!(1234); end\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Next we construct function calcF! that computes a forcing realization every timestep. First we make sure that if dev=GPU(), then CUDA.rand() function is called for random numbers uniformly distributed between 0 and 1.","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"random_uniform = dev==CPU() ? rand : CUDA.rand\n\nfunction calcF!(Fh, sol, t, clock, vars, params, grid)\n  Fh .= sqrt.(forcing_spectrum) .* exp.(2π * im * random_uniform(eltype(grid), size(sol))) ./ sqrt(clock.dt)\n\n  return nothing\nend\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Problem-setup","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Problem setup","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"We initialize a Problem by providing a set of keyword arguments. Not providing a viscosity coefficient ν leads to the module's default value: ν=0. In this example numerical instability due to accumulation of enstrophy in high wavenumbers is taken care with the FilteredTimestepper we picked.","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"prob = SingleLayerQG.Problem(dev; nx=n, Lx=L, β=β, μ=μ, dt=dt, stepper=stepper,\n                             calcF=calcF!, stochastic=true)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Let's define some shortcuts.","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"sol, clock, vars, params, grid = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx, y = grid.x, grid.y\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"First let's see how a forcing realization looks like. Note that when plotting, we decorate the variable to be plotted with Array() to make sure it is brought back on the CPU when vars live on the GPU.","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"calcF!(vars.Fh, sol, 0.0, clock, vars, params, grid)\n\nheatmap(x, y, Array(irfft(vars.Fh, grid.nx)'),\n     aspectratio = 1,\n               c = :balance,\n            clim = (-8, 8),\n           xlims = (-grid.Lx/2, grid.Lx/2),\n           ylims = (-grid.Ly/2, grid.Ly/2),\n          xticks = -3:3,\n          yticks = -3:3,\n          xlabel = \"x\",\n          ylabel = \"y\",\n           title = \"a forcing realization\",\n      framestyle = :box)","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Setting-initial-conditions","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Setting initial conditions","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Our initial condition is simply fluid at rest.","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"SingleLayerQG.set_q!(prob, ArrayType(dev)(zeros(grid.nx, grid.ny)))","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Diagnostics","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Diagnostics","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Create Diagnostic – energy and enstrophy are functions imported at the top.","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"E = Diagnostic(SingleLayerQG.energy, prob; nsteps=nsteps)\nZ = Diagnostic(SingleLayerQG.enstrophy, prob; nsteps=nsteps)\ndiags = [E, Z] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Output","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Output","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"filepath = \".\"\nplotpath = \"./plots_forcedbetaturb\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"forcedbetaturb.jld2\")\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Do some basic file management,","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"and then create Output.","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nget_u(prob) = irfft(im * grid.l .* grid.invKrsq .* sol, grid.nx)\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Visualizing-the-simulation","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Visualizing the simulation","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"We define a function that plots the vorticity and streamfunction fields, their corresponding zonal mean structure and timeseries of energy and enstrophy.","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"function plot_output(prob)\n  q = prob.vars.q\n  ψ = prob.vars.ψ\n  q̄ = mean(q, dims=1)'\n  ū = mean(prob.vars.u, dims=1)'\n\n  pq = heatmap(x, y, Array(q'),\n       aspectratio = 1,\n            legend = false,\n                 c = :balance,\n              clim = (-8, 8),\n             xlims = (-grid.Lx/2, grid.Lx/2),\n             ylims = (-grid.Ly/2, grid.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"vorticity ∂v/∂x-∂u/∂y\",\n        framestyle = :box)\n\n  pψ = contourf(x, y, Array(ψ'),\n            levels = -0.32:0.04:0.32,\n       aspectratio = 1,\n         linewidth = 1,\n            legend = false,\n              clim = (-0.22, 0.22),\n                 c = :viridis,\n             xlims = (-grid.Lx/2, grid.Lx/2),\n             ylims = (-grid.Ly/2, grid.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"streamfunction ψ\",\n        framestyle = :box)\n\n  pqm = plot(Array(q̄), y,\n            legend = false,\n         linewidth = 2,\n             alpha = 0.7,\n            yticks = -3:3,\n             xlims = (-3, 3),\n            xlabel = \"zonal mean q\",\n            ylabel = \"y\")\n  plot!(pqm, 0*y, y, linestyle=:dash, linecolor=:black)\n\n  pum = plot(Array(ū), y,\n            legend = false,\n         linewidth = 2,\n             alpha = 0.7,\n            yticks = -3:3,\n             xlims = (-0.5, 0.5),\n            xlabel = \"zonal mean u\",\n            ylabel = \"y\")\n  plot!(pum, 0*y, y, linestyle=:dash, linecolor=:black)\n\n  pE = plot(1,\n             label = \"energy\",\n            legend = :bottomright,\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 4.1),\n             ylims = (0, 0.05),\n            xlabel = \"μt\")\n\n  pZ = plot(1,\n             label = \"enstrophy\",\n         linecolor = :red,\n            legend = :bottomright,\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 4.1),\n             ylims = (0, 3),\n            xlabel = \"μt\")\n\n  l = @layout Plots.grid(2, 3)\n  p = plot(pq, pqm, pE, pψ, pum, pZ, layout=l, size = (1000, 600))\n\n  return p\nend\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Time-stepping-the-Problem-forward","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"We time-step the Problem forward in time.","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"startwalltime = time()\n\np = plot_output(prob)\n\nanim = @animate for j = 0:Int(nsteps / nsubs)\n\n  if j % (1000 / nsubs) == 0\n    cfl = clock.dt * maximum([maximum(vars.u) / grid.dx, maximum(vars.v) / grid.dy])\n\n    log = @sprintf(\"step: %04d, t: %d, cfl: %.2f, E: %.4f, Q: %.4f, walltime: %.2f min\",\n    clock.step, clock.t, cfl, E.data[E.i], Z.data[Z.i], (time()-startwalltime)/60)\n\n    println(log)\n  end\n\n  p[1][1][:z] = Array(vars.q)\n  p[1][:title] = \"vorticity, μt=\"*@sprintf(\"%.2f\", μ * clock.t)\n  p[4][1][:z] = Array(vars.ψ)\n  p[2][1][:x] = Array(mean(vars.q, dims=1)')\n  p[5][1][:x] = Array(mean(vars.u, dims=1)')\n  push!(p[3][1], μ * E.t[E.i], E.data[E.i])\n  push!(p[6][1], μ * Z.t[Z.i], Z.data[Z.i])\n\n  stepforward!(prob, diags, nsubs)\n  SingleLayerQG.updatevars!(prob)\nend\n\nmp4(anim, \"singlelayerqg_betaforced.mp4\", fps=18)","category":"page"},{"location":"literated/singlelayerqg_betaforced/#Save","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Save","text":"","category":"section"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Finally, we can save, e.g., the last snapshot via","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), clock.step)\nsavefig(savename)","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"","category":"page"},{"location":"literated/singlelayerqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"gpu/#GPU","page":"GPU","title":"GPU","text":"","category":"section"},{"location":"gpu/","page":"GPU","title":"GPU","text":"GPU-functionality is enabled via FourierFlows.jl. For more information on how FourierFlows.jl handled with GPUs we urge you to the corresponding FourierFlows.jl documentation section .","category":"page"},{"location":"gpu/","page":"GPU","title":"GPU","text":"All GeophysicalFlows.jl modules can be run on GPU by providing GPU() as the device (dev)  argument in the problem constructors. For example,","category":"page"},{"location":"gpu/","page":"GPU","title":"GPU","text":"julia> GeophysicalFlows.TwoDNavierStokes.Problem(GPU())\nProblem\n  ├─────────── grid: grid (on GPU)\n  ├───── parameters: params\n  ├────── variables: vars\n  ├─── state vector: sol\n  ├─────── equation: eqn\n  ├────────── clock: clock\n  └──── timestepper: RK4TimeStepper","category":"page"},{"location":"gpu/#Selecting-GPU-device","page":"GPU","title":"Selecting GPU device","text":"","category":"section"},{"location":"gpu/","page":"GPU","title":"GPU","text":"FourierFlows.jl can only utilize a single GPU. If your machine has more than one GPU available,  then using functionality within CUDA.jl package enables you can choose the GPU device that  FourierFlows.jl should use. The user is referred to the CUDA.jl Documentation; in particular, CUDA.devices and CUDA.CuDevice.","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/surfaceqg_decaying.jl\"","category":"page"},{"location":"literated/surfaceqg_decaying/#Decaying-Surface-QG-turbulence","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"This example can be run online via (Image: ). Also, it can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"A simulation of decaying surface quasi-geostrophic turbulence. We reproduce here the initial value problem for an elliptical vortex as done by Held et al. 1995, J. Fluid Mech.","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"An example of decaying barotropic quasi-geostrophic turbulence over topography.","category":"page"},{"location":"literated/surfaceqg_decaying/#Install-dependencies","page":"Decaying Surface QG turbulence","title":"Install dependencies","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"using Pkg\npkg\"add GeophysicalFlows, Plots, Printf, Random, Statistics\"","category":"page"},{"location":"literated/surfaceqg_decaying/#Let's-begin","page":"Decaying Surface QG turbulence","title":"Let's begin","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"Let's load GeophysicalFlows.jl and some other needed packages.","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"using GeophysicalFlows, Plots, Printf, Random\n\nusing Statistics: mean\nusing Random: seed!","category":"page"},{"location":"literated/surfaceqg_decaying/#Choosing-a-device:-CPU-or-GPU","page":"Decaying Surface QG turbulence","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"literated/surfaceqg_decaying/#Numerical-parameters-and-time-stepping-parameters","page":"Decaying Surface QG turbulence","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"      n = 256                       # 2D resolution = n²\nstepper = \"FilteredETDRK4\"          # timestepper\n     dt = 0.03                      # timestep\n     tf = 60                        # length of time for simulation\n nsteps = Int(tf / dt)              # total number of time-steps\n nsubs  = round(Int, nsteps/100)    # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"literated/surfaceqg_decaying/#Physical-parameters","page":"Decaying Surface QG turbulence","title":"Physical parameters","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":" L = 2π        # domain size\n ν = 1e-19     # hyper-viscosity coefficient\nnν = 4         # hyper-viscosity order\nnothing # hide","category":"page"},{"location":"literated/surfaceqg_decaying/#Problem-setup","page":"Decaying Surface QG turbulence","title":"Problem setup","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"We initialize a Problem by providing a set of keyword arguments. In this example numerical instability due to accumulation of buoyancy variance at high wavenumbers is taken care with the FilteredTimestepper we picked.","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"prob = SurfaceQG.Problem(dev; nx=n, Lx=L, dt=dt, stepper=stepper, ν=ν, nν=nν)\nnothing # hide","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"Let's define some shortcuts.","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"sol, clock, vars, params, grid = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx, y = grid.x, grid.y\nnothing # hide","category":"page"},{"location":"literated/surfaceqg_decaying/#Setting-initial-conditions","page":"Decaying Surface QG turbulence","title":"Setting initial conditions","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"We initialize the buoyancy equation with an elliptical vortex.","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"X, Y = gridpoints(grid)\nb₀ = @. exp(-(X^2 + 4*Y^2))\n\nSurfaceQG.set_b!(prob, b₀)\nnothing # hide","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"Let's plot the initial condition. Note that when plotting, we decorate the variable to be plotted with Array() to make sure it is brought back on the CPU when vars live on the GPU.","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"heatmap(x, y, Array(vars.b'),\n     aspectratio = 1,\n               c = :deep,\n            clim = (0, 1),\n           xlims = (-grid.Lx/2, grid.Lx/2),\n           ylims = (-grid.Ly/2, grid.Ly/2),\n          xticks = -3:3,\n          yticks = -3:3,\n          xlabel = \"x\",\n          ylabel = \"y\",\n           title = \"buoyancy bₛ\",\n      framestyle = :box)","category":"page"},{"location":"literated/surfaceqg_decaying/#Diagnostics","page":"Decaying Surface QG turbulence","title":"Diagnostics","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"Create Diagnostics; buoyancy_variance, kinetic_energy and buoyancy_dissipation functions were imported at the top.","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"B  = Diagnostic(SurfaceQG.buoyancy_variance, prob; nsteps=nsteps)\nKE = Diagnostic(SurfaceQG.kinetic_energy, prob; nsteps=nsteps)\nDᵇ = Diagnostic(SurfaceQG.buoyancy_dissipation, prob; nsteps=nsteps)\ndiags = [B, KE, Dᵇ] # A list of Diagnostics types passed to `stepforward!`. Diagnostics are updated every timestep.\nnothing # hidenothing # hide","category":"page"},{"location":"literated/surfaceqg_decaying/#Output","page":"Decaying Surface QG turbulence","title":"Output","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"We choose folder for outputing .jld2 files and snapshots (.png files). Define base filename so saved data can be distinguished from other runs","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"base_filename = string(\"SurfaceQG_decaying_n_\", n)","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"datapath = \"./\"\nplotpath = \"./\"\n\ndataname = joinpath(datapath, base_filename)\nplotname = joinpath(plotpath, base_filename)\nnothing # hide","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"Do some basic file management,","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"if !isdir(plotpath); mkdir(plotpath); end\nif !isdir(datapath); mkdir(datapath); end\nnothing # hide","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"and then create Output.","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nget_u(prob) = irfft(im * grid.l .* sqrt.(grid.invKrsq) .* sol, grid.nx)\nout = Output(prob, dataname, (:sol, get_sol), (:u, get_u))\nnothing # hide","category":"page"},{"location":"literated/surfaceqg_decaying/#Visualizing-the-simulation","page":"Decaying Surface QG turbulence","title":"Visualizing the simulation","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"We define a function that plots the buoyancy field and the time evolution of kinetic energy and buoyancy variance.","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"function plot_output(prob)\n  b = prob.vars.b\n\n  pb = heatmap(x, y, Array(b'),\n       aspectratio = 1,\n                 c = :deep,\n              clim = (0, 1),\n             xlims = (-grid.Lx/2, grid.Lx/2),\n             ylims = (-grid.Ly/2, grid.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"buoyancy bₛ\",\n        framestyle = :box)\n\n  pKE = plot(1,\n             label = \"kinetic energy ∫½(uₛ²+vₛ²)dxdy/L²\",\n         linewidth = 2,\n            legend = :bottomright,\n             alpha = 0.7,\n             xlims = (0, tf),\n             ylims = (0, 1e-2),\n            xlabel = \"t\")\n\n  pb² = plot(1,\n             label = \"buoyancy variance ∫bₛ²dxdy/L²\",\n         linecolor = :red,\n            legend = :bottomright,\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (0, tf),\n             ylims = (0, 2e-2),\n            xlabel = \"t\")\n\n  layout = @layout [a{0.5w} Plots.grid(2, 1)]\n  p = plot(pb, pKE, pb², layout=layout, size = (900, 500))\n\n  return p\nend\nnothing # hide","category":"page"},{"location":"literated/surfaceqg_decaying/#Time-stepping-the-Problem-forward-and-create-animation-by-updating-the-plot.","page":"Decaying Surface QG turbulence","title":"Time-stepping the Problem forward and create animation by updating the plot.","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"startwalltime = time()\n\np = plot_output(prob)\n\nanim = @animate for j = 0:round(Int, nsteps/nsubs)\n  if j % (500 / nsubs) == 0\n    cfl = clock.dt * maximum([maximum(vars.u) / grid.dx, maximum(vars.v) / grid.dy])\n\n    log1 = @sprintf(\"step: %04d, t: %.1f, cfl: %.3f, walltime: %.2f min\",\n          clock.step, clock.t, cfl, (time()-startwalltime)/60)\n\n    log2 = @sprintf(\"buoyancy variance: %.2e, buoyancy variance dissipation: %.2e\",\n              B.data[B.i], Dᵇ.data[Dᵇ.i])\n\n    println(log1)\n\n    println(log2)\n  end\n\n  p[1][1][:z] = Array(vars.b)\n  p[1][:title] = \"buoyancy, t=\" * @sprintf(\"%.2f\", clock.t)\n  push!(p[2][1], KE.t[KE.i], KE.data[KE.i])\n  push!(p[3][1], B.t[B.i], B.data[B.i])\n\n  stepforward!(prob, diags, nsubs)\n  SurfaceQG.updatevars!(prob)\nend\n\nmp4(anim, \"sqg_ellipticalvortex.mp4\", fps=14)","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"Let's see how all flow fields look like at the end of the simulation.","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"pu = heatmap(x, y, Array(vars.u'),\n     aspectratio = 1,\n               c = :balance,\n            clim = (-maximum(abs.(vars.u)), maximum(abs.(vars.u))),\n           xlims = (-L/2, L/2),\n           ylims = (-L/2, L/2),\n          xticks = -3:3,\n          yticks = -3:3,\n          xlabel = \"x\",\n          ylabel = \"y\",\n           title = \"uₛ(x, y, t=\" * @sprintf(\"%.2f\", clock.t) * \")\",\n      framestyle = :box)\n\npv = heatmap(x, y, Array(vars.v'),\n     aspectratio = 1,\n               c = :balance,\n            clim = (-maximum(abs.(vars.v)), maximum(abs.(vars.v))),\n           xlims = (-L/2, L/2),\n           ylims = (-L/2, L/2),\n          xticks = -3:3,\n          yticks = -3:3,\n          xlabel = \"x\",\n          ylabel = \"y\",\n           title = \"vₛ(x, y, t=\" * @sprintf(\"%.2f\", clock.t) * \")\",\n      framestyle = :box)\n\npb = heatmap(x, y, Array(vars.b'),\n     aspectratio = 1,\n               c = :deep,\n            clim = (0, 1),\n           xlims = (-L/2, L/2),\n           ylims = (-L/2, L/2),\n          xticks = -3:3,\n          yticks = -3:3,\n          xlabel = \"x\",\n          ylabel = \"y\",\n           title = \"bₛ(x, y, t=\" * @sprintf(\"%.2f\", clock.t) * \")\",\n      framestyle = :box)\n\nlayout = @layout [a{0.5h}; b{0.5w} c{0.5w}]\n\nplot_final = plot(pb, pu, pv, layout=layout, size = (800, 800))","category":"page"},{"location":"literated/surfaceqg_decaying/#Save","page":"Decaying Surface QG turbulence","title":"Save","text":"","category":"section"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"Last we can save the output by calling","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"saveoutput(out)`","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"","category":"page"},{"location":"literated/surfaceqg_decaying/","page":"Decaying Surface QG turbulence","title":"Decaying Surface QG turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#GeophysicalFlows.jl-Documentation","page":"Home","title":"GeophysicalFlows.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GeophysicalFlows.jl is a collection of modules which leverage the  FourierFlows.jl framework to provide solvers for problems in Geophysical Fluid Dynamics, on periodic domains using Fourier-based pseudospectral methods.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Examples aim to demonstrate the main functionalities of each module. Have a look at our Examples collection!","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Fourier transforms normalization\nFourier-based pseudospectral methods rely on Fourier expansions. Throughout the  documentation we denote symbols with hat, e.g., hatu, to be the Fourier transform  of u like, e.g.,u(x) = sum_k_x hatu(k_x)  e^i k_x x The convention used in the modules is that the Fourier transform of a variable, e.g., u  is denoted with uh (where the trailing h is there to imply \"hat\"). Note, however,  that uh is obtained via a FFT of u and due to different normalization factors that the  FFT algorithm uses, uh is not exactly the same as hatu above. Instead,hatu(k_x) = frac𝚞𝚑n_x e^- i k_x x_0 where n_x is the total number of grid points in x and x_0 is the left-most  point of our x-grid.Read more in the FourierFlows.jl Documentation; see  Grids section.","category":"page"},{"location":"","page":"Home","title":"Home","text":"info: Unicode\nOftentimes unicode symbols are used in modules for certain variables or parameters. For  example, ψ is commonly used to denote the  streamfunction of the flow, or ∂ is used  to denote partial differentiation. Unicode symbols can be entered in the Julia REPL by  typing, e.g., \\psi or \\partial followed by the tab key.Read more about Unicode symbols in the  Julia Documentation.","category":"page"},{"location":"#Developers","page":"Home","title":"Developers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The development of GeophysicalFlows.jl started by Navid C. Constantinou and Gregory L. Wagner during the 21st AOFD Meeting 2017. During the  course of time various people have contributed to GeophysicalFlows.jl, including  Lia Siegelman, Brodie Pearson, and André Palóczy (see the example in FourierFlows.jl).","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use GeophysicalFlows.jl in research, teaching, or other activities, we would be grateful  if you could mention GeophysicalFlows.jl and cite our paper in JOSS:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Constantinou et al., (2021). GeophysicalFlows.jl: Solvers for geophysical fluid dynamics problems in periodic domains on CPUs & GPUs. Journal of Open Source Software, 6(60), 3053, doi:10.21105/joss.03053.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The bibtex entry for the paper is:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{GeophysicalFlowsJOSS,\n  doi = {10.21105/joss.03053},\n  url = {https://doi.org/10.21105/joss.03053},\n  year = {2021},\n  publisher = {The Open Journal},\n  volume = {6},\n  number = {60},\n  pages = {3053},\n  author = {Navid C. Constantinou and Gregory LeClaire Wagner and Lia Siegelman and Brodie C. Pearson and André Palóczy},\n  title = {GeophysicalFlows.jl: Solvers for geophysical fluid dynamics problems in periodic domains on CPUs \\& GPUs},\n  journal = {Journal of Open Source Software}\n}","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/singlelayerqg_decaying_topography.jl\"","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/#Decaying-barotropic-QG-turbulence-over-topography","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"This example can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"An example of decaying barotropic quasi-geostrophic turbulence over topography.","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/#Install-dependencies","page":"Decaying barotropic QG turbulence over topography","title":"Install dependencies","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"using Pkg\npkg\"add GeophysicalFlows, Plots, Printf, Random, Statistics\"","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/#Let's-begin","page":"Decaying barotropic QG turbulence over topography","title":"Let's begin","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"Let's load GeophysicalFlows.jl and some other needed packages.","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"using GeophysicalFlows, Plots, Printf, Random\n\nusing Statistics: mean","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/#Choosing-a-device:-CPU-or-GPU","page":"Decaying barotropic QG turbulence over topography","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/#Numerical-parameters-and-time-stepping-parameters","page":"Decaying barotropic QG turbulence over topography","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"      n = 128            # 2D resolution = n²\nstepper = \"FilteredRK4\"  # timestepper\n     dt = 0.05           # timestep\n nsteps = 2000           # total number of time-steps\n nsubs  = 10             # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/#Physical-parameters","page":"Decaying barotropic QG turbulence over topography","title":"Physical parameters","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"L = 2π        # domain size\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"Define the topographic potential vorticity, eta = f_0 h(x y)H. The topography here is an elliptical mount at (x y) = (1 1), and an elliptical depression at (x y) = (-1 -1).","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"σx, σy = 0.4, 0.8\ntopographicPV(x, y) = 3exp(-(x-1)^2/(2σx^2) -(y-1)^2/(2σy^2)) - 2exp(-(x+1)^2/(2σx^2) -(y+1)^2/(2σy^2))\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/#Problem-setup","page":"Decaying barotropic QG turbulence over topography","title":"Problem setup","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"We initialize a Problem by providing a set of keyword arguments. Not providing a viscosity coefficient ν leads to the module's default value: ν=0. In this example numerical instability due to accumulation of enstrophy in high wavenumbers is taken care with the FilteredTimestepper we picked. Thus, we choose not to do any dealiasing by providing aliased_fraction=0.","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"The topophic PV is prescribed via keyword argument eta.","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"prob = SingleLayerQG.Problem(dev; nx=n, Lx=L, eta=topographicPV,\n                                  dt=dt, stepper=stepper, aliased_fraction=0)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"and define some shortcuts","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"sol, clock, vars, params, grid = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx, y = grid.x, grid.y\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"and let's plot the topographic PV. Note that when plotting, we decorate the variable to be plotted with Array() to make sure it is brought back on the CPU when the variable lives on the GPU.","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"contourf(grid.x, grid.y, Array(params.eta'),\n          aspectratio = 1,\n            linewidth = 0,\n               levels = 10,\n                    c = :balance,\n                 clim = (-3, 3),\n                xlims = (-grid.Lx/2, grid.Lx/2),\n                ylims = (-grid.Ly/2, grid.Ly/2),\n               xticks = -3:3,\n               yticks = -3:3,\n               xlabel = \"x\",\n               ylabel = \"y\",\n                title = \"topographic PV η=f₀h/H\")","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/#Setting-initial-conditions","page":"Decaying barotropic QG turbulence over topography","title":"Setting initial conditions","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"Our initial condition consist of a flow that has power only at wavenumbers with 6  fracL2pi sqrtk_x^2 + k_y^2  12 and initial energy E_0. ArrayType() function returns the array type appropriate for the device, i.e., Array for dev = CPU() and CuArray for dev = GPU().","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"E₀ = 0.04 # energy of initial condition\n\nK = @. sqrt(grid.Krsq)                             # a 2D array with the total wavenumber\n\nRandom.seed!(1234)\nqih = ArrayType(dev)(randn(Complex{eltype(grid)}, size(sol)))\n@. qih = ifelse(K < 6  * 2π/L, 0, qih)\n@. qih = ifelse(K > 12 * 2π/L, 0, qih)\nqih *= sqrt(E₀ / SingleLayerQG.energy(qih, vars, params, grid))  # normalize qi to have energy E₀\nqi = irfft(qih, grid.nx)\n\nSingleLayerQG.set_q!(prob, qi)\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"Let's plot the initial vorticity field:","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"p1 = heatmap(x, y, Array(vars.q'),\n         aspectratio = 1,\n              c = :balance,\n           clim = (-8, 8),\n          xlims = (-grid.Lx/2, grid.Lx/2),\n          ylims = (-grid.Ly/2, grid.Ly/2),\n         xticks = -3:3,\n         yticks = -3:3,\n         xlabel = \"x\",\n         ylabel = \"y\",\n          title = \"initial vorticity ∂v/∂x-∂u/∂y\",\n     framestyle = :box)\n\np2 = contourf(x, y, Array(vars.ψ'),\n        aspectratio = 1,\n             c = :viridis,\n        levels = range(-0.25, stop=0.25, length=11),\n          clim = (-0.25, 0.25),\n         xlims = (-grid.Lx/2, grid.Lx/2),\n         ylims = (-grid.Ly/2, grid.Ly/2),\n        xticks = -3:3,\n        yticks = -3:3,\n        xlabel = \"x\",\n        ylabel = \"y\",\n         title = \"initial streamfunction ψ\",\n    framestyle = :box)\n\nlayout = @layout Plots.grid(1, 2)\np = plot(p1, p2, layout=layout, size = (800, 360))","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/#Diagnostics","page":"Decaying barotropic QG turbulence over topography","title":"Diagnostics","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"Create Diagnostics – energy and enstrophy functions are imported at the top.","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"E = Diagnostic(SingleLayerQG.energy, prob; nsteps=nsteps)\nZ = Diagnostic(SingleLayerQG.enstrophy, prob; nsteps=nsteps)\ndiags = [E, Z] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/#Output","page":"Decaying barotropic QG turbulence over topography","title":"Output","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"We choose folder for outputing .jld2 files.","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"filepath = \".\"\nfilename = joinpath(filepath, \"decayingbetaturb.jld2\")\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"Do some basic file management,","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"if isfile(filename); rm(filename); end\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"and then create Output.","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nout = Output(prob, filename, (:sol, get_sol))\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/#Visualizing-the-simulation","page":"Decaying barotropic QG turbulence over topography","title":"Visualizing the simulation","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"We define a function that plots the vorticity and streamfunction and their corresponding zonal mean structure.","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"function plot_output(prob)\n  q = prob.vars.q\n  ψ = prob.vars.ψ\n  η = prob.params.eta\n\n  pq = heatmap(x, y, Array(q'),\n       aspectratio = 1,\n            legend = false,\n                 c = :balance,\n              clim = (-6, 6),\n             xlims = (-grid.Lx/2, grid.Lx/2),\n             ylims = (-grid.Ly/2, grid.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"vorticity ∂v/∂x-∂u/∂y\",\n        framestyle = :box)\n\n  contour!(pq, x, y, Array(η'),\n          levels=0.5:0.5:3,\n          lw=2, c=:black, ls=:solid, alpha=0.7)\n\n  contour!(pq, x, y, Array(η'),\n          levels=-2:0.5:-0.5,\n          lw=2, c=:black, ls=:dash, alpha=0.7)\n\n  pψ = contourf(x, y, Array(ψ'),\n       aspectratio = 1,\n            legend = false,\n                 c = :viridis,\n            levels = range(-0.75, stop=0.75, length=31),\n              clim = (-0.75, 0.75),\n             xlims = (-grid.Lx/2, grid.Lx/2),\n             ylims = (-grid.Ly/2, grid.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"streamfunction ψ\",\n        framestyle = :box)\n\n  l = @layout Plots.grid(1, 2)\n  p = plot(pq, pψ, layout = l, size = (800, 360))\n\n  return p\nend\nnothing # hide","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/#Time-stepping-the-Problem-forward","page":"Decaying barotropic QG turbulence over topography","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"We time-step the Problem forward in time.","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"startwalltime = time()\n\np = plot_output(prob)\n\nanim = @animate for j = 0:round(Int, nsteps/nsubs)\n\n  if j % (1000 / nsubs) == 0\n    cfl = clock.dt * maximum([maximum(vars.u) / grid.dx, maximum(vars.v) / grid.dy])\n\n    log = @sprintf(\"step: %04d, t: %d, cfl: %.2f, E: %.4f, Q: %.4f, walltime: %.2f min\",\n      clock.step, clock.t, cfl, E.data[E.i], Z.data[Z.i], (time()-startwalltime)/60)\n\n    println(log)\n  end\n\n  p[1][1][:z] = Array(vars.q)\n  p[1][:title] = \"vorticity, t=\"*@sprintf(\"%.2f\", clock.t)\n  p[2][1][:z] = Array(vars.ψ)\n\n  stepforward!(prob, diags, nsubs)\n  SingleLayerQG.updatevars!(prob)\nend\n\nmp4(anim, \"singlelayerqg_decaying_topography.mp4\", fps=12)","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"","category":"page"},{"location":"literated/singlelayerqg_decaying_topography/","page":"Decaying barotropic QG turbulence over topography","title":"Decaying barotropic QG turbulence over topography","text":"This page was generated using Literate.jl.","category":"page"},{"location":"assets/README/#a-placeholder-directory-for-output-generated-by-Docs","page":"-","title":"a placeholder directory for output generated by Docs","text":"","category":"section"}]
}
