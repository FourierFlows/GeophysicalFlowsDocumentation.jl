var documenterSearchIndex = {"docs":
[{"location":"modules/multilayerqg/#MultilayerQG-Module","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"","category":"section"},{"location":"modules/multilayerqg/#Basic-Equations","page":"MultilayerQG Module","title":"Basic Equations","text":"","category":"section"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"This module solves the layered quasi-geostrophic equations on a beta-plane of variable fluid depth H-h(xy). The flow in each layer is obtained through a streamfunction psi_j as (u_j upsilon_j) = (-partial_ypsi_j partial_xpsi_j), j=1n, where n is the number of fluid layers.","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"The QGPV in each layer is","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"mathrmQGPV_j = q_j  + underbracef_0+beta y_textrmplanetary PV + delta_jnunderbracefracf_0 hH_n_textrmtopographic PVquad j=1n","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"where q_j incorporate the relative vorticity in each layer nabla^2psi_j and the vortex stretching terms:","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"q_1 = nabla^2psi_1 + F_32 1 (psi_2-psi_1)\nq_j = nabla^2psi_j + F_j-12 j (psi_j-1-psi_j) + F_j+12 j (psi_j+1-psi_j)quad j=2dotsn-1\nq_n = nabla^2psi_n + F_n-12 n (psi_n-1-psi_n)","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"with","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"F_j+12 k = fracf_0^2g_j+12 H_kquadtextandquad\ng_j+12 = gfracrho_j+1-rho_jrho_j+1 ","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"In view of the relationships above, when we convert to Fourier space q's and psi's are related via the matrix equation","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"beginpmatrix widehatq_boldsymbolk1vdotswidehatq_boldsymbolkn endpmatrix =\nunderbraceleft(-boldsymbolk^2mathbb1 + mathbbF right)_equiv mathbbS_boldsymbolk\nbeginpmatrix widehatpsi_boldsymbolk1vdotswidehatpsi_boldsymbolkn endpmatrix","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"where","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"mathbbF equiv beginpmatrix\n -F_32 1               F_32 1     0     cdots     0\n  F_32 2  -(F_32 2+F_52 2)  F_52 2         vdots\n 0                             ddots     ddots    ddots  \n vdots                                                      0 \n 0                  cdots                0    F_n-12 n  -F_n-12 n\nendpmatrix","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"Including an imposed zonal flow U_j(y) in each layer the equations of motion are:","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"partial_t q_j + mathsfJ(psi_j q_j ) + (U_j - partial_ypsi_j) partial_x Q_j +  U_j partial_x q_j  + (partial_y Q_j)(partial_xpsi_j) = -delta_jnmunabla^2psi_n - nu(-1)^n_nu nabla^2n_nu q_j","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"with","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"partial_y Q_j equiv beta - partial_y^2 U_j - (1-delta_j1)F_j-12 j (U_j-1-U_j) - (1-delta_jn)F_j+12 j (U_j+1-U_j) + delta_jnpartial_yeta \npartial_x Q_j equiv delta_jnpartial_xeta","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"The eddy kinetic energy in each layer is:","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"textrmKE_j = dfracH_jH int dfrac12 boldsymbolnablapsi_j^2 fracmathrmd^2boldsymbolxL_x L_yquad j=1dotsn","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"while the eddy potential energy related to each of fluid interface is","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"textrmPE_j+12 = int dfrac12 dfracf_0^2g_j+12 (psi_j-psi_j+1)^2 fracmathrmd^2boldsymbolxL_x L_yquad j=1dotsn-1","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"The lateral eddy fluxes in each layer are:","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"textrmlateralfluxes_j = dfracH_jH int U_jupsilon_j partial_y u_j fracmathrmd^2boldsymbolxL_x L_yquad j=1dotsn","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"while the vertical fluxes accros fluid interfaces are:","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"textrmverticalfluxes_j+12 = int dfracf_0^2g_j+12 H (U_j-U_j+1)upsilon_j+1psi_j fracmathrmd^2boldsymbolxL_x L_yquad j=1dotsn-1\n","category":"page"},{"location":"modules/multilayerqg/#Implementation","page":"MultilayerQG Module","title":"Implementation","text":"","category":"section"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"Matrices mathbbS_boldsymbolk as well as mathbbS^-1_boldsymbolk are included in params as params.S and params.invS respectively. Additionally,  the background PV gradients partial_x Q and partial_y Q are also included in the params as params.Qx and params.Qy.","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"You can get widehatpsi_j from widehatq_j with streamfunctionfrompv!(psih, qh, params, grid), while to get widehatq_j from widehatpsi_j you need to call pvfromstreamfunction!(qh, psih, params, grid).","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"The equations of motion are time-stepped forward in Fourier space:","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"partial_t widehatq_j = - widehatmathsfJ(psi_j q_j)  - widehatU_j partial_x Q_j - widehatU_j partial_x q_j\n+ widehat(partial_ypsi_j) partial_x Q_j  - widehat(partial_xpsi_j)(partial_y Q_j) + delta_jnmu k^2 widehatpsi_n - nu k^2n_nu widehatq_j","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"In doing so the Jacobian is computed in the conservative form: mathsfJ(fg) = partial_y  (partial_x f) g -partial_x (partial_y f) g.","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"Equations are formulated using q_j as the state variables, i.e., sol=qh.","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"Thus:","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"mathcalL = - nu k^2n_nu ","category":"page"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"mathcalN(widehatq_j) = - widehatmathsfJ(psi_j q_j) - widehatU_j partial_x Q_j - widehatU_j partial_x q_j\n + widehat(partial_ypsi_j)(partial_x Q_j) - widehat(partial_xpsi_j)(partial_y Q_j) + delta_jnmu k^2 widehatpsi_n ","category":"page"},{"location":"modules/multilayerqg/#Examples","page":"MultilayerQG Module","title":"Examples","text":"","category":"section"},{"location":"modules/multilayerqg/","page":"MultilayerQG Module","title":"MultilayerQG Module","text":"examples/multilayerqg_2layer.jl: A script that simulates baroclinic eddy turbulence growth and equilibration of the Phillips 2-layer model.","category":"page"},{"location":"basics/#Code-Basics","page":"Code Basics","title":"Code Basics","text":"","category":"section"},{"location":"basics/#Basic-Notation","page":"Code Basics","title":"Basic Notation","text":"","category":"section"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"The code solves partial differential equations of the general form:","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"partial_t u = mathcalLu + mathcalN(u) ","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"(Note: ODEs are special cases of the above. Thus the code also solves ODEs.)","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"We decompose the right hand side of the above in a linear part (mathcalLu) and a nonlinear part (mathcalN(u)). The time steppers treat the linear and nonlinear parts differently.","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"Boundary conditions in all spatial dimensions are periodic. That allows us to expand all variables using a Fourier decomposition. For example, a variable phi(x t) that depends in one spatial dimension is expanded as:","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"phi(x t) = sum_k widehatphi(k t)e^mathrmi k x ","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"where wavenumbers k take the values tfrac2piL_x0pm 1pm 2dots. The equation is time-stepped forward in Fourier space. That way u becomes the array with all Fourier coefficients of the solution.","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"The coefficients for the linear operator mathcalL are stored in an array called LC. The term mathcalN(u) is computed for by calling the function calcN!.","category":"page"},{"location":"basics/#Abstract-SuperTypes","page":"Code Basics","title":"Abstract SuperTypes","text":"","category":"section"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"The code is divided along conceptual lines into problem-agnostic and problem-specific components. Files that contain problem-agnostic parts of the code are stored in /src. Files in /src define the domain, 'AbstractTypes' that supertype problem-specific types, and time-stepper types and routines. Problem-specific modules are stored in /src/physics.","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"Below is a list of all Abstract Supertypes used by the code:","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"AbstractGrid: Includes all variables that have to do with the grid, both in physical space as well as in wavenumber space. Currently implemented are: ZeroGrid for ODEs, OneGrid for PDEs with one spatial dimension, and TwoGrid for PDEs with two spatial dimensions. Grids are generic and work for any problem of that particular dimension.\nAbstractParams: Includes all parameters or functions related with the problem do not vary throughout the integration.\nAbstractVars: Includes all variables of the problem that change along the integration.\nAbstractEquation: Includes the array with the coefficients of the linear part of the equation, LC as well as function calcN! that computes the nonlinear part of the equation.\nAbstractState: Includes the solution sol at current time-step as well as the time-step dt, the time t, and step which counts the number of time-steps taken.\nAbstractTimeStepper: Includes all details for the time-stepper (e.g., dt, various coefficients, sol at intermediate time-step values). Time-steppers are generic and work for any problem.\nAbstractProblem: A super-supertype that includes all of the above. That is problem includes grid, vars, params, eqn, ts, state, and also t and step.","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"Grids and time-steppers are generic and work for any problem of that particular dimension. State and Problem just gathers things together. Thus, to write a solver for a new physical problem you only need to prescribe params, vars, the coefficients of the linear part, LC, and function calcN!.","category":"page"},{"location":"basics/#Source-code-organization","page":"Code Basics","title":"Source code organization","text":"","category":"section"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"The code is divided along conceptual lines into problem-agnostic and problem-specific components. Files that contain problem-agnostic parts of the code are stored in /src. Files in /src define the domain, 'AbstractTypes' that supertype problem-specific types, and time-stepper types and routines. Problem-specific modules are stores in /src/physics.","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"Here's an overview of the code structure:","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"/src/\nFourierFlows.jl\nDefines supertyping AbstractParams, AbstractGrid, etc.\nDefines a Problem type to organize the grid, vars, params, equation, and timestepper into a single structure.\nIncludes all sources files and physics files.\ntimesteppers.jl: defines modules and stepforward! routines for   various time-steppers. Current implemented time-steppers are:\nForward Euler\n3rd-order Adams-Bashforth (AB3)\n4th-order Runge-Kutta (RK4)\n4th-order Runge-Kutta Exponential Time Differencing (ETDRK4)\n4th-order Dual Runge-Kutta (DualRK4)\n4th-order Dual Runge-Kutta Exponential Time Differencing (DualETDRK4)\nFor each time-stepper exists also a \"filtered\" version that filters out high-wavenumber spectral components of the solution. The Dual time-steppers evolve a state variable that comprises both of real valued         and complex valued fields.\nphysics/\ntwodnavierstokes.jl: Defines a TwoDNavierStokes module that provides a solver for the two-dimensional vorticity equation.\nbarotropicqg.jl: Defines a BarotropicQG module that provides several solvers for the barotropic QG model that permit beta, topography, beta + topography, and forcing.\nkuramotosivashinsky.jl: Defines a KuramotoSivashinsky module that solves the Kuramoto-Sivashinsky.\nverticallyfourierboussinesq.jl: Defines a VerticallyFourierBoussinesq module that solves the two-mode truncation of the Fourier series thin-layer approximation to the hydrostatic Boussinesq equations.\nverticallycosinerboussinesq.jl: Defines a VerticallyCosineBoussinesq module that solves the two-mode truncation of the Sin/Cos series thin-layer approximation to the hydrostatic Boussinesq equations.\ntraceradvdiff.jl: Defines a TracerAdvDiff module that provides a solver for a two-dimensional and periodic tracer field in a given 2D flow (u, w), which can be an arbitrary function of x, z, and t.","category":"page"},{"location":"basics/#Basic-steps-for-solving-a-problem:-step-through-an-example-script","page":"Code Basics","title":"Basic steps for solving a problem: step through an example script","text":"","category":"section"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"To illustrate the basic steps for solving a problem consider the 1D Kuramoto-Sivashinsky equation for u(x t):","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"partial_t u + partial_x^4 u + partial_x^2 u + upartial_x u = 0 ","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"which in Fourier base reads:","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"partial_t widehatu = underbrace(- k_x^4 + k_x^2) widehatu_mathcalLwidehatu\n+ underbracewidehat -upartial_x u _mathcalN(widehatu) ","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"The steps to construct an AbstractProblem for the above are:","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"Construct an AbstractGrid; for this problem we use the OneGrid.\nConstruct an AbstractParams; for this problem params is be empty as there are no parameters in the equation. (Note that e.g., the domain size Lx and the number of gridpoints nx belong to the grid.)\nConstruct an AbstractVars; for this problem vars includes u, partial_x u, upartial_x u and their Fourier transforms widehatu, widehatpartial_x u, widehatupartial_xu.\nConstruct the equations by prescribing coefficients for the linear part as an array LC and a function calcN! that computes mathcalN(widehatu).\nConstruct the time-stepper which includes function stepforward! that time-steps the solution.\nConstruct the state and gather everything as an AbstractProblem.","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"The example script found in  examples/kuramotosivashinsky/trefethenexample.jl demonstrates the above steps needed to construct an AbstractProblem. The prob is constructed by calling prob = InitialValueProblem(nx=nx, Lx=Lx, dt=dt, stepper=\"ETDRK4\"). Looking into the  InitialValueProblem function we can see the above steps:","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"function InitialValueProblem(;\n     nx = 256,\n     Lx = 2π,\n     dt = 0.01,\nstepper = \"RK4\"\n)\n\ng  = OneDGrid(nx, Lx)\npr = Params()\nvs = Vars(g)\neq = Equation(pr, g)\nts = FourierFlows.autoconstructtimestepper(stepper, dt, eq.LC, g)\n\nFourierFlows.Problem(g, vs, pr, eq, ts)\nend","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"The OneDGrid function is called for the grid. Within grid the wavenumber array is constructed:","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"i1 = 0:Int(nx/2)\ni2 = Int(-nx/2+1):-1\nk = Array{T}(2π/Lx*cat(1, i1, i2))\nkr = Array{T}(2π/Lx*cat(1, i1))","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"For real-valued fields we use rfft and thus only positive wavenumbers are involved: array kr. E.g., for nx=8 and Lx=2π the wavenumber grids are: k = [0, 1, 2, 3, 4, -3, -2, -1] and kr = [0, 1, 2, 3, 4].","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"The construction of the grids only works for even number of grid points. Moreover, since the code relies on the mathrmFFT algorithm, we suggest you use a power of 2 as the number of grid points, since then mathrmFFT is most efficient. ","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"Function Vars(g) initialize variables u, ux, and uux as real valued arrays of length nx and variables uh, uxh, and uuxh as complex valued arrays of length nkr = Int(nx/2+1) (the same length as kr). As a general convention variable names with h denote the Fourier transforms of the corresponding variable (h stands for 'hat').","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"The array LC is constructed by Equation function","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"function Equation(p, g)\n  LC = @. g.kr^2 - g.kr^4\n  FourierFlows.Equation(LC, calcN!)\nend","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"Also eq includes function calcN! which computes the nonlinear term mathcalN(widehatu):","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"function calcN!(N, sol, t, s, v, p, g)\n  @. v.uh = sol\n  @. v.uxh = im*g.kr*sol\n  A_mul_B!(v.u, g.irfftplan, v.uh)\n  A_mul_B!(v.ux, g.irfftplan, v.uxh)\n  @. v.uux = v.u*v.ux\n  A_mul_B!(v.uuxh, g.rfftplan, v.uux)\n  @. N = -v.uuxh\n  dealias!(N, g)\n  nothing\nend","category":"page"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"The time-stepper is constructed and stored as ts. Finally, all supertypes are gathered together as an AbstractProblem.","category":"page"},{"location":"basics/#Tutorials","page":"Code Basics","title":"Tutorials","text":"","category":"section"},{"location":"basics/","page":"Code Basics","title":"Code Basics","text":"Pages = [\n    \"modules/twodnavierstokes.md\",\n    \"modules/barotropicqg.md\",\n    \"modules/multilayerqg.md\",\n    \"modules/barotropicqgql.md\"\n        ]\nDepth = 1","category":"page"},{"location":"man/functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"man/functions/#Functions-exported-from-GeophysicalFlows:","page":"Functions","title":"Functions exported from GeophysicalFlows:","text":"","category":"section"},{"location":"man/functions/","page":"Functions","title":"Functions","text":"Modules = [GeophysicalFlows]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#Functions-exported-from-TwoDNavierStokes:","page":"Functions","title":"Functions exported from TwoDNavierStokes:","text":"","category":"section"},{"location":"man/functions/","page":"Functions","title":"Functions","text":"Modules = [GeophysicalFlows.TwoDNavierStokes]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.Problem","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.Problem","text":"Problem(; parameters...)\n\nConstruct a 2D turbulence problem.\n\n\n\n\n\n","category":"function"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.energy-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.energy","text":"energy(prob)\n\nReturns the domain-averaged kinetic energy in the Fourier-transformed vorticity solution sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.energy_dissipation-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.energy_dissipation","text":"energy_dissipation(prob)\n\nReturns the domain-averaged dissipation rate. nν must be >= 1.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.energy_drag-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.energy_drag","text":"energy_drag(prob)\n\nReturns the extraction of domain-averaged energy by drag/hypodrag μ.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.energy_work-Tuple{Any,GeophysicalFlows.TwoDNavierStokes.Vars{#s36,#s35,#s34,Nothing} where #s34<:AbstractArray where #s35<:AbstractArray where #s36<:AbstractArray,Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.energy_work","text":"energy_work(prob)\nenergy_work(sol, v, grid)\n\nReturns the domain-averaged rate of work of energy by the forcing Fh.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.enstrophy-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.enstrophy","text":"enstrophy(prob)\n\nReturns the domain-averaged enstrophy in the Fourier-transformed vorticity solution sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.enstrophy_dissipation-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.enstrophy_dissipation","text":"enstrophy_dissipation(prob)\n\nReturns the domain-averaged dissipation rate of enstrophy. nν must be >= 1.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.enstrophy_drag-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.enstrophy_drag","text":"enstrophy_drag(prob)\n\nReturns the extraction of domain-averaged enstrophy by drag/hypodrag μ.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.enstrophy_work-Tuple{Any,GeophysicalFlows.TwoDNavierStokes.Vars{#s36,#s35,#s34,Nothing} where #s34<:AbstractArray where #s35<:AbstractArray where #s36<:AbstractArray,Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.enstrophy_work","text":"enstrophy_work(prob)\nenstrophy_work(sol, v, grid)\n\nReturns the domain-averaged rate of work of enstrophy by the forcing Fh.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.set_zeta!-Tuple{Any,Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.set_zeta!","text":"set_zeta!(prob, zeta)\n\nSet the solution sol as the transform of zeta and update variables v on the grid grid.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.TwoDNavierStokes.updatevars!-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.TwoDNavierStokes.updatevars!","text":"updatevars!(prob)\n\nUpdate variables in vars with solution insol`.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#Functions-exported-from-BarotropicQG:","page":"Functions","title":"Functions exported from BarotropicQG:","text":"","category":"section"},{"location":"man/functions/","page":"Functions","title":"Functions","text":"Modules = [GeophysicalFlows.BarotropicQG]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.dissipation-NTuple{4,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.dissipation","text":"dissipation(prob)\ndissipation(sol, vars, params, grid)\n\nReturns the domain-averaged dissipation rate. nν must be >= 1.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.dissipation_ens-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.dissipation_ens","text":"dissipation_ens(prob)\n\nReturns the domain-averaged dissipation rate of enstrophy. nν must be >= 1.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.drag-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.drag","text":"drag(prob)\ndrag(sol, vars, params, grid)\n\nReturns the extraction of domain-averaged energy by drag μ.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.drag_ens-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.drag_ens","text":"drag_ens(prob)\n\nReturns the extraction of domain-averaged enstrophy by drag/hypodrag μ.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.energy-Tuple{Any,FourierFlows.AbstractGrid}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.energy","text":"energy(sol, grid)\nenergy(prob)\n\nReturns the domain-averaged kinetic energy of solution sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.enstrophy-Tuple{Any,FourierFlows.AbstractGrid,FourierFlows.AbstractVars}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.enstrophy","text":"enstrophy(sol, grid, vars)\nenstrophy(prob)\n\nReturns the domain-averaged enstrophy of solution sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.meanenergy-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.meanenergy","text":"meanenergy(prob)\n\nReturns the energy of the domain-averaged U.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.meanenstrophy-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.meanenstrophy","text":"meanenstrophy(prob)\n\nReturns the enstrophy of the domain-averaged U.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.set_zeta!-Tuple{Any,GeophysicalFlows.BarotropicQG.Vars,Any,Any,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.set_zeta!","text":"set_zeta!(prob, zeta)\nset_zeta!(sol, vars, params, grid)\n\nSet the solution sol as the transform of zeta and update variables vars on the grid.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.updatevars!-NTuple{4,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.updatevars!","text":"updatevars!(sol, vars, params, grid)\n\nUpdate the variables in vars with the solution in sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.work-Tuple{Any,GeophysicalFlows.BarotropicQG.Vars{#s54,#s53,#s52,#s51,Nothing} where #s51<:AbstractArray where #s52<:AbstractArray where #s53<:AbstractArray where #s54<:AbstractArray,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.work","text":"work(prob)\nwork(sol, vars, grid)\n\nReturns the domain-averaged rate of work of energy by the forcing Fqh.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQG.work_ens-Tuple{Any,GeophysicalFlows.BarotropicQG.Vars{#s54,#s53,#s52,#s51,Nothing} where #s51<:AbstractArray where #s52<:AbstractArray where #s53<:AbstractArray where #s54<:AbstractArray,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQG.work_ens","text":"work_ens(prob)\nwork_ens(sol, v, grid)\n\nReturns the domain-averaged rate of work of enstrophy by the forcing Fh.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#Functions-exported-from-BarotropicQGQL:","page":"Functions","title":"Functions exported from BarotropicQGQL:","text":"","category":"section"},{"location":"man/functions/","page":"Functions","title":"Functions","text":"Modules = [GeophysicalFlows.BarotropicQGQL]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.Problem","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.Problem","text":"Problem(dev=CPU(); parameters...)\n\nConstruct a BarotropicQGQL turbulence problem on device dev.\n\n\n\n\n\n","category":"function"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.dissipation-NTuple{4,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.dissipation","text":"dissipation(prob)\ndissipation(sol, v, p, g)\n\nReturns the domain-averaged dissipation rate. nν must be >= 1.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.drag-Tuple{Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.drag","text":"drag(prob)\ndrag(sol, vars, params, grid)\n\nReturns the extraction of domain-averaged energy by drag μ.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.energy-Tuple{Any,FourierFlows.AbstractGrid}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.energy","text":"energy(sol, grid)\nenergy(prob)\n\nReturns the domain-averaged kinetic energy of sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.enstrophy-Tuple{Any,FourierFlows.AbstractGrid,FourierFlows.AbstractVars}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.enstrophy","text":"enstrophy(sol, grid, vars)\nenstrophy(prob)\n\nReturns the domain-averaged enstrophy of sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.set_zeta!-NTuple{5,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.set_zeta!","text":"set_zeta!(prob, zeta)\nset_zeta!(sol, vars, grid, zeta)\n\nSet the solution sol as the transform of zeta and update variables vars on the grid.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.updatevars!-NTuple{4,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.updatevars!","text":"updatevars!(sol, vars, params, grid)\nupdatevars!(prob)\n\nUpdate the vars of a problem prob that has grid and params with the solution in sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.BarotropicQGQL.work-Tuple{Any,GeophysicalFlows.BarotropicQGQL.Vars{#s54,#s53,#s52,Nothing} where #s52<:AbstractArray where #s53<:AbstractArray where #s54<:AbstractArray,Any}","page":"Functions","title":"GeophysicalFlows.BarotropicQGQL.work","text":"work(prob)\nwork(sol, vars, params, grid)\n\nReturns the domain-averaged rate of work of energy by the forcing, params.Fh.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#Functions-exported-from-MultilayerQG:","page":"Functions","title":"Functions exported from MultilayerQG:","text":"","category":"section"},{"location":"man/functions/","page":"Functions","title":"Functions","text":"Modules = [GeophysicalFlows.MultilayerQG]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#GeophysicalFlows.MultilayerQG.energies-NTuple{4,Any}","page":"Functions","title":"GeophysicalFlows.MultilayerQG.energies","text":"energies(prob)\n\nReturns the kinetic energy of each fluid layer KE1, ..., KEnlayers, and the potential energy of each fluid interface PE{3/2}, ..., PE{nlayers-1/2}. (When nlayers=1 only kinetic energy is returned.)\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.MultilayerQG.fluxes-NTuple{4,Any}","page":"Functions","title":"GeophysicalFlows.MultilayerQG.fluxes","text":"fluxes(prob)\n\nReturns the lateral eddy fluxes within each fluid layer lateralfluxes1, ..., lateralfluxesnlayers and also the vertical eddy fluxes for each fluid interface verticalfluxes{3/2}, ..., verticalfluxes{nlayers-1/2}. (When nlayers=1 only the lateral fluxes are returned.)\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.MultilayerQG.set_q!-NTuple{5,Any}","page":"Functions","title":"GeophysicalFlows.MultilayerQG.set_q!","text":"set_q!(params, vars, grid, sol, q)\nset_q!(prob)\n\nSet the solution prob.sol as the transform of q and updates variables.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.MultilayerQG.set_ψ!-NTuple{5,Any}","page":"Functions","title":"GeophysicalFlows.MultilayerQG.set_ψ!","text":"set_ψ!(params, vars, grid, sol, ψ)\nset_ψ!(prob)\n\nSet the solution prob.sol to correspond to the transform of streamfunction ψ and updates variables.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#GeophysicalFlows.MultilayerQG.updatevars!-NTuple{4,Any}","page":"Functions","title":"GeophysicalFlows.MultilayerQG.updatevars!","text":"updatevars!(params, vars, grid, sol)\nupdatevars!(prob)\n\nUpdate all problem variables using sol.\n\n\n\n\n\n","category":"method"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/barotropicqg_betaforced.jl\"","category":"page"},{"location":"generated/barotropicqg_betaforced/#Forced-dissipative-barotropic-QG-beta-plane-turbulence","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"This example can be run online via (Image: ). Also, it can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"A simulation of forced-dissipative barotropic quasi-geostrophic turbulence on a beta plane. The dynamics include linear drag and stochastic excitation.","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"using FourierFlows, Plots, Statistics, Printf, Random\n\nusing FourierFlows: parsevalsum\nusing FFTW: irfft\nusing Statistics: mean\nusing Random: seed!\n\nimport GeophysicalFlows.BarotropicQG\nimport GeophysicalFlows.BarotropicQG: energy, enstrophy","category":"page"},{"location":"generated/barotropicqg_betaforced/#Choosing-a-device:-CPU-or-GPU","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"dev = CPU()    # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Numerical-parameters-and-time-stepping-parameters","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"     nx = 128            # 2D resolution = nx^2\nstepper = \"FilteredRK4\"  # timestepper\n     dt = 0.05           # timestep\n nsteps = 8000           # total number of time-steps\n nsubs  = 10             # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Physical-parameters","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Physical parameters","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Lx = 2π        # domain size\n β = 10.0      # planetary PV gradient\n μ = 0.01      # bottom drag\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Forcing","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forcing","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"We force the vorticity equation with stochastic excitation that is delta-correlated in time and while spatially homogeneously and isotropically correlated. The forcing has a spectrum with power in a ring in wavenumber space of radious k_f and width delta k_f, and it injects energy per unit area and per unit time equal to varepsilon.","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"forcing_wavenumber = 14.0    # the central forcing wavenumber for a spectrum that is a ring in wavenumber space\nforcing_bandwidth  = 1.5     # the width of the forcing spectrum\nε = 0.001                    # energy input rate by the forcing\n\ngr  = TwoDGrid(nx, Lx)\n\nk = [ gr.kr[i] for i=1:gr.nkr, j=1:gr.nl] # a 2D grid with the zonal wavenumber\n\nforcing_spectrum = @. exp( -(sqrt(gr.Krsq)-forcing_wavenumber)^2 / (2forcing_bandwidth^2) )\n@. forcing_spectrum[ gr.Krsq < (2π/Lx*2)^2  ] = 0\n@. forcing_spectrum[ gr.Krsq > (2π/Lx*20)^2 ] = 0\n@. forcing_spectrum[ k .< 2π/Lx ] .= 0 # make sure forcing does not have power at k=0 component\nε0 = parsevalsum(forcing_spectrum .* gr.invKrsq/2, gr)/(gr.Lx*gr.Ly)\n@. forcing_spectrum = ε/ε0 * forcing_spectrum  # normalization so that forcing injects energy ε per domain area per unit time\n\nseed!(1234) # reset of the random number generator for reproducibility\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Next we construct function calcF! that computes a forcing realization every timestep","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"function calcFq!(Fh, sol, t, clock, vars, params, grid)\n  ξ = ArrayType(dev)(exp.(2π*im*rand(eltype(grid), size(sol)))/sqrt(clock.dt))\n  @. Fh = ξ*sqrt.(forcing_spectrum)\n  Fh[abs.(grid.Krsq).==0] .= 0\n  nothing\nend\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Problem-setup","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Problem setup","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"We initialize a Problem by providing a set of keyword arguments. Not providing a viscosity coefficient ν leads to the module's default value: ν=0. In this example numerical instability due to accumulation of enstrophy in high wavenumbers is taken care with the FilteredTimestepper we picked.","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"prob = BarotropicQG.Problem(dev; nx=nx, Lx=Lx, β=β, μ=μ, dt=dt, stepper=stepper,\n                            calcFq=calcFq!, stochastic=true)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Let's define some shortcuts.","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"sol, cl, vs, pr, gr = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx, y = gr.x, gr.y\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"First let's see how a forcing realization looks like.","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"calcFq!(vs.Fqh, sol, 0.0, cl, vs, pr, gr)\n\nheatmap(x, y, irfft(vs.Fqh, gr.nx),\n     aspectratio = 1,\n               c = :balance,\n            clim = (-8, 8),\n           xlims = (-gr.Lx/2, gr.Lx/2),\n           ylims = (-gr.Ly/2, gr.Ly/2),\n          xticks = -3:3,\n          yticks = -3:3,\n          xlabel = \"x\",\n          ylabel = \"y\",\n           title = \"a forcing realization\",\n      framestyle = :box)","category":"page"},{"location":"generated/barotropicqg_betaforced/#Setting-initial-conditions","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Our initial condition is simply fluid at rest.","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"BarotropicQG.set_zeta!(prob, zeros(gr.nx, gr.ny))","category":"page"},{"location":"generated/barotropicqg_betaforced/#Diagnostics","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Diagnostics","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Create Diagnostic – energy and enstrophy are functions imported at the top.","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"E = Diagnostic(energy, prob; nsteps=nsteps)\nZ = Diagnostic(enstrophy, prob; nsteps=nsteps)\ndiags = [E, Z] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Output","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Output","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"filepath = \".\"\nplotpath = \"./plots_forcedbetaturb\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"forcedbetaturb.jld2\")\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Do some basic file management,","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"and then create Output.","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nget_u(prob) = irfft(im*gr.l.*gr.invKrsq.*sol, gr.nx)\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Visualizing-the-simulation","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"We define a function that plots the vorticity and streamfunction fields, their corresponding zonal mean structure and timeseries of energy and enstrophy.","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"function plot_output(prob)\n  ζ = prob.vars.zeta\n  ψ = prob.vars.psi\n  ζ̄ = mean(ζ, dims=1)'\n  ū = mean(prob.vars.u, dims=1)'\n\n  pζ = heatmap(x, y, ζ,\n       aspectratio = 1,\n            legend = false,\n                 c = :balance,\n              clim = (-8, 8),\n             xlims = (-gr.Lx/2, gr.Lx/2),\n             ylims = (-gr.Ly/2, gr.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"vorticity ζ=∂v/∂x-∂u/∂y\",\n        framestyle = :box)\n\n  pψ = contourf(x, y, ψ,\n            levels = -0.32:0.04:0.32,\n       aspectratio = 1,\n         linewidth = 1,\n            legend = false,\n              clim = (-0.22, 0.22),\n                 c = :viridis,\n             xlims = (-gr.Lx/2, gr.Lx/2),\n             ylims = (-gr.Ly/2, gr.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"streamfunction ψ\",\n        framestyle = :box)\n\n  pζm = plot(ζ̄, y,\n            legend = false,\n         linewidth = 2,\n             alpha = 0.7,\n            yticks = -3:3,\n             xlims = (-3, 3),\n            xlabel = \"zonal mean ζ\",\n            ylabel = \"y\")\n  plot!(pζm, 0*y, y, linestyle=:dash, linecolor=:black)\n\n  pum = plot(ū, y,\n            legend = false,\n         linewidth = 2,\n             alpha = 0.7,\n            yticks = -3:3,\n             xlims = (-0.5, 0.5),\n            xlabel = \"zonal mean u\",\n            ylabel = \"y\")\n  plot!(pum, 0*y, y, linestyle=:dash, linecolor=:black)\n\n  pE = plot(1,\n             label = \"energy\",\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 4.1),\n             ylims = (0, 0.05),\n            xlabel = \"μt\")\n\n  pZ = plot(1,\n             label = \"enstrophy\",\n         linecolor = :red,\n            legend = :bottomright,\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 4.1),\n             ylims = (0, 2.5),\n            xlabel = \"μt\")\n\n  l = @layout grid(2, 3)\n  p = plot(pζ, pζm, pE, pψ, pum, pZ, layout=l, size = (1000, 600), dpi=150)\n\n  return p\nend\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betaforced/#Time-stepping-the-Problem-forward","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"We time-step the Problem forward in time.","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"startwalltime = time()\n\np = plot_output(prob)\n\nanim = @animate for j=0:Int(nsteps/nsubs)\n\n  cfl = cl.dt*maximum([maximum(vs.u)/gr.dx, maximum(vs.v)/gr.dy])\n\n  log = @sprintf(\"step: %04d, t: %d, cfl: %.2f, E: %.4f, Q: %.4f, walltime: %.2f min\",\n  cl.step, cl.t, cfl, E.data[E.i], Z.data[Z.i],\n  (time()-startwalltime)/60)\n\n  if j%(1000/nsubs)==0; println(log) end\n\n  p[1][1][:z] = Array(vs.zeta)\n  p[1][:title] = \"vorticity, μt=\"*@sprintf(\"%.2f\", μ*cl.t)\n  p[4][1][:z] = Array(vs.psi)\n  p[2][1][:x] = mean(vs.zeta, dims=1)'\n  p[5][1][:x] = mean(vs.u, dims=1)'\n  push!(p[3][1], μ*E.t[E.i], E.data[E.i])\n  push!(p[6][1], μ*Z.t[Z.i], Z.data[Z.i])\n\n  stepforward!(prob, diags, nsubs)\n  BarotropicQG.updatevars!(prob)\n\nend\n\nmp4(anim, \"barotropicqg_betaforced.mp4\", fps=18)","category":"page"},{"location":"generated/barotropicqg_betaforced/#Save","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Save","text":"","category":"section"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"Finally save the last snapshot.","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), cl.step)\nsavefig(savename)","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"","category":"page"},{"location":"generated/barotropicqg_betaforced/","page":"Forced-dissipative barotropic QG beta-plane turbulence","title":"Forced-dissipative barotropic QG beta-plane turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/barotropicqg_betadecay.jl\"","category":"page"},{"location":"generated/barotropicqg_betadecay/#Decaying-barotropic-QG-beta-plane-turbulence","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"This example can be run online via (Image: ). Also, it can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"An example of decaying barotropic quasi-geostrophic turbulence on a beta plane.","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"using FourierFlows, Plots, Printf, Random\n\nusing Statistics: mean\nusing FFTW: irfft\n\nimport GeophysicalFlows.BarotropicQG\nimport GeophysicalFlows.BarotropicQG: energy, enstrophy","category":"page"},{"location":"generated/barotropicqg_betadecay/#Choosing-a-device:-CPU-or-GPU","page":"Decaying barotropic QG beta-plane turbulence","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Numerical-parameters-and-time-stepping-parameters","page":"Decaying barotropic QG beta-plane turbulence","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"     nx = 128            # 2D resolution = nx^2\nstepper = \"FilteredRK4\"  # timestepper\n     dt = 0.05           # timestep\n nsteps = 2000           # total number of time-steps\n nsubs  = 10             # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Physical-parameters","page":"Decaying barotropic QG beta-plane turbulence","title":"Physical parameters","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"Lx = 2π        # domain size\n β = 10.0      # planetary PV gradient\n μ = 0.0       # bottom drag\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Problem-setup","page":"Decaying barotropic QG beta-plane turbulence","title":"Problem setup","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"We initialize a Problem by providing a set of keyword arguments. Not providing a viscosity coefficient ν leads to the module's default value: ν=0. In this example numerical instability due to accumulation of enstrophy in high wavenumbers is taken care with the FilteredTimestepper we picked.","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"prob = BarotropicQG.Problem(dev; nx=nx, Lx=Lx, β=β, μ=μ, dt=dt, stepper=stepper)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"and define some shortcuts","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"sol, cl, vs, pr, gr = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx, y = gr.x, gr.y\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Setting-initial-conditions","page":"Decaying barotropic QG beta-plane turbulence","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"Our initial condition consist of a flow that has power only at wavenumbers with 8fracL2pisqrtk_x^2+k_y^210 and initial energy E_0:","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"E0 = 0.1 # energy of initial condition\n\nk = [ gr.kr[i] for i=1:gr.nkr, j=1:gr.nl] # a 2D grid with the zonal wavenumber\n\nRandom.seed!(1234)\nqih = randn(Complex{eltype(gr)}, size(sol))\nqih[ gr.Krsq .< (8*2π /gr.Lx)^2 ] .= 0\nqih[ gr.Krsq .> (10*2π/gr.Lx)^2 ] .= 0\nqih[ k .== 0 ] .= 0 # remove any power from k=0 component\nEin = energy(qih, gr)  # compute energy of qi\nqih = qih*sqrt(E0/Ein) # normalize qi to have energy E0\nqi  = irfft(qih, gr.nx)\n\nBarotropicQG.set_zeta!(prob, qi)\nnothing #hide","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"Let's plot the initial vorticity field:","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"p1 = heatmap(x, y, vs.q,\n         aspectratio = 1,\n              c = :balance,\n           clim = (-12, 12),\n          xlims = (-gr.Lx/2, gr.Lx/2),\n          ylims = (-gr.Ly/2, gr.Ly/2),\n         xticks = -3:3,\n         yticks = -3:3,\n         xlabel = \"x\",\n         ylabel = \"y\",\n          title = \"initial vorticity ζ=∂v/∂x-∂u/∂y\",\n     framestyle = :box)\n\np2 = contourf(x, y, vs.psi,\n        aspectratio = 1,\n             c = :viridis,\n        levels = range(-0.65, stop=0.65, length=10),\n          clim = (-0.65, 0.65),\n         xlims = (-gr.Lx/2, gr.Lx/2),\n         ylims = (-gr.Ly/2, gr.Ly/2),\n        xticks = -3:3,\n        yticks = -3:3,\n        xlabel = \"x\",\n        ylabel = \"y\",\n         title = \"initial streamfunction ψ\",\n    framestyle = :box)\n\nl = @layout grid(1, 2)\np = plot(p1, p2, layout=l, size=(900, 400))","category":"page"},{"location":"generated/barotropicqg_betadecay/#Diagnostics","page":"Decaying barotropic QG beta-plane turbulence","title":"Diagnostics","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"Create Diagnostics – energy and enstrophy functions are imported at the top.","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"E = Diagnostic(energy, prob; nsteps=nsteps)\nZ = Diagnostic(enstrophy, prob; nsteps=nsteps)\ndiags = [E, Z] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Output","page":"Decaying barotropic QG beta-plane turbulence","title":"Output","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"filepath = \".\"\nplotpath = \"./plots_decayingbetaturb\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"decayingbetaturb.jld2\")\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"Do some basic file management,","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"and then create Output.","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nget_u(prob) = irfft(im*gr.l.*gr.invKrsq.*sol, gr.nx)\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Visualizing-the-simulation","page":"Decaying barotropic QG beta-plane turbulence","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"We define a function that plots the vorticity and streamfunction fields and their corresponding zonal mean structure.","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"function plot_output(prob)\n  ζ = prob.vars.zeta\n  ψ = prob.vars.psi\n  ζ̄ = mean(ζ, dims=1)'\n  ū = mean(prob.vars.u, dims=1)'\n\n  pζ = heatmap(x, y, ζ,\n       aspectratio = 1,\n            legend = false,\n                 c = :balance,\n              clim = (-12, 12),\n             xlims = (-gr.Lx/2, gr.Lx/2),\n             ylims = (-gr.Ly/2, gr.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"vorticity ζ=∂v/∂x-∂u/∂y\",\n        framestyle = :box)\n\n  pψ = contourf(x, y, ψ,\n       aspectratio = 1,\n            legend = false,\n                 c = :viridis,\n            levels = range(-0.65, stop=0.65, length=10),\n              clim = (-0.65, 0.65),\n             xlims = (-gr.Lx/2, gr.Lx/2),\n             ylims = (-gr.Ly/2, gr.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"streamfunction ψ\",\n        framestyle = :box)\n\n  pζm = plot(ζ̄, y,\n            legend = false,\n         linewidth = 2,\n             alpha = 0.7,\n            yticks = -3:3,\n             xlims = (-2.2, 2.2),\n            xlabel = \"zonal mean ζ\",\n            ylabel = \"y\")\n  plot!(pζm, 0*y, y, linestyle=:dash, linecolor=:black)\n\n  pum = plot(ū, y,\n            legend = false,\n         linewidth = 2,\n             alpha = 0.7,\n            yticks = -3:3,\n             xlims = (-0.55, 0.55),\n            xlabel = \"zonal mean u\",\n            ylabel = \"y\")\n  plot!(pum, 0*y, y, linestyle=:dash, linecolor=:black)\n\n  l = @layout grid(2, 2)\n  p = plot(pζ, pζm, pψ, pum, layout = l, size = (900, 800))\n\n  return p\nend\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_betadecay/#Time-stepping-the-Problem-forward","page":"Decaying barotropic QG beta-plane turbulence","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"We time-step the Problem forward in time.","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"startwalltime = time()\n\np = plot_output(prob)\n\nanim = @animate for j=0:Int(nsteps/nsubs)\n\n  log = @sprintf(\"step: %04d, t: %d, E: %.4f, Q: %.4f, walltime: %.2f min\",\n    cl.step, cl.t, E.data[E.i], Z.data[Z.i], (time()-startwalltime)/60)\n\n  if j%(1000/nsubs)==0; println(log) end\n\n\n  p[1][1][:z] = Array(vs.zeta)\n  p[1][:title] = \"vorticity, t=\"*@sprintf(\"%.2f\", cl.t)\n  p[3][1][:z] = Array(vs.psi)\n  p[2][1][:x] = mean(vs.zeta, dims=1)'\n  p[4][1][:x] = mean(vs.u, dims=1)'\n\n  stepforward!(prob, diags, nsubs)\n  BarotropicQG.updatevars!(prob)\n\nend\n\nmp4(anim, \"barotropicqg_betadecay.mp4\", fps=14)","category":"page"},{"location":"generated/barotropicqg_betadecay/#Save","page":"Decaying barotropic QG beta-plane turbulence","title":"Save","text":"","category":"section"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"Finally save the last snapshot.","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), cl.step)\nsavefig(savename)","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"","category":"page"},{"location":"generated/barotropicqg_betadecay/","page":"Decaying barotropic QG beta-plane turbulence","title":"Decaying barotropic QG beta-plane turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/barotropicqgql_betaforced.jl\"","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Quasi-Linear-forced-dissipative-barotropic-QG-beta-plane-turbulence","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"This example can be run online via (Image: ). Also, it can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"A simulation of forced-dissipative barotropic quasi-geostrophic turbulence on a beta plane under the quasi-linear approximation. The dynamics include linear drag and stochastic excitation.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"using FourierFlows, Plots, Statistics, Printf, Random\n\nusing FourierFlows: parsevalsum\nusing FFTW: irfft\nusing Random: seed!\nusing Statistics: mean\n\nimport GeophysicalFlows.BarotropicQGQL\nimport GeophysicalFlows.BarotropicQGQL: energy, enstrophy","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Choosing-a-device:-CPU-or-GPU","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Numerical-parameters-and-time-stepping-parameters","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"     nx = 128            # 2D resolution = nx^2\nstepper = \"FilteredRK4\"  # timestepper\n     dt = 0.05           # timestep\n nsteps = 8000           # total number of time-steps\n nsubs  = 10             # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Physical-parameters","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Physical parameters","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"Lx = 2π        # domain size\n β = 10.0      # planetary PV gradient\n μ = 0.01      # bottom drag\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Forcing","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Forcing","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We force the vorticity equation with stochastic excitation that is delta-correlated in time and while spatially homogeneously and isotropically correlated. The forcing has a spectrum with power in a ring in wavenumber space of radious k_f and width delta k_f, and it injects energy per unit area and per unit time equal to varepsilon.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"forcing_wavenumber = 14.0    # the central forcing wavenumber for a spectrum that is a ring in wavenumber space\nforcing_bandwidth  = 1.5     # the width of the forcing spectrum\nε = 0.001                    # energy input rate by the forcing\n\ngr  = TwoDGrid(nx, Lx)\n\nk = [ gr.kr[i] for i=1:gr.nkr, j=1:gr.nl ] # a 2D grid with the zonal wavenumber\n\nforcing_spectrum = @. exp( -(sqrt(gr.Krsq)-forcing_wavenumber)^2 / (2forcing_bandwidth^2) )\n@. forcing_spectrum[ gr.Krsq < (2π/Lx*2)^2  ] = 0\n@. forcing_spectrum[ gr.Krsq > (2π/Lx*20)^2 ] = 0\n@. forcing_spectrum[ k .< 2π/Lx ] .= 0 # make sure forcing does not have power at k=0 component\nε0 = parsevalsum(forcing_spectrum .* gr.invKrsq/2, gr) / (gr.Lx*gr.Ly)\n@. forcing_spectrum = ε/ε0 * forcing_spectrum  # normalization so that forcing injects energy ε per domain area per unit time\n\nseed!(1234) # reset of the random number generator for reproducibility\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"Next we construct function calcF! that computes a forcing realization every timestep","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"function calcF!(Fh, sol, t, clock, vars, params, grid)\n  ξ = ArrayType(dev)(exp.(2π*im*rand(eltype(grid), size(sol)))/sqrt(clock.dt))\n  @. Fh = ξ*sqrt.(forcing_spectrum)\n  Fh[abs.(grid.Krsq).==0] .= 0\n  nothing\nend\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Problem-setup","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Problem setup","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We initialize a Problem by providing a set of keyword arguments. Not providing a viscosity coefficient ν leads to the module's default value: ν=0. In this example numerical instability due to accumulation of enstrophy in high wavenumbers is taken care with the FilteredTimestepper we picked.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"prob = BarotropicQGQL.Problem(dev; nx=nx, Lx=Lx, β=β, μ=μ, dt=dt, stepper=stepper,\n                              calcF=calcF!, stochastic=true)\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"and define some shortcuts.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"sol, cl, vs, pr, gr = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx, y = gr.x, gr.y\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"First let's see how a forcing realization looks like.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"calcF!(vs.Fh, sol, 0.0, cl, vs, pr, gr)\n\nheatmap(x, y, irfft(vs.Fh, gr.nx),\n     aspectratio = 1,\n               c = :balance,\n            clim = (-8, 8),\n           xlims = (-gr.Lx/2, gr.Lx/2),\n           ylims = (-gr.Ly/2, gr.Ly/2),\n          xticks = -3:3,\n          yticks = -3:3,\n          xlabel = \"x\",\n          ylabel = \"y\",\n           title = \"a forcing realization\",\n      framestyle = :box)","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Setting-initial-conditions","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"Our initial condition is simply fluid at rest.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"BarotropicQGQL.set_zeta!(prob, zeros(gr.nx, gr.ny))\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Diagnostics","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Diagnostics","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"Create Diagnostics – energy and enstrophy are functions imported at the top.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"E = Diagnostic(energy, prob; nsteps=nsteps)\nZ = Diagnostic(enstrophy, prob; nsteps=nsteps)\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We can also define our custom diagnostics via functions.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"function zetaMean(prob)\n  sol = prob.sol\n  sol[1, :]\nend\n\nzMean = Diagnostic(zetaMean, prob; nsteps=nsteps, freq=10)  # the zonal-mean vorticity\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We combile all diags in a list.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"diags = [E, Z, zMean] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Output","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Output","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"filepath = \".\"\nplotpath = \"./plots_forcedbetaQLturb\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"forcedbetaQLturb.jld2\")\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"Do some basic file management,","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"and then create Output.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nget_u(prob) = irfft(im*g.l.*g.invKrsq.*sol, g.nx)\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nnothing # hide","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Visualizing-the-simulation","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We define a function that plots the vorticity and streamfunction fields, the corresponding zonal-mean vorticity and zonal-mean zonal velocity and timeseries of energy and enstrophy.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"function plot_output(prob)\n  ζ̄, ζ′= prob.vars.Zeta, prob.vars.zeta\n  ζ = @. ζ̄ + ζ′\n  ψ̄, ψ′= prob.vars.Psi,  prob.vars.psi\n  ψ = @. ψ̄ + ψ′\n  ζ̄ₘ = mean(ζ̄, dims=1)'\n  ūₘ = mean(prob.vars.U, dims=1)'\n\n  pζ = heatmap(x, y, ζ,\n       aspectratio = 1,\n            legend = false,\n                 c = :balance,\n              clim = (-8, 8),\n             xlims = (-gr.Lx/2, gr.Lx/2),\n             ylims = (-gr.Ly/2, gr.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"vorticity ζ=∂v/∂x-∂u/∂y\",\n        framestyle = :box)\n\n  pψ = contourf(x, y, ψ,\n            levels = -0.32:0.04:0.32,\n       aspectratio = 1,\n         linewidth = 1,\n            legend = false,\n              clim = (-0.22, 0.22),\n                 c = :viridis,\n             xlims = (-gr.Lx/2, gr.Lx/2),\n             ylims = (-gr.Ly/2, gr.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"streamfunction ψ\",\n        framestyle = :box)\n\n  pζm = plot(ζ̄ₘ, y,\n            legend = false,\n         linewidth = 2,\n             alpha = 0.7,\n            yticks = -3:3,\n             xlims = (-3, 3),\n            xlabel = \"zonal mean ζ\",\n            ylabel = \"y\")\n  plot!(pζm, 0*y, y, linestyle=:dash, linecolor=:black)\n\n  pum = plot(ūₘ, y,\n            legend = false,\n         linewidth = 2,\n             alpha = 0.7,\n            yticks = -3:3,\n             xlims = (-0.5, 0.5),\n            xlabel = \"zonal mean u\",\n            ylabel = \"y\")\n  plot!(pum, 0*y, y, linestyle=:dash, linecolor=:black)\n\n  pE = plot(1,\n             label = \"energy\",\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 4.1),\n             ylims = (0, 0.05),\n            xlabel = \"μt\")\n\n  pZ = plot(1,\n             label = \"enstrophy\",\n         linecolor = :red,\n            legend = :bottomright,\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 4.1),\n             ylims = (0, 5),\n            xlabel = \"μt\")\n\n  l = @layout grid(2, 3)\n  p = plot(pζ, pζm, pE, pψ, pum, pZ, layout=l, size = (1000, 600), dpi=150)\n\n  return p\nend","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Time-stepping-the-Problem-forward","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"We time-step the Problem forward in time.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"p = plot_output(prob)\n\nstartwalltime = time()\n\nanim = @animate for j=0:Int(nsteps/nsubs)\n\n  cfl = cl.dt*maximum([maximum(vs.v)/gr.dy, maximum(vs.u+vs.U)/gr.dx])\n\n  log = @sprintf(\"step: %04d, t: %d, cfl: %.2f, E: %.4f, Q: %.4f, walltime: %.2f min\",\n    cl.step, cl.t, cfl, E.data[E.i], Z.data[Z.i],\n    (time()-startwalltime)/60)\n\n  if j%(1000/nsubs)==0; println(log) end\n\n  p[1][1][:z] = @. vs.zeta + vs.Zeta\n  p[1][:title] = \"vorticity, μt=\"*@sprintf(\"%.2f\", μ*cl.t)\n  p[4][1][:z] = @. vs.psi + vs.Psi\n  p[2][1][:x] = mean(vs.Zeta, dims=1)'\n  p[5][1][:x] = mean(vs.U, dims=1)'\n  push!(p[3][1], μ*E.t[E.i], E.data[E.i])\n  push!(p[6][1], μ*Z.t[Z.i], Z.data[Z.i])\n\n  stepforward!(prob, diags, nsubs)\n  BarotropicQGQL.updatevars!(prob)\n\nend\n\nmp4(anim, \"barotropicqgql_betaforced.mp4\", fps=18)","category":"page"},{"location":"generated/barotropicqgql_betaforced/#Save","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Save","text":"","category":"section"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"Finally save the last snapshot.","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), cl.step)\nsavefig(savename)","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"","category":"page"},{"location":"generated/barotropicqgql_betaforced/","page":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","title":"Quasi-Linear forced-dissipative barotropic QG beta-plane turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/multilayerqg_2layer.jl\"","category":"page"},{"location":"generated/multilayerqg_2layer/#Phillips-model-of-Baroclinic-Instability","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"This example can be run online via (Image: ). Also, it can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"A simulation of the growth of barolinic instability in the Phillips 2-layer model when we impose a vertical mean flow shear as a difference Delta U in the imposed, domain-averaged, zonal flow at each layer.","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"using FourierFlows, Plots, Printf\n\nusing FFTW: rfft, irfft\nimport GeophysicalFlows.MultilayerQG\nimport GeophysicalFlows.MultilayerQG: energies","category":"page"},{"location":"generated/multilayerqg_2layer/#Choosing-a-device:-CPU-or-GPU","page":"Phillips model of Baroclinic Instability","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Numerical-parameters-and-time-stepping-parameters","page":"Phillips model of Baroclinic Instability","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"nx = 128        # 2D resolution = nx^2\nny = nx\n\nstepper = \"FilteredRK4\"  # timestepper\ndt = 6e-3                # timestep\nnsteps = 7000            # total number of time-steps\nnsubs  = 25              # number of time-steps for plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Physical-parameters","page":"Phillips model of Baroclinic Instability","title":"Physical parameters","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Lx = 2π         # domain size\n μ = 5e-2       # bottom drag\n β = 5          # the y-gradient of planetary PV\n\nnlayers = 2      # number of layers\nf0, g = 1, 1     # Coriolis parameter and gravitational constant\n H = [0.2, 0.8]  # the rest depths of each layer\n ρ = [4.0, 5.0]  # the density of each layer\n\n U = zeros(nlayers) # the imposed mean zonal flow in each layer\n U[1] = 1.0\n U[2] = 0.0\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Problem-setup","page":"Phillips model of Baroclinic Instability","title":"Problem setup","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"We initialize a Problem by providing a set of keyword arguments,","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"prob = MultilayerQG.Problem(nlayers, dev; nx=nx, Lx=Lx, f0=f0, g=g, H=H, ρ=ρ, U=U, dt=dt, stepper=stepper, μ=μ, β=β)\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"and define some shortcuts.","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"sol, cl, pr, vs, gr = prob.sol, prob.clock, prob.params, prob.vars, prob.grid\nx, y = gr.x, gr.y\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Setting-initial-conditions","page":"Phillips model of Baroclinic Instability","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Our initial condition is some small amplitude random noise. We smooth our initial condidtion using the timestepper's high-wavenumber filter.","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"q_i  = 4e-3randn((nx, ny, nlayers))\nqh_i = prob.timestepper.filter .* rfft(q_i, (1, 2)) # only apply rfft in dims=1, 2\nq_i  = irfft(qh_i, gr.nx, (1, 2)) # only apply irfft in dims=1, 2\n\nMultilayerQG.set_q!(prob, q_i)\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Diagnostics","page":"Phillips model of Baroclinic Instability","title":"Diagnostics","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Create Diagnostics – energies function is imported at the top.","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"E = Diagnostic(energies, prob; nsteps=nsteps)\ndiags = [E] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Output","page":"Phillips model of Baroclinic Instability","title":"Output","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"filepath = \".\"\nplotpath = \"./plots_2layer\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"2layer.jld2\")\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Do some basic file management","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"And then create Output","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nfunction get_u(prob)\n  @. v.qh = sol\n  streamfunctionfrompv!(v.ψh, v.qh, p, g)\n  @. v.uh = -im * g.l * v.ψh\n  invtransform!(v.u, v.uh, p)\n  return v.u\nend\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nnothing #hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Visualizing-the-simulation","page":"Phillips model of Baroclinic Instability","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"We define a function that plots the potential vorticity field and the evolution of energy and enstrophy.","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"symlims(data) = maximum(abs.(extrema(data))) |> q -> (-q, q)\n\nfunction plot_output(prob)\n\n  l = @layout grid(2, 3)\n  p = plot(layout=l, size = (1000, 600), dpi=150)\n\n  for m in 1:nlayers\n    heatmap!(p[(m-1)*3+1], x, y, vs.q[:, :, m],\n         aspectratio = 1,\n              legend = false,\n                   c = :balance,\n               xlims = (-gr.Lx/2, gr.Lx/2),\n               ylims = (-gr.Ly/2, gr.Ly/2),\n               clims = symlims,\n              xticks = -3:3,\n              yticks = -3:3,\n              xlabel = \"x\",\n              ylabel = \"y\",\n               title = \"q_\"*string(m),\n          framestyle = :box)\n\n    contourf!(p[(m-1)*3+2], x, y, vs.ψ[:, :, m],\n              levels = 8,\n         aspectratio = 1,\n              legend = false,\n                   c = :viridis,\n               xlims = (-gr.Lx/2, gr.Lx/2),\n               ylims = (-gr.Ly/2, gr.Ly/2),\n               clims = symlims,\n              xticks = -3:3,\n              yticks = -3:3,\n              xlabel = \"x\",\n              ylabel = \"y\",\n               title = \"ψ_\"*string(m),\n          framestyle = :box)\n  end\n\n  plot!(p[3], 2,\n             label = [\"KE1\" \"KE2\"],\n            legend = :bottomright,\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 2.35),\n             ylims = (5e-10, 1e0),\n            yscale = :log10,\n            yticks = 10.0.^(-9:2:0),\n            xlabel = \"μt\")\n\n  plot!(p[6], 1,\n             label = \"PE\",\n            legend = :bottomright,\n         linecolor = :red,\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 2.35),\n             ylims = (1e-10, 1e0),\n            yscale = :log10,\n            yticks = 10.0.^(-10:2:0),\n            xlabel = \"μt\")\n\nend\nnothing # hide","category":"page"},{"location":"generated/multilayerqg_2layer/#Time-stepping-the-Problem-forward","page":"Phillips model of Baroclinic Instability","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Finally, we time-step the Problem forward in time.","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"p = plot_output(prob)\n\nstartwalltime = time()\n\nanim = @animate for j=0:Int(nsteps/nsubs)\n\n  cfl = cl.dt*maximum([maximum(vs.u)/gr.dx, maximum(vs.v)/gr.dy])\n\n  log = @sprintf(\"step: %04d, t: %.1f, cfl: %.2f, KE1: %.4f, KE2: %.4f, PE: %.4f, walltime: %.2f min\", cl.step, cl.t, cfl, E.data[E.i][1][1], E.data[E.i][1][2], E.data[E.i][2][1], (time()-startwalltime)/60)\n\n  if j%(1000/nsubs)==0; println(log) end\n\n  for m in 1:nlayers\n    p[(m-1)*3+1][1][:z] = @. vs.q[:, :, m]\n    p[(m-1)*3+2][1][:z] = @. vs.ψ[:, :, m]\n  end\n\n  push!(p[3][1], μ*E.t[E.i], E.data[E.i][1][1])\n  push!(p[3][2], μ*E.t[E.i], E.data[E.i][1][2])\n  push!(p[6][1], μ*E.t[E.i], E.data[E.i][2][1])\n\n  stepforward!(prob, diags, nsubs)\n  MultilayerQG.updatevars!(prob)\nend\n\nmp4(anim, \"multilayerqg_2layer.mp4\", fps=18)","category":"page"},{"location":"generated/multilayerqg_2layer/#Save","page":"Phillips model of Baroclinic Instability","title":"Save","text":"","category":"section"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"Finally save the last snapshot.","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), cl.step)\nsavefig(savename)","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"","category":"page"},{"location":"generated/multilayerqg_2layer/","page":"Phillips model of Baroclinic Instability","title":"Phillips model of Baroclinic Instability","text":"This page was generated using Literate.jl.","category":"page"},{"location":"modules/barotropicqg/#BarotropicQG-Module","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"","category":"section"},{"location":"modules/barotropicqg/#Basic-Equations","page":"BarotropicQG Module","title":"Basic Equations","text":"","category":"section"},{"location":"modules/barotropicqg/","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"This module solves the quasi-geostrophic barotropic vorticity equation on a beta-plane of variable fluid depth H-h(xy). The flow is obtained through a streamfunction psi as (u upsilon) = (-partial_ypsi partial_xpsi). All flow fields can be obtained from the quasi-geostrophic potential vorticity (QGPV). Here the QGPV is","category":"page"},{"location":"modules/barotropicqg/","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"underbracef_0 + beta y_textplanetary PV + underbrace(partial_x upsilon\n\t- partial_y u)_textrelative vorticity +\n\tunderbracefracf_0 hH_texttopographic PV","category":"page"},{"location":"modules/barotropicqg/","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"The dynamical variable is the component of the vorticity of the flow normal to the plane of motion, zetaequiv partial_x upsilon- partial_y u = nabla^2psi. Also, we denote the topographic PV with etaequiv f_0 hH. Thus, the equation solved by the module is:","category":"page"},{"location":"modules/barotropicqg/","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"partial_t zeta + mathsfJ(psi underbracezeta + eta_equiv q) +\nbetapartial_xpsi = underbrace-leftmu + nu(-1)^n_nu nabla^2n_nu\nright zeta _textrmdissipation + f ","category":"page"},{"location":"modules/barotropicqg/","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"where mathsfJ(a b) = (partial_x a)(partial_y b)-(partial_y a)(partial_x b). On the right hand side, f(xyt) is forcing, mu is linear drag, and nu is hyperviscosity. Plain old viscosity corresponds to n_nu=1. The sum of relative vorticity and topographic PV is denoted with qequivzeta+eta.","category":"page"},{"location":"modules/barotropicqg/#Implementation","page":"BarotropicQG Module","title":"Implementation","text":"","category":"section"},{"location":"modules/barotropicqg/","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"The equation is time-stepped forward in Fourier space:","category":"page"},{"location":"modules/barotropicqg/","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"partial_t widehatzeta = - widehatmathsfJ(psi q) +betafracmathrmik_xk^2widehatzeta -left(mu\n+nu k^2n_nuright) widehatzeta  + widehatf ","category":"page"},{"location":"modules/barotropicqg/","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"In doing so the Jacobian is computed in the conservative form: mathsfJ(fg) = partial_y  (partial_x f) g -partial_x (partial_y f) g.","category":"page"},{"location":"modules/barotropicqg/","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"Thus:","category":"page"},{"location":"modules/barotropicqg/","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"mathcalL = betafracmathrmik_xk^2 - mu - nu k^2n_nu ","category":"page"},{"location":"modules/barotropicqg/","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"mathcalN(widehatzeta) = - mathrmik_x mathrmFFT(u q)-\n\tmathrmik_y mathrmFFT(upsilon q) ","category":"page"},{"location":"modules/barotropicqg/#Examples","page":"BarotropicQG Module","title":"Examples","text":"","category":"section"},{"location":"modules/barotropicqg/","page":"BarotropicQG Module","title":"BarotropicQG Module","text":"examples/barotropicqg_betadecay.jl: A script that simulates decaying quasi-geostrophic flow on a beta-plane demonstrating zonation.\nexamples/barotropicqg_betaforced.jl: A script that simulates forced-dissipative quasi-geostrophic flow on a beta-plane demonstrating zonation. The forcing is temporally delta-correlated and its spatial structure is isotropic with power in a narrow annulus of total radius kf in wavenumber space.\nexamples/barotropicqg_acc.jl: A script that simulates barotropic quasi-geostrophic flow above topography reproducing the results of the paper by\nConstantinou, N. C. (2018). A barotropic model of eddy saturation. J. Phys. Oceanogr., 48 (2), 397-411.","category":"page"},{"location":"modules/barotropicqgql/#BarotropicQGQL-Module","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"","category":"section"},{"location":"modules/barotropicqgql/#Basic-Equations","page":"BarotropicQGQL Module","title":"Basic Equations","text":"","category":"section"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"This module solves the quasi-linear quasi-geostrophic barotropic vorticity equation on a beta-plane of variable fluid depth H-h(xy).  Quasi-linear refers to the dynamics that neglect the eddy–eddy interactions in the eddy evolution equation after an eddy–mean flow decomposition, e.g., ","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"phi(x y t) = overlinephi(y t) + phi(xyt) ","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"where overline above denotes a zonal mean, overlinephi(y t) = int phi(x y t)mathrmdxL_x, and prime denotes deviations from the zonal mean. This approximation is used in many process-model studies of zonation, e.g., ","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"Farrell, B. F. and Ioannou, P. J. (2003). Structural stability of turbulent jets. J. Atmos. Sci., 60, 2101-2118.\nSrinivasan, K. and Young, W. R. (2012). Zonostrophic instability. J. Atmos. Sci., 69 (5), 1633-1656.\nConstantinou, N. C., Farrell, B. F., and Ioannou, P. J. (2014). Emergence and equilibration of jets in beta-plane turbulence: applications of Stochastic Structural Stability Theory. J. Atmos. Sci., 71 (5), 1818-1842.","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"As in the BarotropicQG module, the flow is obtained through a streamfunction psi as (u upsilon) = (-partial_ypsi partial_xpsi). All flow fields can be obtained from the quasi-geostrophic potential vorticity (QGPV). Here the QGPV is","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"underbracef_0 + beta y_textplanetary PV + underbrace(partial_x upsilon\n\t- partial_y u)_textrelative vorticity +\n\tunderbracefracf_0 hH_texttopographic PV","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"The dynamical variable is the component of the vorticity of the flow normal to the plane of motion, zetaequiv partial_x upsilon- partial_y u = nabla^2psi. Also, we denote the topographic PV with etaequiv f_0 hH. After we apply the eddy-mean flow decomposition above, the QGPV dynamics are:","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"partial_t overlinezeta + mathsfJ(overlinepsi underbraceoverlinezeta + overlineeta_equiv overlineq) + overlinemathsfJ(psi underbracezeta + eta_equiv q) = underbrace-leftmu + nu(-1)^n_nu nabla^2n_nu\nright overlinezeta _textrmdissipation  ","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"partial_t zeta + mathsfJ(psi overlineq) + mathsfJ(overlinepsi q) + underbracemathsfJ(psi q) - overlinemathsfJ(psi q)_textrmEENL + \nbetapartial_xpsi = underbrace-leftmu + nu(-1)^n_nu nabla^2n_nu\nright zeta_textrmdissipation + f ","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"where mathsfJ(a b) = (partial_x a)(partial_y b)-(partial_y a)(partial_x b). On the right hand side, f(xyt) is forcing (which is assumed to have zero mean, overlinef=0), mu is linear drag, and nu is hyperviscosity. Plain old viscosity corresponds to n_nu=1. The sum of relative vorticity and topographic PV is denoted with qequivzeta+eta.","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"Quasi-linear dynamics neglect the term eddy-eddy nonlinearity (EENL) term above.","category":"page"},{"location":"modules/barotropicqgql/#Implementation","page":"BarotropicQGQL Module","title":"Implementation","text":"","category":"section"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"The equation is time-stepped forward in Fourier space:","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"partial_t widehatzeta = - widehatmathsfJ(psi q)^textrmQL +betafracmathrmik_xk^2widehatzeta -left(mu\n+nu k^2n_nuright) widehatzeta  + widehatf ","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"In doing so the Jacobian is computed in the conservative form: mathsfJ(fg) = partial_y  (partial_x f) g -partial_x (partial_y f) g. The superscript QL in the Jacobian term above denotes that remove triad interactions that correspond to the EENL term.","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"Thus:","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"mathcalL = betafracmathrmik_xk^2 - mu - nu k^2n_nu ","category":"page"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"mathcalN(widehatzeta) = - mathrmik_x mathrmFFT(u q)^textrmQL-\n\tmathrmik_y mathrmFFT(upsilon q)^textrmQL ","category":"page"},{"location":"modules/barotropicqgql/#Examples","page":"BarotropicQGQL Module","title":"Examples","text":"","category":"section"},{"location":"modules/barotropicqgql/","page":"BarotropicQGQL Module","title":"BarotropicQGQL Module","text":"examples/barotropicqgql_betaforced.jl: A script that simulates forced-dissipative quasi-linear quasi-geostrophic flow on a beta-plane demonstrating zonation. The forcing is temporally delta-correlated and its spatial structure is isotropic with power in a narrow annulus of total radius kf in wavenumber space. This example demonstrates that the anisotropic inverse energy cascade is not required for zonation.","category":"page"},{"location":"modules/twodnavierstokes/#TwoDNavierStokes-Module","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"","category":"section"},{"location":"modules/twodnavierstokes/#Basic-Equations","page":"TwoDNavierStokes Module","title":"Basic Equations","text":"","category":"section"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"This module solves two-dimensional incompressible turbulence. The flow is given through a streamfunction psi as (uupsilon) = (-partial_ypsi partial_xpsi). The dynamical variable used here is the component of the vorticity of the flow normal to the plane of motion, zeta=partial_x upsilon- partial_y u = nabla^2psi. The equation solved by the module is:","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"partial_t zeta + mathsfJ(psi zeta) = underbrace-leftmu(-1)^n_mu nabla^2n_mu\n+nu(-1)^n_nu nabla^2n_nuright zeta_textrmdissipation + f ","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"where mathsfJ(a b) = (partial_x a)(partial_y b)-(partial_y a)(partial_x b). On the right hand side, f(xyt) is forcing, mu is hypoviscosity, and nu is hyperviscosity. Plain old linear drag corresponds to n_mu=0, while normal viscosity corresponds to n_nu=1.","category":"page"},{"location":"modules/twodnavierstokes/#Implementation","page":"TwoDNavierStokes Module","title":"Implementation","text":"","category":"section"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"The equation is time-stepped forward in Fourier space:","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"partial_t widehatzeta = - widehatmathsfJ(psi zeta) -left(mu k^2n_mu\n+nu k^2n_nuright) widehatzeta  + widehatf ","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"In doing so the Jacobian is computed in the conservative form: mathsfJ(ab) = partial_y  (partial_x a) b -partial_x (partial_y a) b.","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"Thus:","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"mathcalL = -mu k^-2n_mu - nu k^2n_nu ","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"mathcalN(widehatzeta) = - mathrmik_x mathrmFFT(u zeta)-\n\tmathrmik_y mathrmFFT(upsilon zeta) + widehatf ","category":"page"},{"location":"modules/twodnavierstokes/#AbstractTypes-and-Functions","page":"TwoDNavierStokes Module","title":"AbstractTypes and Functions","text":"","category":"section"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"Params","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"For the unforced case (f=0) parameters AbstractType is build with Params and it includes:","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"ν:   Float; viscosity or hyperviscosity coefficient.\nnν: Integer0; the order of viscosity n_nu. Case n_nu=1 gives normal viscosity.\nμ: Float; bottom drag or hypoviscosity coefficient.\nnμ: Integerge 0; the order of hypodrag n_mu. Case n_mu=0 gives plain linear drag mu.","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"For the forced case (fne 0) parameters AbstractType is build with ForcedParams. It includes all parameters in Params and additionally:","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"calcF!: Function that calculates the forcing widehatf","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"Vars","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"For the unforced case (f=0) variables AbstractType is build with Vars and it includes:","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"zeta: Array of Floats; relative vorticity.\nu: Array of Floats; x-velocity, u.\nv: Array of Floats; y-velocity, upsilon.\nsol: Array of Complex; the solution, widehatzeta.\nzetah: Array of Complex; the Fourier transform widehatzeta.\nuh: Array of Complex; the Fourier transform widehatu.\nvh: Array of Complex; the Fourier transform widehatupsilon.","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"For the forced case (fne 0) variables AbstractType is build with ForcedVars. It includes all variables in Vars and additionally:","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"Fh: Array of Complex; the Fourier transform widehatf.\nprevsol: Array of Complex; the values of the solution sol at the previous time-step (useful for calculating the work done by the forcing).","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"calcN! function","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"The nonlinear term mathcalN(widehatzeta) is computed via functions:","category":"page"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"calcN_advection!: computes - widehatmathsfJ(psi zeta) and stores it in array N.\ncalcN_forced!: computes - widehatmathsfJ(psi zeta) via calcN_advection! and then adds to it the forcing widehatf computed via calcF! function. Also saves the solution widehatzeta of the previous time-step in array prevsol.\nupdatevars!: uses sol to compute zeta, u, upsilon, widehatu, and widehatupsilon and stores them into corresponding arrays of Vars/ForcedVars.","category":"page"},{"location":"modules/twodnavierstokes/#Examples","page":"TwoDNavierStokes Module","title":"Examples","text":"","category":"section"},{"location":"modules/twodnavierstokes/","page":"TwoDNavierStokes Module","title":"TwoDNavierStokes Module","text":"examples/twodnavierstokes_decaying.jl: A script that simulates decaying two-dimensional turbulence reproducing the results of the paper by\nMcWilliams, J. C. (1984). The emergence of isolated coherent vortices in turbulent flow. J. Fluid Mech., 146, 21-43.\nexamples/twodnavierstokes_stochasticforcing.jl: A script that simulates forced-dissipative two-dimensional turbulence with isotropic temporally delta-correlated stochastic forcing.","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/twodnavierstokes_decaying.jl\"","category":"page"},{"location":"generated/twodnavierstokes_decaying/#D-decaying-turbulence","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"This example can be run online via (Image: ). Also, it can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"A simulation of decaying two-dimensional turbulence.","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"using FourierFlows, Printf, Random, Plots\n\nusing Random: seed!\nusing FFTW: rfft, irfft\n\nimport GeophysicalFlows.TwoDNavierStokes\nimport GeophysicalFlows.TwoDNavierStokes: energy, enstrophy\nimport GeophysicalFlows: peakedisotropicspectrum","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Choosing-a-device:-CPU-or-GPU","page":"2D decaying turbulence","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Numerical,-domain,-and-simulation-parameters","page":"2D decaying turbulence","title":"Numerical, domain, and simulation parameters","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"First, we pick some numerical and physical parameters for our model.","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"n, L  = 128, 2π             # grid resolution and domain length\nnothing # hide\n\n# Then we pick the time-stepper parameters\n    dt = 1e-2  # timestep\nnsteps = 4000  # total number of steps\n nsubs = 20    # number of steps between each plot\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Problem-setup","page":"2D decaying turbulence","title":"Problem setup","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"We initialize a Problem by providing a set of keyword arguments. The stepper keyword defines the time-stepper to be used.","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"prob = TwoDNavierStokes.Problem(dev; nx=n, Lx=L, ny=n, Ly=L, dt=dt, stepper=\"FilteredRK4\")\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Next we define some shortcuts for convenience.","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"sol, cl, vs, gr = prob.sol, prob.clock, prob.vars, prob.grid\nx, y = gr.x, gr.y\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Setting-initial-conditions","page":"2D decaying turbulence","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Our initial condition closely tries to reproduce the initial condition used in the paper by McWilliams (JFM, 1984)","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"seed!(1234)\nk₀, E₀ = 6, 0.5\nζ₀ = peakedisotropicspectrum(gr, k₀, E₀, mask=prob.timestepper.filter)\nTwoDNavierStokes.set_zeta!(prob, ζ₀)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Let's plot the initial vorticity field:","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"heatmap(x, y, vs.zeta,\n         aspectratio = 1,\n              c = :balance,\n           clim = (-40, 40),\n          xlims = (-L/2, L/2),\n          ylims = (-L/2, L/2),\n         xticks = -3:3,\n         yticks = -3:3,\n         xlabel = \"x\",\n         ylabel = \"y\",\n          title = \"initial vorticity\",\n     framestyle = :box)","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Diagnostics","page":"2D decaying turbulence","title":"Diagnostics","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Create Diagnostics – energy and enstrophy functions are imported at the top.","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"E = Diagnostic(energy, prob; nsteps=nsteps)\nZ = Diagnostic(enstrophy, prob; nsteps=nsteps)\ndiags = [E, Z] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Output","page":"2D decaying turbulence","title":"Output","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"filepath = \".\"\nplotpath = \"./plots_decayingTwoDNavierStokes\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"decayingTwoDNavierStokes.jld2\")\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Do some basic file management","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"And then create Output","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"get_sol(prob) = Array(prob.sol) # extracts the Fourier-transformed solution\nget_u(prob) = Array(irfft(im*gr.l.*gr.invKrsq.*sol, gr.nx))\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nsaveproblem(out)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Visualizing-the-simulation","page":"2D decaying turbulence","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"We initialize a plot with the vorticity field and the time-series of energy and enstrophy diagnostics.","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"p1 = heatmap(x, y, vs.zeta,\n         aspectratio = 1,\n                   c = :balance,\n                clim = (-40, 40),\n               xlims = (-L/2, L/2),\n               ylims = (-L/2, L/2),\n              xticks = -3:3,\n              yticks = -3:3,\n              xlabel = \"x\",\n              ylabel = \"y\",\n               title = \"vorticity, t=\"*@sprintf(\"%.2f\", cl.t),\n          framestyle = :box)\n\np2 = plot(2, # this means \"a plot with two series\"\n               label = [\"energy E(t)/E(0)\" \"enstrophy Z(t)/Z(0)\"],\n              legend = :right,\n           linewidth = 2,\n               alpha = 0.7,\n              xlabel = \"t\",\n               xlims = (0, 41),\n               ylims = (0, 1.1))\n\nl = @layout grid(1, 2)\np = plot(p1, p2, layout = l, size = (900, 400))","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Time-stepping-the-Problem-forward","page":"2D decaying turbulence","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"We time-step the Problem forward in time.","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"startwalltime = time()\n\nanim = @animate for j = 0:Int(nsteps/nsubs)\n\n  log = @sprintf(\"step: %04d, t: %d, ΔE: %.4f, ΔZ: %.4f, walltime: %.2f min\",\n      cl.step, cl.t, E.data[E.i]/E.data[1], Z.data[Z.i]/Z.data[1], (time()-startwalltime)/60)\n\n  if j%(1000/nsubs)==0; println(log) end\n\n  p[1][1][:z] = vs.zeta\n  p[1][:title] = \"vorticity, t=\"*@sprintf(\"%.2f\", cl.t)\n  push!(p[2][1], E.t[E.i], E.data[E.i]/E.data[1])\n  push!(p[2][2], Z.t[Z.i], Z.data[Z.i]/Z.data[1])\n\n  stepforward!(prob, diags, nsubs)\n  TwoDNavierStokes.updatevars!(prob)\n\nend\n\nmp4(anim, \"twodturb.mp4\", fps=18)","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"Last we save the output.","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"saveoutput(out)","category":"page"},{"location":"generated/twodnavierstokes_decaying/#Radial-energy-spectrum","page":"2D decaying turbulence","title":"Radial energy spectrum","text":"","category":"section"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"After the simulation is done we plot the radial energy spectrum to illustrate how FourierFlows.radialspectrum can be used,","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"E  = @. 0.5*(vs.u^2 + vs.v^2) # energy density\nEh = rfft(E)                  # Fourier transform of energy density\nkr, Ehr = FourierFlows.radialspectrum(Eh, gr, refinement=1) # compute radial specturm of `Eh`\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"and we plot it.","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"plot(kr, abs.(Ehr),\n    linewidth = 2,\n        alpha = 0.7,\n       xlabel = \"kᵣ\", ylabel = \"∫ |Ê| kᵣ dk_θ\",\n        xlims = (5e-1, gr.nx),\n       xscale = :log10, yscale = :log10,\n        title = \"Radial energy spectrum\",\n       legend = false)","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"","category":"page"},{"location":"generated/twodnavierstokes_decaying/","page":"2D decaying turbulence","title":"2D decaying turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/twodnavierstokes_stochasticforcing.jl\"","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#D-forced-dissipative-turbulence","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"This example can be run online via (Image: ). Also, it can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"A simulation of forced-dissipative two-dimensional turbulence. We solve the two-dimensional vorticity equation with stochastic excitation and dissipation in the form of linear drag and hyperviscosity. As a demonstration, we compute how each of the forcing and dissipation terms contribute to the energy and the enstrophy budgets.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"using FourierFlows, Printf, Plots\n\nusing FourierFlows: parsevalsum\nusing Random: seed!\nusing FFTW: irfft\n\nimport GeophysicalFlows.TwoDNavierStokes\nimport GeophysicalFlows.TwoDNavierStokes: energy, energy_dissipation, energy_work, energy_drag\nimport GeophysicalFlows.TwoDNavierStokes: enstrophy, enstrophy_dissipation, enstrophy_work, enstrophy_drag","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Choosing-a-device:-CPU-or-GPU","page":"2D forced-dissipative turbulence","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"dev = CPU()    # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Numerical,-domain,-and-simulation-parameters","page":"2D forced-dissipative turbulence","title":"Numerical, domain, and simulation parameters","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"First, we pick some numerical and physical parameters for our model.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":" n, L  = 256, 2π             # grid resolution and domain length\n ν, nν = 2e-7, 2             # hyperviscosity coefficient and order\n μ, nμ = 1e-1, 0             # linear drag coefficient\ndt, tf = 0.005, 0.2/μ        # timestep and final time\n    nt = round(Int, tf/dt)   # total timesteps\n    ns = 4                   # how many intermediate times we want to plot\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Forcing","page":"2D forced-dissipative turbulence","title":"Forcing","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"We force the vorticity equation with stochastic excitation that is delta-correlated in time and while spatially homogeneously and isotropically correlated. The forcing has a spectrum with power in a ring in wavenumber space of radious k_f and width delta k_f, and it injects energy per unit area and per unit time equal to varepsilon.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"forcing_wavenumber = 14.0    # the central forcing wavenumber for a spectrum that is a ring in wavenumber space\nforcing_bandwidth  = 1.5     # the width of the forcing spectrum\nε = 0.001                    # energy input rate by the forcing\n\ngr   = TwoDGrid(dev, n, L)\nx, y = gr.x, gr.y\n\nforcing_spectrum = @. exp(-(sqrt(gr.Krsq)-forcing_wavenumber)^2/(2*forcing_bandwidth^2))\nforcing_spectrum[ gr.Krsq .< (2π/L*2)^2 ]  .= 0 # make sure that focing has no power for low wavenumbers\nforcing_spectrum[ gr.Krsq .> (2π/L*20)^2 ] .= 0 # make sure that focing has no power for high wavenumbers\nε0 = parsevalsum(forcing_spectrum.*gr.invKrsq/2.0, gr)/(gr.Lx*gr.Ly)\nforcing_spectrum .= ε/ε0 * forcing_spectrum # normalize forcing to inject energy ε\n\nseed!(1234)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"Next we construct function calcF! that computes a forcing realization every timestep","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"function calcF!(Fh, sol, t, cl, v, p, g)\n  ξ = ArrayType(dev)(exp.(2π*im*rand(eltype(gr), size(sol)))/sqrt(cl.dt))\n  ξ[1, 1] = 0\n  @. Fh = ξ*sqrt(forcing_spectrum)\n  nothing\nend\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Problem-setup","page":"2D forced-dissipative turbulence","title":"Problem setup","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"We initialize a Problem by providing a set of keyword arguments. The stepper keyword defines the time-stepper to be used.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"prob = TwoDNavierStokes.Problem(dev; nx=n, Lx=L, ν=ν, nν=nν, μ=μ, nμ=nμ, dt=dt, stepper=\"ETDRK4\",\n                                calcF=calcF!, stochastic=true)\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"Define some shortcuts for convenience.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"sol, cl, v, p, g = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"First let's see how a forcing realization looks like.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"calcF!(v.Fh, sol, 0.0, cl, v, p, g)\n\nheatmap(x, y, irfft(v.Fh, g.nx),\n     aspectratio = 1,\n               c = :balance,\n            clim = (-200, 200),\n           xlims = (-L/2, L/2),\n           ylims = (-L/2, L/2),\n          xticks = -3:3,\n          yticks = -3:3,\n          xlabel = \"x\",\n          ylabel = \"y\",\n           title = \"a forcing realization\",\n      framestyle = :box)","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Setting-initial-conditions","page":"2D forced-dissipative turbulence","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"Our initial condition is simply fluid at rest.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"TwoDNavierStokes.set_zeta!(prob, zeros(g.nx, g.ny))","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Diagnostics","page":"2D forced-dissipative turbulence","title":"Diagnostics","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"Create Diagnostics; the diagnostics are aimed to probe the energy budget.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"E = Diagnostic(energy,      prob, nsteps=nt) # energy\nR = Diagnostic(energy_drag,        prob, nsteps=nt) # dissipation by drag\nD = Diagnostic(energy_dissipation, prob, nsteps=nt) # dissipation by hyperviscosity\nW = Diagnostic(energy_work,        prob, nsteps=nt) # work input by forcing\nZ = Diagnostic(enstrophy,      prob, nsteps=nt) # energy\nRZ = Diagnostic(enstrophy_drag,        prob, nsteps=nt) # dissipation by drag\nDZ = Diagnostic(enstrophy_dissipation, prob, nsteps=nt) # dissipation by hyperviscosity\nWZ = Diagnostic(enstrophy_work,        prob, nsteps=nt) # work input by forcing\ndiags = [E, D, W, R, Z, DZ, WZ, RZ] # A list of Diagnostics types passed to \"stepforward!\" will  be updated every timestep.\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Visualizing-the-simulation","page":"2D forced-dissipative turbulence","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"We define a function that plots the vorticity field and the evolution of the diagnostics: energy and all terms involved in the energy budget. Last we confirm whether the energy budget is accurate, i.e., mathrmdEmathrmdt = W - R - D.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"function computetendencies_and_makeplot(prob, diags)\n  TwoDNavierStokes.updatevars!(prob)\n  E, D, W, R, Z, Dᶻ, Wᶻ, Rᶻ = diags\n\n  clocktime = round(μ*cl.t, digits=2)\n\n  i₀ = 1\n  dEdt_numerical = (E[(i₀+1):E.i] - E[i₀:E.i-1])/cl.dt #numerical first-order approximation of energy tendency\n  dZdt_numerical = (Z[(i₀+1):Z.i] - Z[i₀:Z.i-1])/cl.dt #numerical first-order approximation of enstrophy tendency\n  ii = (i₀):E.i-1\n  ii2 = (i₀+1):E.i\n\n  t = E.t[ii]\n  dEdt_computed = W[ii2] - D[ii] - R[ii]        # Stratonovich interpretation\n  dZdt_computed = Wᶻ[ii2] - Dᶻ[ii] - Rᶻ[ii]\n\n  residual_E = dEdt_computed - dEdt_numerical\n  residual_Z = dZdt_computed - dZdt_numerical\n\n  εᶻ = parsevalsum(forcing_spectrum / 2, g) / (g.Lx * g.Ly)\n\n  l = @layout grid(2,3)\n\n  pzeta = heatmap(x, y, v.zeta,\n            aspectratio = 1,\n            legend = false,\n                 c = :viridis,\n              clim = (-25, 25),\n             xlims = (-L/2, L/2),\n             ylims = (-L/2, L/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"μt\",\n            ylabel = \"y\",\n             title = \"∇²ψ(x, y, t=\"*@sprintf(\"%.2f\", cl.t)*\")\",\n        framestyle = :box)\n\n  pζ = plot(pzeta, size = (400, 400))\n\n  p1 = plot(μ*t, [W[ii2] ε.+0*t -D[ii] -R[ii]],\n             label = [\"work, W\" \"ensemble mean work, <W>\" \"dissipation, D\" \"drag, R=-2μE\"],\n         linestyle = [:solid :dash :solid :solid],\n         linewidth = 2,\n             alpha = 0.8,\n            xlabel = \"μt\",\n            ylabel = \"energy sources and sinks\")\n\n  p2 = plot(μ*t, [dEdt_computed[ii], dEdt_numerical],\n           label = [\"computed W-D\" \"numerical dE/dt\"],\n       linestyle = [:solid :dashdotdot],\n       linewidth = 2,\n           alpha = 0.8,\n          xlabel = \"μt\",\n          ylabel = \"dE/dt\")\n\n  p3 = plot(μ*t, residual_E,\n           label = \"residual dE/dt = computed - numerical\",\n       linewidth = 2,\n           alpha = 0.7,\n          xlabel = \"μt\")\n\n  p4 = plot(μ*t, [Wᶻ[ii2] εᶻ.+0*t -Dᶻ[ii] -Rᶻ[ii]],\n           label = [\"Enstrophy work, Wᶻ\" \"mean enstrophy work, <Wᶻ>\" \"enstrophy dissipation, Dᶻ\" \"enstrophy drag, Rᶻ=-2μZ\"],\n       linestyle = [:solid :dash :solid :solid],\n       linewidth = 2,\n           alpha = 0.8,\n          xlabel = \"μt\",\n          ylabel = \"enstrophy sources and sinks\")\n\n\n  p5 = plot(μ*t, [dZdt_computed[ii], dZdt_numerical],\n         label = [\"computed Wᶻ-Dᶻ\" \"numerical dZ/dt\"],\n     linestyle = [:solid :dashdotdot],\n     linewidth = 2,\n         alpha = 0.8,\n        xlabel = \"μt\",\n        ylabel = \"dZ/dt\")\n\n  p6 = plot(μ*t, residual_Z,\n         label = \"residual dZ/dt = computed - numerical\",\n     linewidth = 2,\n         alpha = 0.7,\n        xlabel = \"μt\")\n\n\n  pbudgets = plot(p1, p2, p3, p4, p5, p6, layout=l, size = (1300, 900))\n\n  return pζ, pbudgets\nend\nnothing # hide","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Time-stepping-the-Problem-forward","page":"2D forced-dissipative turbulence","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"Finally, we time-step the Problem forward in time.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"startwalltime = time()\nfor i = 1:ns\n  stepforward!(prob, diags, round(Int, nt/ns))\n  TwoDNavierStokes.updatevars!(prob)\n  cfl = cl.dt*maximum([maximum(v.u)/g.dx, maximum(v.v)/g.dy])\n\n  log = @sprintf(\"step: %04d, t: %.1f, cfl: %.3f, walltime: %.2f min\", cl.step, cl.t,\n        cfl, (time()-startwalltime)/60)\n\n  println(log)\nend","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/#Plot","page":"2D forced-dissipative turbulence","title":"Plot","text":"","category":"section"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"And now let's see what we got. We plot the output.","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"pζ, pbudgets = computetendencies_and_makeplot(prob, diags)\n\npbudgets","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"","category":"page"},{"location":"generated/twodnavierstokes_stochasticforcing/","page":"2D forced-dissipative turbulence","title":"2D forced-dissipative turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"forcing/#Forcing","page":"Forcing","title":"Forcing","text":"","category":"section"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Forcing of the equations is implemented in various modules. Forcing can be either  deterministic or stochastic (random). For deterministic forcing the implementation is  straightforward; for stochastic forcing there are two main train of thoughts:  Itô calculus and Stratonovich calculus.","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Both stochastic calculi give the same results. But once we decide to use one of  the two calculi we have to remain consistent and use that calculus for everywhere.  There is a lot of confusion and mostly the confusion stems from not using the same  stochastic calculus consistently throughout the computation but rather interchanging  between the two.","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"FourierFlows.jl uses Stratonovich calculus throughout. This choise was made  because Stratonovich calculus works the same with both stochastic and deterministic  forcing, i.e. with Stratonovich calculus we have the same chain rules for  differentiation for stochastic functions as the chain rules we learn in  normal-deterministic calculus). Therefore, the code written as is does not really  \"care\" of what forcing the user implements.","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"If you are interested in learning more regarding the two stochastic calculi and  how they are numerically implemented then read on; otherwise you can skip this  section of the documentation.","category":"page"},{"location":"forcing/#Stochastic-Differential-Equations-(SDEs)","page":"Forcing","title":"Stochastic Differential Equations (SDEs)","text":"","category":"section"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"A differential equation in the form:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"\tfracmathrmd xmathrmd t = f(x)quad x(t_0)=0","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"can also be written in an integral form:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"\tx(t) = int_t_0^t f(x(s))mathrmd s","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"In a similar manner, a stochastic differential equation","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"\tmathrmd x = f(x)mathrmd t + g(x)mathrmd W_tquad x(t_0)=0","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"with mathrmd W_t a white-noise process, can be written in an integral form as:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"\tx(t) = int_t_0^t f(x(s))mathrmd s + int_t_0^t g(x(s))mathrmd W_s ","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Of course now, the last integral is a stochastic integral and there is not a single  straight-forward way of computing it –- there are a lot of different ways we can  approximate it as a Riemannian sum and each of them leads to a different answer.  The two most popular ways for computing such stochastic integrals are:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"colorGreentextItô int_t_0^t g(x(s))mathrmd W_sapproxsum_j gleft(x(t_j)right)(W_j+1-W_j)\ncolorMagentatextStratonovich int_t_0^t g(x(s))mathrmd W_s approx sum_j gleft(xleft(tfrac12(t_j+t_j+1)right)right)(W_j+1-W_j)","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Because the white noise process is not continuous the two definitions do not converge to the same result; the two definitions give thoroughly different results. And to overcome that they come along with different chain rules, i.e., chain rules that are not necessarily the same as those in plain old calculus.","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"An SDE can be written also in differential form. Because we cannot formally form mathrmd Wmathrmd t, since W is nowhere differentiable, we write an SDE in differential form as:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"colorGreentextItô mathrmd x_t = f(x_t)mathrmd t + g(x_t)mathrmd W_t\ncolorMagentatextStratonovich mathrmd x_t = f(x_t) mathrmd t + g(x_t) circ mathrmd W_t","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"The circle in g(x_t)circmathrmd W_t is used to differentiate between Itô or Stratonovich calculus.","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"A variable change y=G(x) is done as follows according to the two different calculi:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"colorGreentextItô mathrmd y_t = fracmathrmd Gmathrmd xmathrmd x_t + tfrac12 g(x_t)^2 fracmathrmd^2 Gmathrmd x^2mathrmd t =left fracmathrmd Gmathrmd xf(x_t) + tfrac12 g(x_t)^2 fracmathrmd^2 Gmathrmd x^2rightmathrmd t + fracmathrmd Gmathrmd xg(x_t)mathrmd W_t\ncolorMagentatextStratonovich mathrmd y_t  = fracmathrmd Gmathrmd xmathrmd x_t =fracmathrmd Gmathrmd x f(x_t) mathrmd t + fracmathrmd Gmathrmd xg(x_t)circmathrmd W_t","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"The above are the so called stochastic chain rules. All derivatives of G are evaluated at x_t.","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"It's easy to see that the extra drift-term in Itô's interpretation of the stochastic integral, i.e., colorGreentfrac12 g^2 mathrmd^2Gmathrmd x^2  is exactly equal to the ensemble mean of the Stratonovich stochastic integral. That's because the Itô stochastic integral has, by construction, zero ensemble mean since at every instant the noise is multiplied with g evaluated before the action of the noise; g and mathrmd W are uncorrelated and thus:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"colorGreenleftlangle g(x_t)mathrmd W_t rightrangle =0quadtextwhilequad colorMagentaleftlangle g(x_t)circmathrmd W_t rightrangle ne 0","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"The above is demonstrated by evaluating the simple stochastic integral:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"colorGreentextItô leftlangle int_t_0^t W_smathrmd W_s rightrangle approxsum_j leftlangle W_j(W_j+1-W_j)rightrangle\ncolorGreenhspace73em = sum_j leftlangle W_j W_j+1rightrangle - leftlangle W_jW_jrightrangle sim sum_j t_j - t_j = 0 \ncolorMagentatextStratonovich leftlangleint_t_0^t W_scircmathrmd W_srightrangle approx sum_j leftlangle frac12(W_j + W_j+1) (W_j+1-W_j)rightrangle \ncolorMagentahspace73em = frac12sum_j leftlangle W_j+1 W_j+1rightrangle - leftlangle W_j W_jrightrangle  sim frac12sum_j t_j+1 - t_j = fract2","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"SDEs rarely can be solved in closed form; most often numerical solution of SDEs is brought to the rescue. Itô calculus has the advantage that is very easily implemented numerically. On the other hand, the chain rule in Stratonovich calculus coincides with that in normal calculus. This stems from the fact that in the Stratonovich interpretation the white noise process is as a series of colored noise processes with the de-correlation time tending to zero. This made Stratonovich calculus more popular in the physics community. A nice discussion on the differences and similarities between the two calculi is given by van Kampen.","category":"page"},{"location":"forcing/#A-simple-Stochastic-Differential-Equation-(SDE):-the-Ornstein–Uhlenbeck-process","page":"Forcing","title":"A simple Stochastic Differential Equation (SDE): the Ornstein–Uhlenbeck process","text":"","category":"section"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"One of the simpler SDEs is the Ornstein–Uhlenbeck process. A variation of which is:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"x(t) = int_t_0^t -mu x(s)mathrmd s + int_t_0^t sqrtsigmamathrmd W_s  tageqOU","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Note that in differential form this is:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"mathrmd x_t = -mu x_t mathrmd t + sqrtsigmamathrmd W_s  tageq1","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Luckily, here there is no need to distinguish between Itô and Stratonovich. This is because g is independent of x(t). But we stress that  this is often not the case; it is only a fortuitous coincident here.","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"How do we time-step this SDE numerically? Let us assume a discretization of time into time-steps of tau: t_j=(j-1)tau. (What follows can be easily carried on for non-uniform time discretization.) With that, we denote x_jequiv x(t_j). Then the Euler–Mayorama time-step scheme for \\eqref{eq:1} is","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"\tx_j+1 = x_j + (-mu x_j)tau + sqrtsigma(W_j+1-W_j)","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Now let us ask the following question: How can we compute the work done by the noise? In other words, if we are interested in the evolution of the \"energy\" Eequiv tfrac12 x^2, how is the noise term attributing in the growth of E? To answer that we first have to find the SDE that energy E obeys. But, in doing so, it is important to adopt a single interpretation for computing stochastic integrals as now a transformation of variables is needed. That is, depending on whether we choose to interpret the stochastic integrals according to Itô or to Stratonovich calculus, E evolves as:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"colorGreen textItô mathrmd E_t = left ( -2 mu E_t + tfrac12 sigma right ) mathrmd t + x_t sqrtsigma mathrmd W_t   tageqEito","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"colorMagenta textStratonovich mathrmd E_t = -2 mu E_t mathrmd t + x_t circ sqrtsigma mathrmd W_t  tageqEstr","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"How do we compute the work P done by the noise? It is:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"colorGreen textItô P_t = tfrac12 sigma mathrmd t + sqrtsigma x_t mathrmd W_t approx tfrac12 sigma + sqrtsigma x_j (W_j+1 - W_j)\ncolorMagenta textStratonovich P_t =  x_t circ sqrtsigma mathrmd W_t approx sqrtsigma x left ( tfrac12 (t_j + t_j+1) right ) (W_j+1-W_j)","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Say we didn't know the rules for transforming Stratonovich to Itô and we were wondering what is the extra drift term we have to include in the Itô formulations, i.e. the tfrac12sigma term. We can compute the Itô's drift-term using that it is exactly equal to langle x_t circ sqrtsigma mathrmd W_t rangle; and for the latter we can use the \"usual\" calculus. That is, rewrite \\eqref{eq:OU} as:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"dotx = -mu x + xi tageqOUcont","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"where xi(t) is understood to be the \"continuous\" version of the white-noise process which is formally only understood in terms of distributions. The forcing xi has the properties:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"left langle xi(t) right rangle = 0 quad textand quad left langle xi(t) xi(t) right rangle = sigma delta(t-t)","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Thus we need to compute langle P_t rangle = langle x(t) xi(t) rangle. But \\eqref{eq:OUcont} has formally the solution:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"x(t) = mathrme^-mu t x(0) + int_0^t mathrme^-mu(t-s) xi(s)  mathrmd s ","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"and utilizing the above we get","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"langle P_t rangle = langle x(t) xi(t) rangle\n=  mathrme^-mu t underbracelangle x(0) xi(t) rangle_=0 + int_0^t mathrme^-mu(t-s) langle xi(t)xi(s) rangle  mathrmd s\n= sigma int_0^t mathrme^-mu(t-s) delta(t-s)  mathrmd s = fracsigma2 ","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Above we used that int_0^tdelta(t-s)mathrmd s = tfrac12, which is consistent with Stratonovich symmetric interpretation of stochastic integrals.","category":"page"},{"location":"forcing/#Numerical-implementation","page":"Forcing","title":"Numerical implementation","text":"","category":"section"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"How do we time-step \\eqref{eq:Eito}? We use the Euler–Maruyama time-stepping scheme:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"\tE_j+1 = E_j + left(-2mu E_j + fracsigma2right)tau + sqrtsigmax_j(W_j+1-W_j)","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"However, we cannot use Euler–Maruyama for time-stepping \\eqref{eq:Estr} since the Euler–Maruyama is \"Itô\"-thinking. To time-step \\eqref{eq:Estr} we have to approximate g in the middle of the time-step. There are many ways to do that, one of which is the, so called, Euler–Heun method:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"\twidetildeE_j+1 = E_j + (-2mu E_j)tau + sqrtsigmax_j(W_j+1-W_j)\n\tE_j+1 = E_j + left(-2mu fracE_j+widetildeE_j+12right)tau + sqrtsigmafracx_j+x_j+12(W_j+1-W_j)","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"(Image: energy_comparison)","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Figure above shows a comparison of the energy evolution as done from:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"direct computation as tfrac12 x_t^2,\ntime-integration of \\ref{eq:Eito}, and\ntime-integration of \\eqref{eq:Estr}.","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Figures below show the ensemble mean energy budgets (using 1000 ensemble members) as computed using Itô and Stratonovich. For the energy budget to close we have to be consistent: if we time-step the energy equation based on Stratonovich calculus then we must compute the work also according to Stratonovich. (For more details see examples/forcing/simpleSDEItoStratonovich.jl.","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"(Image: energy_budgets_Ito) (Image: energy_budgets_Stratonovich)","category":"page"},{"location":"forcing/#A-simple-Stochastic-Partial-Differential-Equation-(SPDE)","page":"Forcing","title":"A simple Stochastic Partial Differential Equation (SPDE)","text":"","category":"section"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"We want now to transfer all the knowledge we got from the previous sections to PDEs. In particular we'll focus on the simple SPDE:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"partial_t nabla^2psi(boldsymbolx t) =  -mu nabla^2psi(boldsymbolx t) + xi(boldsymbolxt)tageqPDEcont","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"which is also equivalently written as:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"mathrmd nabla^2psi_t(boldsymbolx) = -mu nabla^2 psi_t (boldsymbolx) mathrmd t + sqrtsigma mathrmd W_t (boldsymbolx) ","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"The form \\eqref{eq:PDEcont} is the continuous version understood in the Stratonovich interpretation (similar to \\eqref{eq:OUcont}). Thus, forcing xi obeys now:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"langle xi(boldsymbolxt)rangle = 0 quadtextandquad langle xi(boldsymbolxt)xi(boldsymbolxt) rangle= Q(boldsymbolx-boldsymbolx)delta(t-t)","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"that is the forcing is white in time but spatially correlated; its spatial correlation is prescribed by the function Q which is, necessarily, homogeneous in all its arguments (see discussion by Constantinou; Appendix A).","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"The above describes the vorticity evolution of a two-dimensional fluid nabla^2psi which is stochastically forced while dissipated by linear drag mu. The energy of the fluid is:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"E = tfrac12overlineboldsymbolnablapsi^2^xy = -tfrac12overlinepsinabla^2psi^xy","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"where the overbar denotes average over x and y. To obtain the energy equation we multiply \\eqref{eq:PDEcont} with -psi and average over the whole domain. Thus, the work done by the forcing is given by the term:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"P = -overlinepsixi^xy","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"but the above is a stochastic integral and it is meaningless without a rule for computing the stochastic integral.","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Numerically, the work done by the forcing can be obtained Stratonovich-wise as:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"beginaligned\nP_j = -overlinefracpsi(boldsymbolxt_j)+psi(boldsymbolxt_j+1)2  xi(boldsymbolxt_j+1) ^xy\nendaligned","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"or Itô-wise","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"beginaligned\nP_j = -overline psi(boldsymbolxt_j) xi(boldsymbolxt_j+1) ^xy + textdrift\nendaligned","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"But how much is the Itô drift term in this case? As in the previous section, the drift is precisely the ensemble mean of the Stratonovich work, i.e.:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"textrmIto drift= -overlinelangle underbracepsi(boldsymbolxt)circ  xi(boldsymbolxt)_textrmStratonovich rangle^xy","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"But again the above can be computed relatively easy if we use the \"formal\" solution of \\eqref{eq:PDEcont}:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"psi(boldsymbolxt) = mathrme^-mu tpsi(boldsymbolx0) + int_0^t mathrme^-mu(t-s)nabla^-2xi(boldsymbolxs)mathrmd s","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"which implies","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"textdrift = -overlinemathrme^-mu t underbraceleft langle psi(boldsymbolx 0)  xi(boldsymbolx t) right rangle_=0^xy - int_0^t mathrme^-mu(t-s) overlinenabla^-2 left langle xi(boldsymbolx s) xi(boldsymbolx t) rightrangle^xymathrmd s \n= -int_0^t mathrme^-mu(t-s) overlineunderbraceleft  nabla^-2 Q (boldsymbolx) right  big_boldsymbolx=0_textindependent of xy  delta(t-s)^xy  mathrmd s = -frac12 nabla^-2 Q(boldsymbolx) big_boldsymbolx=0 \n= - frac12 left  nabla^-2 int fracmathrmd^2 boldsymbolk(2pi)^2 widehatQ(boldsymbolk)  mathrme^mathrmi boldsymbolk boldsymbolcdotboldsymbolx right _boldsymbolx=0\n= int fracmathrmd^2 boldsymbolk(2pi)^2 fracwidehatQ(boldsymbolk)2k^2","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Thus, the drift, or in this case the mean energy input rate by the stochastic forcing, is precisely determined from the spatial correlation of the forcing. Let us denote:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"varepsilon equiv int fracmathrmd^2 boldsymbolk(2pi)^2 fracwidehatQ(boldsymbolk)2k^2 tageqdefepsilon","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Therefore, work for a single forcing realization is computed numerically as:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"beginaligned\ncolorGreen textItô  colorGreen P_j = -overlinepsi(boldsymbolx t_j) xi(boldsymbolx t_j+1)^xy + varepsilon\ncolorMagenta textStratonovich  colorMagenta P_j = -overlinefracpsi(boldsymbolx t_j)+psi(boldsymbolx t_j+1)2 xi(boldsymbolx t_j+1)^xy tageqPtStrat\nendaligned","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Remember, previously the work done by the stochastic forcing was:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"mathrmd P_t = colorGreen fracsigma2mathrmd t + sqrtsigma x_t mathrmd W_t = colorMagenta sqrtsigma x_t circ mathrmd W_t","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"and by sampling over various forcing realizations:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"langle mathrmd P_t rangle = fracsigma2 mathrmd t = langle sqrtsigma x_t circ mathrmd W_t rangle","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"The code uses Stratonovich. For example, the work done by the forcing in the TwoDTurb module is computed based on \\eqref{eq:PtStrat} with the function","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"@inline function work(s, v::ForcedVars, g)\n  @. v.Uh = g.invKKrsq * (v.prevsol + s.sol)/2.0 * conj(v.Fh)\n  1/(g.Lx*g.Ly)*FourierFlows.parsevalsum(v.Uh, g)\nend","category":"page"},{"location":"forcing/#A-less-simple-SPDE","page":"Forcing","title":"A less-simple SPDE","text":"","category":"section"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"It turns out that nothing changes if we include the nonlinear terms in the vorticity equation:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"partial_t nabla^2 psi(boldsymbolx t) + mathsfJ(psinabla^2psi) =  -mu nabla^2psi(boldsymbolx t) + xi(boldsymbolxt) tageqPDEcont2","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"The nonlinearity does not alter the Itô drift; thus the ensemble mean energy input by the stochastic forcing, remains the same. We can easily verify this from the \"formal\" solution of \\eqref{eq:PDEcont2}:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"psi(boldsymbolx t) = mathrme^-mu t psi(boldsymbolx 0) + int_0^t mathrme^-mu(t-s) nabla^-2 xi(boldsymbolx s)  mathrmd s - int_0^t nabla^-2 mathsfJ left ( psi(boldsymbolx s) nabla^2 psi(boldsymbolx s) right )  mathrmd s","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"When multiplied with xi(boldsymbolx t) the last term vanishes since its only non-zero contribution comes from the point s=t which is of measure zero (in the integrated sense).","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"Figure below shows the energy budgets for a numerical solution of \\eqref{eq:PDEcont2}  starting from rest (psi(boldsymbolx 0)=0) in a doubly periodic square domain of size L (examples/twodturb/IsotropicRingForcing.jl). The forcing was prescribed to have power in a narrow ring in wavenumber space:","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"widehatQ(boldsymbolk) propto mathrme^-(boldsymbolk - k_f)^2  (2delta_f^2)","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"with k_f L  (2pi) = 12 and delta_f L  (2pi) = 2. The mean energy input rate was set to varepsilon = 01.","category":"page"},{"location":"forcing/","page":"Forcing","title":"Forcing","text":"(Image: energy_budgets_SPDE_Stratonovich)","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"EditURL = \"https://github.com/FourierFlows/GeophysicalFlowsDocumentation/blob/master/examples/barotropicqg_acc.jl\"","category":"page"},{"location":"generated/barotropicqg_acc/#Barotropic-QG-beta-plane-turbulence-over-topography","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"","category":"section"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"This example can be run online via (Image: ). Also, it can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"An idealized version of the Southern Ocean. We solve the barotropic quasi-geostrophic eddy dynamics in a flud with variable depth H-h(xy). We also include an \"Antarctic Circumpolar Current,\" i.e.,  a domain-average zonal velocity U(t) which is forced by constant wind  stress F and influenced by bottom drag and topographic form stress. The equations solved are: partial_t nabla^2psi + mathsfJ(psi-U y nabla^2psi + beta y + eta) = -munabla^2psi and partial_t U = F - mu U -  langlepsipartial_xetarangle.","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"using FourierFlows, Plots, Printf\n\nusing FFTW: irfft\n\nimport GeophysicalFlows.BarotropicQG\nimport GeophysicalFlows.BarotropicQG: energy, meanenergy, enstrophy, meanenstrophy","category":"page"},{"location":"generated/barotropicqg_acc/#Choosing-a-device:-CPU-or-GPU","page":"Barotropic QG beta-plane turbulence over topography","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Numerical-parameters-and-time-stepping-parameters","page":"Barotropic QG beta-plane turbulence over topography","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"     nx = 128            # 2D resolution = nx^2\nstepper = \"FilteredRK4\"  # timestepper\n    dt  = 0.1            # timestep\n nsteps = 10000          # total number of time-steps\n nsubs  = 25             # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Physical-parameters","page":"Barotropic QG beta-plane turbulence over topography","title":"Physical parameters","text":"","category":"section"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"Lx = 2π        # domain size\n ν = 4e-15     # viscosity\nnν = 4         # viscosity order\n β = 1.4015    # the y-gradient of planetary PV\n μ = 1e-2      # linear drag\n F = 0.0012    # normalized wind stress forcing on domain-averaged zonal flow U(t) flow\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"Define the topographic potential vorticity, f_0 h(x y)H","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"topoPV(x, y) = 2cos(4x)*cos(4y)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"and the forcing function F (here forcing is constant in time) that acts on the domain-averaged U equation.","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"calcFU(t) = F\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Problem-setup","page":"Barotropic QG beta-plane turbulence over topography","title":"Problem setup","text":"","category":"section"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"We initialize a Problem by providing a set of keyword arguments,","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"prob = BarotropicQG.Problem(dev; nx=nx, Lx=Lx, β=β, eta=topoPV,\n                  calcFU=calcFU, ν=ν, nν=nν, μ=μ, dt=dt, stepper=stepper)\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"and define some shortcuts.","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"sol, cl, vs, pr, gr = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx, y = gr.x, gr.y\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Setting-initial-conditions","page":"Barotropic QG beta-plane turbulence over topography","title":"Setting initial conditions","text":"","category":"section"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"Our initial condition is simply fluid at rest.","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"BarotropicQG.set_zeta!(prob, zeros(gr.nx, gr.ny))","category":"page"},{"location":"generated/barotropicqg_acc/#Diagnostics","page":"Barotropic QG beta-plane turbulence over topography","title":"Diagnostics","text":"","category":"section"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"Create Diagnostics – energy, meanenergy, enstrophy, and meanenstrophy functions are imported at the top.","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"E = Diagnostic(energy, prob; nsteps=nsteps)\nQ = Diagnostic(enstrophy, prob; nsteps=nsteps)\nEmean = Diagnostic(meanenergy, prob; nsteps=nsteps)\nQmean = Diagnostic(meanenstrophy, prob; nsteps=nsteps)\ndiags = [E, Emean, Q, Qmean]\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Output","page":"Barotropic QG beta-plane turbulence over topography","title":"Output","text":"","category":"section"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"We choose folder for outputing .jld2 files and snapshots (.png files).","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"filepath = \".\"\nplotpath = \"./plots_barotropicqgtopography\"\nplotname = \"snapshots\"\nfilename = joinpath(filepath, \"barotropicqgtopography.jld2\")\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"Do some basic file management,","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"if isfile(filename); rm(filename); end\nif !isdir(plotpath); mkdir(plotpath); end\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"and then create Output.","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"get_sol(prob) = sol # extracts the Fourier-transformed solution\nget_u(prob) = irfft(im*gr.lr.*gr.invKrsq.*sol, gr.nx)\nout = Output(prob, filename, (:sol, get_sol), (:u, get_u))\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Visualizing-the-simulation","page":"Barotropic QG beta-plane turbulence over topography","title":"Visualizing the simulation","text":"","category":"section"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"We define a function that plots the potential vorticity field and the evolution of energy and enstrophy.","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"function plot_output(prob)\n\n  pq = heatmap(x, y, vs.q,\n                 c = :balance,\n              clim = (-2, 2),\n       aspectratio = 1,\n             xlims = (-gr.Lx/2, gr.Lx/2),\n             ylims = (-gr.Ly/2, gr.Ly/2),\n            xticks = -3:3,\n            yticks = -3:3,\n            xlabel = \"x\",\n            ylabel = \"y\",\n             title = \"∇²ψ + η\",\n        framestyle = :box)\n\n  pE = plot(2,\n             label = [\"eddy energy\" \"mean energy\"],\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 10.1),\n             ylims = (0, 0.0008),\n            xlabel = \"μt\")\n\n  pQ = plot(2,\n             label = [\"eddy enstrophy\" \"mean enstrophy\"],\n         linewidth = 2,\n             alpha = 0.7,\n             xlims = (-0.1, 10.1),\n             ylims = (-0.02, 0.12),\n            xlabel = \"μt\")\n\n  l = @layout [ a{0.5w} grid(2, 1) ]\n  p = plot(pq, pE, pQ, layout=l, size = (900, 600))\n\n  return p\nend\nnothing # hide","category":"page"},{"location":"generated/barotropicqg_acc/#Time-stepping-the-Problem-forward","page":"Barotropic QG beta-plane turbulence over topography","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"We time-step the Problem forward in time.","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"p = plot_output(prob)\n\nstartwalltime = time()\n\nanim = @animate for j=0:Int(nsteps/nsubs)\n\n  cfl = cl.dt*maximum([maximum(vs.U.+vs.u)/gr.dx, maximum(vs.v)/gr.dy])\n\n  log = @sprintf(\"step: %04d, t: %d, cfl: %.2f, E: %.4f, Q: %.4f, walltime: %.2f min\",\n    cl.step, cl.t, cfl, E.data[E.i], Q.data[Q.i], (time()-startwalltime)/60)\n\n  if j%(2000/nsubs)==0; println(log) end\n\n  p[1][1][:z] = Array(vs.q)\n  p[1][:title] = \"∇²ψ + η, μt=\"*@sprintf(\"%.2f\", μ*cl.t)\n  push!(p[2][1], μ*E.t[E.i], E.data[E.i])\n  push!(p[2][2], μ*Emean.t[Emean.i], Emean.data[Emean.i])\n  push!(p[3][1], μ*Q.t[Q.i], Q.data[Q.i])\n  push!(p[3][2], μ*Qmean.t[Qmean.i], Qmean.data[Qmean.i])\n\n  stepforward!(prob, diags, nsubs)\n  BarotropicQG.updatevars!(prob)\n\nend\n\nmp4(anim, \"barotropicqg_acc.mp4\", fps=18)","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"Note that since mean flow enstrophy is Q_U = beta U it can attain negative values.","category":"page"},{"location":"generated/barotropicqg_acc/#Save","page":"Barotropic QG beta-plane turbulence over topography","title":"Save","text":"","category":"section"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"Finally save the last snapshot.","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"savename = @sprintf(\"%s_%09d.png\", joinpath(plotpath, plotname), cl.step)\nsavefig(savename)","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"","category":"page"},{"location":"generated/barotropicqg_acc/","page":"Barotropic QG beta-plane turbulence over topography","title":"Barotropic QG beta-plane turbulence over topography","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#GeophysicalFlows.jl-Documentation","page":"Home","title":"GeophysicalFlows.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GeophysicalFlows.jl is a collection of modules which leverage the  FourierFlows.jl framework to provide solvers for problems in Geophysical Fluid Dynamics, on periodic domains and using Fourier-based pseudospectral methods.","category":"page"},{"location":"#Developers","page":"Home","title":"Developers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GeophysicalFlows is currently being developed by Navid C. Constantinou and Gregory L. Wagner.","category":"page"},{"location":"#Cite","page":"Home","title":"Cite","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The code is citable via zenodo.","category":"page"},{"location":"man/types/#Private-types","page":"Private types","title":"Private types","text":"","category":"section"},{"location":"man/types/#Private-types-in-module-GeophysicalFlows:","page":"Private types","title":"Private types in module GeophysicalFlows:","text":"","category":"section"},{"location":"man/types/","page":"Private types","title":"Private types","text":"Modules = [GeophysicalFlows]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#Private-types-in-module-TwoDNavierStokes:","page":"Private types","title":"Private types in module TwoDNavierStokes:","text":"","category":"section"},{"location":"man/types/","page":"Private types","title":"Private types","text":"Modules = [GeophysicalFlows.TwoDNavierStokes]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#GeophysicalFlows.TwoDNavierStokes.ForcedVars-Union{Tuple{Dev}, Tuple{Dev,FourierFlows.AbstractGrid}} where Dev","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.ForcedVars","text":"ForcedVars(dev, grid)\n\nReturns the vars for forced two-dimensional turbulence on device dev and with grid.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.TwoDNavierStokes.Params","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.Params","text":"Params(ν, nν, μ, nμ, calcF!)\n\nReturns the params for two-dimensional turbulence.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#GeophysicalFlows.TwoDNavierStokes.StochasticForcedVars-Union{Tuple{Dev}, Tuple{Dev,FourierFlows.AbstractGrid}} where Dev","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.StochasticForcedVars","text":"StochasticForcedVars(dev, grid)\n\nReturns the vars for stochastically forced two-dimensional turbulence on device dev and with grid grid.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.TwoDNavierStokes.Vars-Union{Tuple{Dev}, Tuple{Dev,FourierFlows.AbstractGrid}} where Dev","page":"Private types","title":"GeophysicalFlows.TwoDNavierStokes.Vars","text":"Vars(dev, grid)\n\nReturns the vars for unforced two-dimensional turbulence on device dev and with grid.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#Private-types-in-module-BarotropicQG:","page":"Private types","title":"Private types in module BarotropicQG:","text":"","category":"section"},{"location":"man/types/","page":"Private types","title":"Private types","text":"Modules = [GeophysicalFlows.BarotropicQG]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#GeophysicalFlows.BarotropicQG.ForcedVars-Union{Tuple{Dev}, Tuple{Dev,FourierFlows.AbstractGrid}} where Dev","page":"Private types","title":"GeophysicalFlows.BarotropicQG.ForcedVars","text":"ForcedVars(dev, grid)\n\nReturns the vars for forced two-dimensional barotropic QG problem on device dev and with grid.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.BarotropicQG.Params","page":"Private types","title":"GeophysicalFlows.BarotropicQG.Params","text":"Params(g::TwoDGrid, β, FU, eta, μ, ν, nν, calcFU, calcFq)\n\nReturns the params for an unforced two-dimensional barotropic QG problem.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#GeophysicalFlows.BarotropicQG.Params-Union{Tuple{A}, Tuple{T}, Tuple{FourierFlows.AbstractGrid{T,A},Any,Function,Any,Any,Int64,Any,Any}} where A where T","page":"Private types","title":"GeophysicalFlows.BarotropicQG.Params","text":"Params(g::TwoDGrid, β, eta::Function, μ, ν, nν, calcFU, calcFq)\n\nConstructor for Params that accepts a generating function for the topographic PV.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.BarotropicQG.StochasticForcedVars-Union{Tuple{Dev}, Tuple{Dev,FourierFlows.AbstractGrid}} where Dev","page":"Private types","title":"GeophysicalFlows.BarotropicQG.StochasticForcedVars","text":"StochasticForcedVars(dev, grid)\n\nReturns the vars for stochastically forced two-dimensional barotropic QG problem on device dev and with grid.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.BarotropicQG.Vars-Union{Tuple{Dev}, Tuple{Dev,FourierFlows.AbstractGrid}} where Dev","page":"Private types","title":"GeophysicalFlows.BarotropicQG.Vars","text":"Vars(dev, grid)\n\nReturns the vars for unforced two-dimensional barotropic QG problem on device dev and with grid\n\n\n\n\n\n","category":"method"},{"location":"man/types/#Private-types-in-module-BarotropicQGQL:","page":"Private types","title":"Private types in module BarotropicQGQL:","text":"","category":"section"},{"location":"man/types/","page":"Private types","title":"Private types","text":"Modules = [GeophysicalFlows.BarotropicQGQL]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#GeophysicalFlows.BarotropicQGQL.ForcedVars-Union{Tuple{Dev}, Tuple{Dev,FourierFlows.AbstractGrid}} where Dev","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.ForcedVars","text":"ForcedVars(dev, grid)\n\nReturns the vars for forced two-dimensional barotropic QG QL problem on device dev and grid.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.BarotropicQGQL.Params","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.Params","text":"Params\n\nA struct that contains all parameter values for a two-dimensional barotropic QG QL problem.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#GeophysicalFlows.BarotropicQGQL.Params-Union{Tuple{A}, Tuple{T}, Tuple{FourierFlows.AbstractGrid{T,A},Any,Function,Any,Any,Any,Any}} where A where T","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.Params","text":"Params(grid, β, eta::Function, μ, ν, nν, calcF)\n\nConstructor for params that accepts a generating function for the topographic PV, eta.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.BarotropicQGQL.StochasticForcedVars-Union{Tuple{Dev}, Tuple{Dev,FourierFlows.AbstractGrid}} where Dev","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.StochasticForcedVars","text":"StochasticForcedVars(dev, grid)\n\nReturns the vars for stochastically forced two-dimensional barotropic QG QL problem on  device dev and grid.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.BarotropicQGQL.Vars","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.Vars","text":"Vars\n\nA struct that contains all variables for a two-dimensional barotropic QG QL problem.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#GeophysicalFlows.BarotropicQGQL.Vars-Union{Tuple{Dev}, Tuple{Dev,FourierFlows.AbstractGrid}} where Dev","page":"Private types","title":"GeophysicalFlows.BarotropicQGQL.Vars","text":"Vars(dev, grid)\n\nReturns the vars for unforced two-dimensional barotropic QG problem with grid.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#Private-types-in-module-MultilayerQG:","page":"Private types","title":"Private types in module MultilayerQG:","text":"","category":"section"},{"location":"man/types/","page":"Private types","title":"Private types","text":"Modules = [GeophysicalFlows.MultilayerQG]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#GeophysicalFlows.MultilayerQG.ForcedVars-Union{Tuple{Dev}, Tuple{Dev,Any,Any}} where Dev","page":"Private types","title":"GeophysicalFlows.MultilayerQG.ForcedVars","text":"ForcedVars(dev, grid, params)\n\nReturns the vars for forced multi-layer QG problem with grid and params.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.MultilayerQG.StochasticForcedVars-Union{Tuple{Dev}, Tuple{Dev,Any,Any}} where Dev","page":"Private types","title":"GeophysicalFlows.MultilayerQG.StochasticForcedVars","text":"StochasticForcedVars(dev, rid, params)\n\nReturns the vars for forced multi-layer QG problem with grid and params.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#GeophysicalFlows.MultilayerQG.Vars-Union{Tuple{Dev}, Tuple{Dev,Any,Any}} where Dev","page":"Private types","title":"GeophysicalFlows.MultilayerQG.Vars","text":"Vars(dev, grid, params)\n\nReturns the vars for unforced multi-layer QG problem with grid and params.\n\n\n\n\n\n","category":"method"}]
}
